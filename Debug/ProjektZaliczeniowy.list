
ProjektZaliczeniowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ad0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08007ca0  08007ca0  00017ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e30  08007e30  000201c0  2**0
                  CONTENTS
  4 .ARM          00000008  08007e30  08007e30  00017e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e38  08007e38  000201c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e38  08007e38  00017e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e3c  08007e3c  00017e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000080  08007ec0  00020080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000120  08007f60  00020120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000808  200001c0  08008000  000201c0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200009c8  08008000  000209c8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ed22  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d02  00000000  00000000  0003ef12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016c8  00000000  00000000  00042c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001508  00000000  00000000  000442e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a037  00000000  00000000  000457e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022896  00000000  00000000  0006f81f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fc967  00000000  00000000  000920b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000c9  00000000  00000000  0018ea1c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000063c0  00000000  00000000  0018eae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c0 	.word	0x200001c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007c88 	.word	0x08007c88

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001c4 	.word	0x200001c4
 800020c:	08007c88 	.word	0x08007c88

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <BH1750_Init>:
 *  Created on: Jan 15, 2023
 *      Author: krza3
 */
#include "bh_1750.h"
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af02      	add	r7, sp, #8
 80005ba:	6078      	str	r0, [r7, #4]
  uint8_t command;

  command = BH1750_POWER_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	791b      	ldrb	r3, [r3, #4]
 80005c8:	b299      	uxth	r1, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	f107 020f 	add.w	r2, r7, #15
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2301      	movs	r3, #1
 80005d6:	f001 ff63 	bl	80024a0 <HAL_I2C_Master_Transmit>

  command = BH1750_CONTINOUS_H_RES_MODE;
 80005da:	2310      	movs	r3, #16
 80005dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	6818      	ldr	r0, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	791b      	ldrb	r3, [r3, #4]
 80005e6:	b299      	uxth	r1, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	f107 020f 	add.w	r2, r7, #15
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2301      	movs	r3, #1
 80005f4:	f001 ff54 	bl	80024a0 <HAL_I2C_Master_Transmit>
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <BH1750_ReadIlluminance_lux>:
float BH1750_ReadIlluminance_lux(BH1750_HandleTypeDef* hbh1750)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af02      	add	r7, sp, #8
 8000606:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];

  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6818      	ldr	r0, [r3, #0]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	791b      	ldrb	r3, [r3, #4]
 8000610:	b299      	uxth	r1, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	f107 020c 	add.w	r2, r7, #12
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2302      	movs	r3, #2
 800061e:	f002 f833 	bl	8002688 <HAL_I2C_Master_Receive>

  return ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2f; // @see BH1750 technical note p. 10;
 8000622:	7b3b      	ldrb	r3, [r7, #12]
 8000624:	021b      	lsls	r3, r3, #8
 8000626:	7b7a      	ldrb	r2, [r7, #13]
 8000628:	4313      	orrs	r3, r2
 800062a:	ee07 3a90 	vmov	s15, r3
 800062e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000632:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000648 <BH1750_ReadIlluminance_lux+0x48>
 8000636:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800063a:	eef0 7a66 	vmov.f32	s15, s13
}
 800063e:	eeb0 0a67 	vmov.f32	s0, s15
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	3f99999a 	.word	0x3f99999a

0800064c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <MX_ETH_Init+0x84>)
 8000652:	4a20      	ldr	r2, [pc, #128]	; (80006d4 <MX_ETH_Init+0x88>)
 8000654:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <MX_ETH_Init+0x8c>)
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <MX_ETH_Init+0x8c>)
 800065e:	2280      	movs	r2, #128	; 0x80
 8000660:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <MX_ETH_Init+0x8c>)
 8000664:	22e1      	movs	r2, #225	; 0xe1
 8000666:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_ETH_Init+0x8c>)
 800066a:	2200      	movs	r2, #0
 800066c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_ETH_Init+0x8c>)
 8000670:	2200      	movs	r2, #0
 8000672:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_ETH_Init+0x8c>)
 8000676:	2200      	movs	r2, #0
 8000678:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <MX_ETH_Init+0x84>)
 800067c:	4a16      	ldr	r2, [pc, #88]	; (80006d8 <MX_ETH_Init+0x8c>)
 800067e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_ETH_Init+0x84>)
 8000682:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000686:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_ETH_Init+0x84>)
 800068a:	4a14      	ldr	r2, [pc, #80]	; (80006dc <MX_ETH_Init+0x90>)
 800068c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <MX_ETH_Init+0x84>)
 8000690:	4a13      	ldr	r2, [pc, #76]	; (80006e0 <MX_ETH_Init+0x94>)
 8000692:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_ETH_Init+0x84>)
 8000696:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800069a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <MX_ETH_Init+0x84>)
 800069e:	f001 f96b 	bl	8001978 <HAL_ETH_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006a8:	f000 fbcc 	bl	8000e44 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006ac:	2238      	movs	r2, #56	; 0x38
 80006ae:	2100      	movs	r1, #0
 80006b0:	480c      	ldr	r0, [pc, #48]	; (80006e4 <MX_ETH_Init+0x98>)
 80006b2:	f006 fde7 	bl	8007284 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_ETH_Init+0x98>)
 80006b8:	2221      	movs	r2, #33	; 0x21
 80006ba:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_ETH_Init+0x98>)
 80006be:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80006c2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_ETH_Init+0x98>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000214 	.word	0x20000214
 80006d4:	40028000 	.word	0x40028000
 80006d8:	200002c4 	.word	0x200002c4
 80006dc:	20000120 	.word	0x20000120
 80006e0:	20000080 	.word	0x20000080
 80006e4:	200001dc 	.word	0x200001dc

080006e8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08e      	sub	sp, #56	; 0x38
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a4e      	ldr	r2, [pc, #312]	; (8000840 <HAL_ETH_MspInit+0x158>)
 8000706:	4293      	cmp	r3, r2
 8000708:	f040 8096 	bne.w	8000838 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800070c:	4b4d      	ldr	r3, [pc, #308]	; (8000844 <HAL_ETH_MspInit+0x15c>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000710:	4a4c      	ldr	r2, [pc, #304]	; (8000844 <HAL_ETH_MspInit+0x15c>)
 8000712:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000716:	6313      	str	r3, [r2, #48]	; 0x30
 8000718:	4b4a      	ldr	r3, [pc, #296]	; (8000844 <HAL_ETH_MspInit+0x15c>)
 800071a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000720:	623b      	str	r3, [r7, #32]
 8000722:	6a3b      	ldr	r3, [r7, #32]
 8000724:	4b47      	ldr	r3, [pc, #284]	; (8000844 <HAL_ETH_MspInit+0x15c>)
 8000726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000728:	4a46      	ldr	r2, [pc, #280]	; (8000844 <HAL_ETH_MspInit+0x15c>)
 800072a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800072e:	6313      	str	r3, [r2, #48]	; 0x30
 8000730:	4b44      	ldr	r3, [pc, #272]	; (8000844 <HAL_ETH_MspInit+0x15c>)
 8000732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000734:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000738:	61fb      	str	r3, [r7, #28]
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	4b41      	ldr	r3, [pc, #260]	; (8000844 <HAL_ETH_MspInit+0x15c>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000740:	4a40      	ldr	r2, [pc, #256]	; (8000844 <HAL_ETH_MspInit+0x15c>)
 8000742:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000746:	6313      	str	r3, [r2, #48]	; 0x30
 8000748:	4b3e      	ldr	r3, [pc, #248]	; (8000844 <HAL_ETH_MspInit+0x15c>)
 800074a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000750:	61bb      	str	r3, [r7, #24]
 8000752:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000754:	4b3b      	ldr	r3, [pc, #236]	; (8000844 <HAL_ETH_MspInit+0x15c>)
 8000756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000758:	4a3a      	ldr	r2, [pc, #232]	; (8000844 <HAL_ETH_MspInit+0x15c>)
 800075a:	f043 0304 	orr.w	r3, r3, #4
 800075e:	6313      	str	r3, [r2, #48]	; 0x30
 8000760:	4b38      	ldr	r3, [pc, #224]	; (8000844 <HAL_ETH_MspInit+0x15c>)
 8000762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000764:	f003 0304 	and.w	r3, r3, #4
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	4b35      	ldr	r3, [pc, #212]	; (8000844 <HAL_ETH_MspInit+0x15c>)
 800076e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000770:	4a34      	ldr	r2, [pc, #208]	; (8000844 <HAL_ETH_MspInit+0x15c>)
 8000772:	f043 0301 	orr.w	r3, r3, #1
 8000776:	6313      	str	r3, [r2, #48]	; 0x30
 8000778:	4b32      	ldr	r3, [pc, #200]	; (8000844 <HAL_ETH_MspInit+0x15c>)
 800077a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000784:	4b2f      	ldr	r3, [pc, #188]	; (8000844 <HAL_ETH_MspInit+0x15c>)
 8000786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000788:	4a2e      	ldr	r2, [pc, #184]	; (8000844 <HAL_ETH_MspInit+0x15c>)
 800078a:	f043 0302 	orr.w	r3, r3, #2
 800078e:	6313      	str	r3, [r2, #48]	; 0x30
 8000790:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <HAL_ETH_MspInit+0x15c>)
 8000792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000794:	f003 0302 	and.w	r3, r3, #2
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800079c:	4b29      	ldr	r3, [pc, #164]	; (8000844 <HAL_ETH_MspInit+0x15c>)
 800079e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a0:	4a28      	ldr	r2, [pc, #160]	; (8000844 <HAL_ETH_MspInit+0x15c>)
 80007a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a6:	6313      	str	r3, [r2, #48]	; 0x30
 80007a8:	4b26      	ldr	r3, [pc, #152]	; (8000844 <HAL_ETH_MspInit+0x15c>)
 80007aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007b4:	2332      	movs	r3, #50	; 0x32
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c4:	230b      	movs	r3, #11
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007cc:	4619      	mov	r1, r3
 80007ce:	481e      	ldr	r0, [pc, #120]	; (8000848 <HAL_ETH_MspInit+0x160>)
 80007d0:	f001 fbf8 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007d4:	2386      	movs	r3, #134	; 0x86
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e4:	230b      	movs	r3, #11
 80007e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ec:	4619      	mov	r1, r3
 80007ee:	4817      	ldr	r0, [pc, #92]	; (800084c <HAL_ETH_MspInit+0x164>)
 80007f0:	f001 fbe8 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000806:	230b      	movs	r3, #11
 8000808:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080e:	4619      	mov	r1, r3
 8000810:	480f      	ldr	r0, [pc, #60]	; (8000850 <HAL_ETH_MspInit+0x168>)
 8000812:	f001 fbd7 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000816:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000828:	230b      	movs	r3, #11
 800082a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800082c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000830:	4619      	mov	r1, r3
 8000832:	4808      	ldr	r0, [pc, #32]	; (8000854 <HAL_ETH_MspInit+0x16c>)
 8000834:	f001 fbc6 	bl	8001fc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000838:	bf00      	nop
 800083a:	3738      	adds	r7, #56	; 0x38
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40028000 	.word	0x40028000
 8000844:	40023800 	.word	0x40023800
 8000848:	40020800 	.word	0x40020800
 800084c:	40020000 	.word	0x40020000
 8000850:	40020400 	.word	0x40020400
 8000854:	40021800 	.word	0x40021800

08000858 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	; 0x30
 800085c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086e:	4b4b      	ldr	r3, [pc, #300]	; (800099c <MX_GPIO_Init+0x144>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a4a      	ldr	r2, [pc, #296]	; (800099c <MX_GPIO_Init+0x144>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b48      	ldr	r3, [pc, #288]	; (800099c <MX_GPIO_Init+0x144>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	61bb      	str	r3, [r7, #24]
 8000884:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000886:	4b45      	ldr	r3, [pc, #276]	; (800099c <MX_GPIO_Init+0x144>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a44      	ldr	r2, [pc, #272]	; (800099c <MX_GPIO_Init+0x144>)
 800088c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b42      	ldr	r3, [pc, #264]	; (800099c <MX_GPIO_Init+0x144>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b3f      	ldr	r3, [pc, #252]	; (800099c <MX_GPIO_Init+0x144>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a3e      	ldr	r2, [pc, #248]	; (800099c <MX_GPIO_Init+0x144>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b3c      	ldr	r3, [pc, #240]	; (800099c <MX_GPIO_Init+0x144>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	4b39      	ldr	r3, [pc, #228]	; (800099c <MX_GPIO_Init+0x144>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a38      	ldr	r2, [pc, #224]	; (800099c <MX_GPIO_Init+0x144>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b36      	ldr	r3, [pc, #216]	; (800099c <MX_GPIO_Init+0x144>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	4b33      	ldr	r3, [pc, #204]	; (800099c <MX_GPIO_Init+0x144>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a32      	ldr	r2, [pc, #200]	; (800099c <MX_GPIO_Init+0x144>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b30      	ldr	r3, [pc, #192]	; (800099c <MX_GPIO_Init+0x144>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e6:	4b2d      	ldr	r3, [pc, #180]	; (800099c <MX_GPIO_Init+0x144>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a2c      	ldr	r2, [pc, #176]	; (800099c <MX_GPIO_Init+0x144>)
 80008ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b2a      	ldr	r3, [pc, #168]	; (800099c <MX_GPIO_Init+0x144>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f244 0181 	movw	r1, #16513	; 0x4081
 8000904:	4826      	ldr	r0, [pc, #152]	; (80009a0 <MX_GPIO_Init+0x148>)
 8000906:	f001 fd09 	bl	800231c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2140      	movs	r1, #64	; 0x40
 800090e:	4825      	ldr	r0, [pc, #148]	; (80009a4 <MX_GPIO_Init+0x14c>)
 8000910:	f001 fd04 	bl	800231c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800091a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	481f      	ldr	r0, [pc, #124]	; (80009a8 <MX_GPIO_Init+0x150>)
 800092c:	f001 fb4a 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000930:	f244 0381 	movw	r3, #16513	; 0x4081
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4815      	ldr	r0, [pc, #84]	; (80009a0 <MX_GPIO_Init+0x148>)
 800094a:	f001 fb3b 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800094e:	2340      	movs	r3, #64	; 0x40
 8000950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	480f      	ldr	r0, [pc, #60]	; (80009a4 <MX_GPIO_Init+0x14c>)
 8000966:	f001 fb2d 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800096a:	2380      	movs	r3, #128	; 0x80
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4809      	ldr	r0, [pc, #36]	; (80009a4 <MX_GPIO_Init+0x14c>)
 800097e:	f001 fb21 	bl	8001fc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	2028      	movs	r0, #40	; 0x28
 8000988:	f000 ff2d 	bl	80017e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800098c:	2028      	movs	r0, #40	; 0x28
 800098e:	f000 ff46 	bl	800181e <HAL_NVIC_EnableIRQ>

}
 8000992:	bf00      	nop
 8000994:	3730      	adds	r7, #48	; 0x30
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020400 	.word	0x40020400
 80009a4:	40021800 	.word	0x40021800
 80009a8:	40020800 	.word	0x40020800

080009ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009b2:	4a1c      	ldr	r2, [pc, #112]	; (8000a24 <MX_I2C1_Init+0x78>)
 80009b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009b8:	4a1b      	ldr	r2, [pc, #108]	; (8000a28 <MX_I2C1_Init+0x7c>)
 80009ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009e6:	480e      	ldr	r0, [pc, #56]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009e8:	f001 fcca 	bl	8002380 <HAL_I2C_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009f2:	f000 fa27 	bl	8000e44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009f6:	2100      	movs	r1, #0
 80009f8:	4809      	ldr	r0, [pc, #36]	; (8000a20 <MX_I2C1_Init+0x74>)
 80009fa:	f002 f9c1 	bl	8002d80 <HAL_I2CEx_ConfigAnalogFilter>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a04:	f000 fa1e 	bl	8000e44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_I2C1_Init+0x74>)
 8000a0c:	f002 fa03 	bl	8002e16 <HAL_I2CEx_ConfigDigitalFilter>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a16:	f000 fa15 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200002cc 	.word	0x200002cc
 8000a24:	40005400 	.word	0x40005400
 8000a28:	00808cd2 	.word	0x00808cd2

08000a2c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b0aa      	sub	sp, #168	; 0xa8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	2284      	movs	r2, #132	; 0x84
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f006 fc19 	bl	8007284 <memset>
  if(i2cHandle->Instance==I2C1)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a26      	ldr	r2, [pc, #152]	; (8000af0 <HAL_I2C_MspInit+0xc4>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d144      	bne.n	8000ae6 <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a60:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a66:	f107 0310 	add.w	r3, r7, #16
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f003 f842 	bl	8003af4 <HAL_RCCEx_PeriphCLKConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a76:	f000 f9e5 	bl	8000e44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <HAL_I2C_MspInit+0xc8>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a1d      	ldr	r2, [pc, #116]	; (8000af4 <HAL_I2C_MspInit+0xc8>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <HAL_I2C_MspInit+0xc8>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000a92:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9a:	2312      	movs	r3, #18
 8000a9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aac:	2304      	movs	r3, #4
 8000aae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	480f      	ldr	r0, [pc, #60]	; (8000af8 <HAL_I2C_MspInit+0xcc>)
 8000aba:	f001 fa83 	bl	8001fc4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <HAL_I2C_MspInit+0xc8>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <HAL_I2C_MspInit+0xc8>)
 8000ac4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_I2C_MspInit+0xc8>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	201f      	movs	r0, #31
 8000adc:	f000 fe83 	bl	80017e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ae0:	201f      	movs	r0, #31
 8000ae2:	f000 fe9c 	bl	800181e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	37a8      	adds	r7, #168	; 0xa8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40005400 	.word	0x40005400
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020400 	.word	0x40020400

08000afc <HAL_TIM_PeriodElapsedCallback>:
float error=0;//e
float reference = 200;//yr
float duty=0;//u
arm_pid_instance_f32 PID;//pid
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	  if(htim == &htim3) //Timer probkowania
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a38      	ldr	r2, [pc, #224]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d169      	bne.n	8000be0 <HAL_TIM_PeriodElapsedCallback+0xe4>
	  {
		    light = BH1750_ReadIlluminance_lux(&hbh1750_1);//odczyt natezenia swiatla
 8000b0c:	4837      	ldr	r0, [pc, #220]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000b0e:	f7ff fd77 	bl	8000600 <BH1750_ReadIlluminance_lux>
 8000b12:	eef0 7a40 	vmov.f32	s15, s0
 8000b16:	4b36      	ldr	r3, [pc, #216]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000b18:	edc3 7a00 	vstr	s15, [r3]

		    error = reference - light;//oblizcenie uchybu
 8000b1c:	4b35      	ldr	r3, [pc, #212]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000b1e:	ed93 7a00 	vldr	s14, [r3]
 8000b22:	4b33      	ldr	r3, [pc, #204]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000b24:	edd3 7a00 	vldr	s15, [r3]
 8000b28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b2c:	4b32      	ldr	r3, [pc, #200]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000b2e:	edc3 7a00 	vstr	s15, [r3]

		  	duty = arm_pid_f32(&PID, error);//obliczenie sygnalu z regulatora
 8000b32:	4b31      	ldr	r3, [pc, #196]	; (8000bf8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a31      	ldr	r2, [pc, #196]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000b38:	617a      	str	r2, [r7, #20]
 8000b3a:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	ed93 7a00 	vldr	s14, [r3]
 8000b42:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b46:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	edd3 6a01 	vldr	s13, [r3, #4]
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b56:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000b5a:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	edd3 6a02 	vldr	s13, [r3, #8]
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b7c:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	68fa      	ldr	r2, [r7, #12]
 8000b92:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4a1a      	ldr	r2, [pc, #104]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000b98:	6013      	str	r3, [r2, #0]
		  	//nasycenie
			if(duty>1000)
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000b9c:	edd3 7a00 	vldr	s15, [r3]
 8000ba0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000c04 <HAL_TIM_PeriodElapsedCallback+0x108>
 8000ba4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bac:	dd02      	ble.n	8000bb4 <HAL_TIM_PeriodElapsedCallback+0xb8>
				duty=1000;
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000bb0:	4a15      	ldr	r2, [pc, #84]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000bb2:	601a      	str	r2, [r3, #0]
			if(duty<0)
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000bb6:	edd3 7a00 	vldr	s15, [r3]
 8000bba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bc2:	d503      	bpl.n	8000bcc <HAL_TIM_PeriodElapsedCallback+0xd0>
				duty=0;
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000bc6:	f04f 0200 	mov.w	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,duty);//ustawienie wypelnienia sygnalu PWM
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000bce:	edd3 7a00 	vldr	s15, [r3]
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bda:	ee17 2a90 	vmov	r2, s15
 8000bde:	635a      	str	r2, [r3, #52]	; 0x34
	  }
}
 8000be0:	bf00      	nop
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2000038c 	.word	0x2000038c
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	20000358 	.word	0x20000358
 8000bf4:	2000000c 	.word	0x2000000c
 8000bf8:	2000035c 	.word	0x2000035c
 8000bfc:	20000364 	.word	0x20000364
 8000c00:	20000360 	.word	0x20000360
 8000c04:	447a0000 	.word	0x447a0000
 8000c08:	447a0000 	.word	0x447a0000
 8000c0c:	200003d8 	.word	0x200003d8

08000c10 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <HAL_UART_RxCpltCallback+0x38>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d109      	bne.n	8000c34 <HAL_UART_RxCpltCallback+0x24>
	  {
		reference=atol(Rx_Data);
 8000c20:	480a      	ldr	r0, [pc, #40]	; (8000c4c <HAL_UART_RxCpltCallback+0x3c>)
 8000c22:	f006 fb01 	bl	8007228 <atol>
 8000c26:	ee07 0a90 	vmov	s15, r0
 8000c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <HAL_UART_RxCpltCallback+0x40>)
 8000c30:	edc3 7a00 	vstr	s15, [r3]
	  }
	HAL_UART_Receive_IT(&huart3, Rx_Data ,4);
 8000c34:	2204      	movs	r2, #4
 8000c36:	4905      	ldr	r1, [pc, #20]	; (8000c4c <HAL_UART_RxCpltCallback+0x3c>)
 8000c38:	4803      	ldr	r0, [pc, #12]	; (8000c48 <HAL_UART_RxCpltCallback+0x38>)
 8000c3a:	f004 fdd8 	bl	80057ee <HAL_UART_Receive_IT>
	}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000424 	.word	0x20000424
 8000c4c:	20000354 	.word	0x20000354
 8000c50:	2000000c 	.word	0x2000000c

08000c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c58:	f000 fc69 	bl	800152e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c5c:	f000 f83c 	bl	8000cd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c60:	f7ff fdfa 	bl	8000858 <MX_GPIO_Init>
  MX_ETH_Init();
 8000c64:	f7ff fcf2 	bl	800064c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000c68:	f000 faf8 	bl	800125c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c6c:	f000 fb8e 	bl	800138c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000c70:	f7ff fe9c 	bl	80009ac <MX_I2C1_Init>
  MX_TIM3_Init();
 8000c74:	f000 f9b2 	bl	8000fdc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c78:	f000 f9fe 	bl	8001078 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  BH1750_Init(&hbh1750_1);//czujnik swiatla
 8000c7c:	480f      	ldr	r0, [pc, #60]	; (8000cbc <main+0x68>)
 8000c7e:	f7ff fc99 	bl	80005b4 <BH1750_Init>
  //inicjacja PID
  PID.Kp=5;
 8000c82:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <main+0x6c>)
 8000c84:	4a0f      	ldr	r2, [pc, #60]	; (8000cc4 <main+0x70>)
 8000c86:	619a      	str	r2, [r3, #24]
  PID.Ki=5;
 8000c88:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <main+0x6c>)
 8000c8a:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <main+0x70>)
 8000c8c:	61da      	str	r2, [r3, #28]
  PID.Kd=5;
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <main+0x6c>)
 8000c90:	4a0c      	ldr	r2, [pc, #48]	; (8000cc4 <main+0x70>)
 8000c92:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID, 1);//1-reset state, 0-no change in state
 8000c94:	2101      	movs	r1, #1
 8000c96:	480a      	ldr	r0, [pc, #40]	; (8000cc0 <main+0x6c>)
 8000c98:	f006 faa8 	bl	80071ec <arm_pid_init_f32>

  HAL_TIM_Base_Start_IT(&htim3);//probkowanie
 8000c9c:	480a      	ldr	r0, [pc, #40]	; (8000cc8 <main+0x74>)
 8000c9e:	f003 fb71 	bl	8004384 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);//pwm
 8000ca2:	480a      	ldr	r0, [pc, #40]	; (8000ccc <main+0x78>)
 8000ca4:	f003 fb6e 	bl	8004384 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4808      	ldr	r0, [pc, #32]	; (8000ccc <main+0x78>)
 8000cac:	f003 fc44 	bl	8004538 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart3, Rx_Data ,4);
 8000cb0:	2204      	movs	r2, #4
 8000cb2:	4907      	ldr	r1, [pc, #28]	; (8000cd0 <main+0x7c>)
 8000cb4:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <main+0x80>)
 8000cb6:	f004 fd9a 	bl	80057ee <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <main+0x66>
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000364 	.word	0x20000364
 8000cc4:	40a00000 	.word	0x40a00000
 8000cc8:	2000038c 	.word	0x2000038c
 8000ccc:	200003d8 	.word	0x200003d8
 8000cd0:	20000354 	.word	0x20000354
 8000cd4:	20000424 	.word	0x20000424

08000cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b094      	sub	sp, #80	; 0x50
 8000cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cde:	f107 0320 	add.w	r3, r7, #32
 8000ce2:	2230      	movs	r2, #48	; 0x30
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f006 facc 	bl	8007284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000cfc:	f002 fa20 	bl	8003140 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d00:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <SystemClock_Config+0xc8>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	4a26      	ldr	r2, [pc, #152]	; (8000da0 <SystemClock_Config+0xc8>)
 8000d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0c:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <SystemClock_Config+0xc8>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d18:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <SystemClock_Config+0xcc>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d20:	4a20      	ldr	r2, [pc, #128]	; (8000da4 <SystemClock_Config+0xcc>)
 8000d22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <SystemClock_Config+0xcc>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d34:	2301      	movs	r3, #1
 8000d36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d38:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d48:	2304      	movs	r3, #4
 8000d4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000d4c:	2348      	movs	r3, #72	; 0x48
 8000d4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d50:	2302      	movs	r3, #2
 8000d52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000d54:	2303      	movs	r3, #3
 8000d56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d58:	f107 0320 	add.w	r3, r7, #32
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f002 f9ff 	bl	8003160 <HAL_RCC_OscConfig>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d68:	f000 f86c 	bl	8000e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d70:	2302      	movs	r3, #2
 8000d72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	2102      	movs	r1, #2
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f002 fc8d 	bl	80036a8 <HAL_RCC_ClockConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d94:	f000 f856 	bl	8000e44 <Error_Handler>
  }
}
 8000d98:	bf00      	nop
 8000d9a:	3750      	adds	r7, #80	; 0x50
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40007000 	.word	0x40007000

08000da8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af02      	add	r7, sp, #8
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
      if(GPIO_Pin==USER_Btn_Pin)
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000db8:	d12f      	bne.n	8000e1a <HAL_GPIO_EXTI_Callback+0x72>
      {
    	  int len =  sprintf(msg, "light =  %d lux, error = %d lux, reference = %d lux, duty = %d %%", (int)light, (int)error, (int)reference, (int)(duty)/10);
 8000dba:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000dbc:	edd3 7a00 	vldr	s15, [r3]
 8000dc0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000dc4:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <HAL_GPIO_EXTI_Callback+0x80>)
 8000dc6:	edd3 7a00 	vldr	s15, [r3]
 8000dca:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_GPIO_EXTI_Callback+0x84>)
 8000dd0:	edd3 7a00 	vldr	s15, [r3]
 8000dd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dd8:	ee17 0a90 	vmov	r0, s15
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <HAL_GPIO_EXTI_Callback+0x88>)
 8000dde:	edd3 7a00 	vldr	s15, [r3]
 8000de2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000de6:	ee17 1a90 	vmov	r1, s15
 8000dea:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000dec:	fb83 2301 	smull	r2, r3, r3, r1
 8000df0:	109a      	asrs	r2, r3, #2
 8000df2:	17cb      	asrs	r3, r1, #31
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	9301      	str	r3, [sp, #4]
 8000df8:	9000      	str	r0, [sp, #0]
 8000dfa:	ee16 3a90 	vmov	r3, s13
 8000dfe:	ee17 2a10 	vmov	r2, s14
 8000e02:	490d      	ldr	r1, [pc, #52]	; (8000e38 <HAL_GPIO_EXTI_Callback+0x90>)
 8000e04:	480d      	ldr	r0, [pc, #52]	; (8000e3c <HAL_GPIO_EXTI_Callback+0x94>)
 8000e06:	f006 fa45 	bl	8007294 <siprintf>
 8000e0a:	60f8      	str	r0, [r7, #12]
          HAL_UART_Transmit(&huart3,msg,len,10);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	230a      	movs	r3, #10
 8000e12:	490a      	ldr	r1, [pc, #40]	; (8000e3c <HAL_GPIO_EXTI_Callback+0x94>)
 8000e14:	480a      	ldr	r0, [pc, #40]	; (8000e40 <HAL_GPIO_EXTI_Callback+0x98>)
 8000e16:	f004 fc67 	bl	80056e8 <HAL_UART_Transmit>
      }

}
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000358 	.word	0x20000358
 8000e28:	2000035c 	.word	0x2000035c
 8000e2c:	2000000c 	.word	0x2000000c
 8000e30:	20000360 	.word	0x20000360
 8000e34:	66666667 	.word	0x66666667
 8000e38:	08007ca0 	.word	0x08007ca0
 8000e3c:	20000320 	.word	0x20000320
 8000e40:	20000424 	.word	0x20000424

08000e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e48:	b672      	cpsid	i
}
 8000e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <Error_Handler+0x8>
	...

08000e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <HAL_MspInit+0x44>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <HAL_MspInit+0x44>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <HAL_MspInit+0x44>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <HAL_MspInit+0x44>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <HAL_MspInit+0x44>)
 8000e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e78:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_MspInit+0x44>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <NMI_Handler+0x4>

08000e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <HardFault_Handler+0x4>

08000ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <MemManage_Handler+0x4>

08000eaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <BusFault_Handler+0x4>

08000eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <UsageFault_Handler+0x4>

08000eb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee4:	f000 fb60 	bl	80015a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <TIM3_IRQHandler+0x10>)
 8000ef2:	f003 fc1b 	bl	800472c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000038c 	.word	0x2000038c

08000f00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <TIM4_IRQHandler+0x10>)
 8000f06:	f003 fc11 	bl	800472c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200003d8 	.word	0x200003d8

08000f14 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <I2C1_EV_IRQHandler+0x10>)
 8000f1a:	f001 fcab 	bl	8002874 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200002cc 	.word	0x200002cc

08000f28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <USART3_IRQHandler+0x10>)
 8000f2e:	f004 fca3 	bl	8005878 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000424 	.word	0x20000424

08000f3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000f40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f44:	f001 fa04 	bl	8002350 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f54:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <_sbrk+0x5c>)
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <_sbrk+0x60>)
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f60:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <_sbrk+0x64>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d102      	bne.n	8000f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <_sbrk+0x64>)
 8000f6a:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <_sbrk+0x68>)
 8000f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <_sbrk+0x64>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d207      	bcs.n	8000f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f7c:	f006 f958 	bl	8007230 <__errno>
 8000f80:	4603      	mov	r3, r0
 8000f82:	220c      	movs	r2, #12
 8000f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8a:	e009      	b.n	8000fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <_sbrk+0x64>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f92:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <_sbrk+0x64>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <_sbrk+0x64>)
 8000f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20050000 	.word	0x20050000
 8000fac:	00000400 	.word	0x00000400
 8000fb0:	20000388 	.word	0x20000388
 8000fb4:	200009c8 	.word	0x200009c8

08000fb8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <SystemInit+0x20>)
 8000fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fc2:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <SystemInit+0x20>)
 8000fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe2:	f107 0310 	add.w	r3, r7, #16
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <MX_TIM3_Init+0x94>)
 8000ffc:	4a1d      	ldr	r2, [pc, #116]	; (8001074 <MX_TIM3_Init+0x98>)
 8000ffe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001000:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <MX_TIM3_Init+0x94>)
 8001002:	2247      	movs	r2, #71	; 0x47
 8001004:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_TIM3_Init+0x94>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 24999;
 800100c:	4b18      	ldr	r3, [pc, #96]	; (8001070 <MX_TIM3_Init+0x94>)
 800100e:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8001012:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <MX_TIM3_Init+0x94>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <MX_TIM3_Init+0x94>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001020:	4813      	ldr	r0, [pc, #76]	; (8001070 <MX_TIM3_Init+0x94>)
 8001022:	f003 f957 	bl	80042d4 <HAL_TIM_Base_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800102c:	f7ff ff0a 	bl	8000e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001034:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	4619      	mov	r1, r3
 800103c:	480c      	ldr	r0, [pc, #48]	; (8001070 <MX_TIM3_Init+0x94>)
 800103e:	f003 fda9 	bl	8004b94 <HAL_TIM_ConfigClockSource>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001048:	f7ff fefc 	bl	8000e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	4619      	mov	r1, r3
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_TIM3_Init+0x94>)
 800105a:	f004 fa4b 	bl	80054f4 <HAL_TIMEx_MasterConfigSynchronization>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001064:	f7ff feee 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	3720      	adds	r7, #32
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	2000038c 	.word	0x2000038c
 8001074:	40000400 	.word	0x40000400

08001078 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08e      	sub	sp, #56	; 0x38
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800107e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001098:	463b      	mov	r3, r7
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]
 80010a6:	615a      	str	r2, [r3, #20]
 80010a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010aa:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <MX_TIM4_Init+0xe8>)
 80010ac:	4a2d      	ldr	r2, [pc, #180]	; (8001164 <MX_TIM4_Init+0xec>)
 80010ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80010b0:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <MX_TIM4_Init+0xe8>)
 80010b2:	2247      	movs	r2, #71	; 0x47
 80010b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b6:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <MX_TIM4_Init+0xe8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80010bc:	4b28      	ldr	r3, [pc, #160]	; (8001160 <MX_TIM4_Init+0xe8>)
 80010be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c4:	4b26      	ldr	r3, [pc, #152]	; (8001160 <MX_TIM4_Init+0xe8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <MX_TIM4_Init+0xe8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010d0:	4823      	ldr	r0, [pc, #140]	; (8001160 <MX_TIM4_Init+0xe8>)
 80010d2:	f003 f8ff 	bl	80042d4 <HAL_TIM_Base_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80010dc:	f7ff feb2 	bl	8000e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ea:	4619      	mov	r1, r3
 80010ec:	481c      	ldr	r0, [pc, #112]	; (8001160 <MX_TIM4_Init+0xe8>)
 80010ee:	f003 fd51 	bl	8004b94 <HAL_TIM_ConfigClockSource>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80010f8:	f7ff fea4 	bl	8000e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010fc:	4818      	ldr	r0, [pc, #96]	; (8001160 <MX_TIM4_Init+0xe8>)
 80010fe:	f003 f9b9 	bl	8004474 <HAL_TIM_PWM_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001108:	f7ff fe9c 	bl	8000e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	4811      	ldr	r0, [pc, #68]	; (8001160 <MX_TIM4_Init+0xe8>)
 800111c:	f004 f9ea 	bl	80054f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001126:	f7ff fe8d 	bl	8000e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112a:	2360      	movs	r3, #96	; 0x60
 800112c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 999;
 800112e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001132:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001134:	2300      	movs	r3, #0
 8001136:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113c:	463b      	mov	r3, r7
 800113e:	2200      	movs	r2, #0
 8001140:	4619      	mov	r1, r3
 8001142:	4807      	ldr	r0, [pc, #28]	; (8001160 <MX_TIM4_Init+0xe8>)
 8001144:	f003 fc12 	bl	800496c <HAL_TIM_PWM_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800114e:	f7ff fe79 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001152:	4803      	ldr	r0, [pc, #12]	; (8001160 <MX_TIM4_Init+0xe8>)
 8001154:	f000 f84a 	bl	80011ec <HAL_TIM_MspPostInit>

}
 8001158:	bf00      	nop
 800115a:	3738      	adds	r7, #56	; 0x38
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200003d8 	.word	0x200003d8
 8001164:	40000800 	.word	0x40000800

08001168 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a1a      	ldr	r2, [pc, #104]	; (80011e0 <HAL_TIM_Base_MspInit+0x78>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d114      	bne.n	80011a4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <HAL_TIM_Base_MspInit+0x7c>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	4a19      	ldr	r2, [pc, #100]	; (80011e4 <HAL_TIM_Base_MspInit+0x7c>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	6413      	str	r3, [r2, #64]	; 0x40
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <HAL_TIM_Base_MspInit+0x7c>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	201d      	movs	r0, #29
 8001198:	f000 fb25 	bl	80017e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800119c:	201d      	movs	r0, #29
 800119e:	f000 fb3e 	bl	800181e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80011a2:	e018      	b.n	80011d6 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <HAL_TIM_Base_MspInit+0x80>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d113      	bne.n	80011d6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <HAL_TIM_Base_MspInit+0x7c>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	4a0c      	ldr	r2, [pc, #48]	; (80011e4 <HAL_TIM_Base_MspInit+0x7c>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_TIM_Base_MspInit+0x7c>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	201e      	movs	r0, #30
 80011cc:	f000 fb0b 	bl	80017e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011d0:	201e      	movs	r0, #30
 80011d2:	f000 fb24 	bl	800181e <HAL_NVIC_EnableIRQ>
}
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40000400 	.word	0x40000400
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40000800 	.word	0x40000800

080011ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a11      	ldr	r2, [pc, #68]	; (8001250 <HAL_TIM_MspPostInit+0x64>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d11c      	bne.n	8001248 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <HAL_TIM_MspPostInit+0x68>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a10      	ldr	r2, [pc, #64]	; (8001254 <HAL_TIM_MspPostInit+0x68>)
 8001214:	f043 0308 	orr.w	r3, r3, #8
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <HAL_TIM_MspPostInit+0x68>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001238:	2302      	movs	r3, #2
 800123a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	4619      	mov	r1, r3
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <HAL_TIM_MspPostInit+0x6c>)
 8001244:	f000 febe 	bl	8001fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001248:	bf00      	nop
 800124a:	3720      	adds	r7, #32
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40000800 	.word	0x40000800
 8001254:	40023800 	.word	0x40023800
 8001258:	40020c00 	.word	0x40020c00

0800125c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_USART3_UART_Init+0x58>)
 8001262:	4a15      	ldr	r2, [pc, #84]	; (80012b8 <MX_USART3_UART_Init+0x5c>)
 8001264:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <MX_USART3_UART_Init+0x58>)
 8001268:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800126c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_USART3_UART_Init+0x58>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_USART3_UART_Init+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_USART3_UART_Init+0x58>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_USART3_UART_Init+0x58>)
 8001282:	220c      	movs	r2, #12
 8001284:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_USART3_UART_Init+0x58>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_USART3_UART_Init+0x58>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <MX_USART3_UART_Init+0x58>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_USART3_UART_Init+0x58>)
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_USART3_UART_Init+0x58>)
 80012a0:	f004 f9d4 	bl	800564c <HAL_UART_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80012aa:	f7ff fdcb 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000424 	.word	0x20000424
 80012b8:	40004800 	.word	0x40004800

080012bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b0aa      	sub	sp, #168	; 0xa8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	2284      	movs	r2, #132	; 0x84
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f005 ffd1 	bl	8007284 <memset>
  if(uartHandle->Instance==USART3)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a26      	ldr	r2, [pc, #152]	; (8001380 <HAL_UART_MspInit+0xc4>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d144      	bne.n	8001376 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	4618      	mov	r0, r3
 80012fc:	f002 fbfa 	bl	8003af4 <HAL_RCCEx_PeriphCLKConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001306:	f7ff fd9d 	bl	8000e44 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <HAL_UART_MspInit+0xc8>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	4a1d      	ldr	r2, [pc, #116]	; (8001384 <HAL_UART_MspInit+0xc8>)
 8001310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001314:	6413      	str	r3, [r2, #64]	; 0x40
 8001316:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <HAL_UART_MspInit+0xc8>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <HAL_UART_MspInit+0xc8>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a17      	ldr	r2, [pc, #92]	; (8001384 <HAL_UART_MspInit+0xc8>)
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <HAL_UART_MspInit+0xc8>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800133a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800133e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134e:	2303      	movs	r3, #3
 8001350:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001354:	2307      	movs	r3, #7
 8001356:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800135a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800135e:	4619      	mov	r1, r3
 8001360:	4809      	ldr	r0, [pc, #36]	; (8001388 <HAL_UART_MspInit+0xcc>)
 8001362:	f000 fe2f 	bl	8001fc4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	2027      	movs	r0, #39	; 0x27
 800136c:	f000 fa3b 	bl	80017e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001370:	2027      	movs	r0, #39	; 0x27
 8001372:	f000 fa54 	bl	800181e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001376:	bf00      	nop
 8001378:	37a8      	adds	r7, #168	; 0xa8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40004800 	.word	0x40004800
 8001384:	40023800 	.word	0x40023800
 8001388:	40020c00 	.word	0x40020c00

0800138c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001392:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001396:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800139a:	2206      	movs	r2, #6
 800139c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013a0:	2202      	movs	r2, #2
 80013a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ac:	2202      	movs	r2, #2
 80013ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013be:	2200      	movs	r2, #0
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013d0:	f001 fd6d 	bl	8002eae <HAL_PCD_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80013da:	f7ff fd33 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200004ac 	.word	0x200004ac

080013e8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0ac      	sub	sp, #176	; 0xb0
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001400:	f107 0318 	add.w	r3, r7, #24
 8001404:	2284      	movs	r2, #132	; 0x84
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f005 ff3b 	bl	8007284 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001416:	d159      	bne.n	80014cc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001418:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800141c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800141e:	2300      	movs	r3, #0
 8001420:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001424:	f107 0318 	add.w	r3, r7, #24
 8001428:	4618      	mov	r0, r3
 800142a:	f002 fb63 	bl	8003af4 <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001434:	f7ff fd06 	bl	8000e44 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 800143a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143c:	4a25      	ldr	r2, [pc, #148]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6313      	str	r3, [r2, #48]	; 0x30
 8001444:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001450:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001454:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800146a:	230a      	movs	r3, #10
 800146c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001470:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001474:	4619      	mov	r1, r3
 8001476:	4818      	ldr	r0, [pc, #96]	; (80014d8 <HAL_PCD_MspInit+0xf0>)
 8001478:	f000 fda4 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800147c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001480:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001494:	4619      	mov	r1, r3
 8001496:	4810      	ldr	r0, [pc, #64]	; (80014d8 <HAL_PCD_MspInit+0xf0>)
 8001498:	f000 fd94 	bl	8001fc4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 800149e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a0:	4a0c      	ldr	r2, [pc, #48]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 80014a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a6:	6353      	str	r3, [r2, #52]	; 0x34
 80014a8:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 80014aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 80014b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 80014ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014be:	6453      	str	r3, [r2, #68]	; 0x44
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <HAL_PCD_MspInit+0xec>)
 80014c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80014cc:	bf00      	nop
 80014ce:	37b0      	adds	r7, #176	; 0xb0
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020000 	.word	0x40020000

080014dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001514 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e0:	480d      	ldr	r0, [pc, #52]	; (8001518 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014e2:	490e      	ldr	r1, [pc, #56]	; (800151c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014e4:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e8:	e002      	b.n	80014f0 <LoopCopyDataInit>

080014ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ee:	3304      	adds	r3, #4

080014f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f4:	d3f9      	bcc.n	80014ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014f8:	4c0b      	ldr	r4, [pc, #44]	; (8001528 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014fc:	e001      	b.n	8001502 <LoopFillZerobss>

080014fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001500:	3204      	adds	r2, #4

08001502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001504:	d3fb      	bcc.n	80014fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001506:	f7ff fd57 	bl	8000fb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800150a:	f005 fe97 	bl	800723c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800150e:	f7ff fba1 	bl	8000c54 <main>
  bx  lr    
 8001512:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001514:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800151c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001520:	08007e40 	.word	0x08007e40
  ldr r2, =_sbss
 8001524:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8001528:	200009c8 	.word	0x200009c8

0800152c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800152c:	e7fe      	b.n	800152c <ADC_IRQHandler>

0800152e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001532:	2003      	movs	r0, #3
 8001534:	f000 f94c 	bl	80017d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001538:	2000      	movs	r0, #0
 800153a:	f000 f805 	bl	8001548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800153e:	f7ff fc87 	bl	8000e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_InitTick+0x54>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_InitTick+0x58>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001562:	fbb2 f3f3 	udiv	r3, r2, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f967 	bl	800183a <HAL_SYSTICK_Config>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e00e      	b.n	8001594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b0f      	cmp	r3, #15
 800157a:	d80a      	bhi.n	8001592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800157c:	2200      	movs	r2, #0
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f000 f92f 	bl	80017e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001588:	4a06      	ldr	r2, [pc, #24]	; (80015a4 <HAL_InitTick+0x5c>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	e000      	b.n	8001594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000010 	.word	0x20000010
 80015a0:	20000018 	.word	0x20000018
 80015a4:	20000014 	.word	0x20000014

080015a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_IncTick+0x20>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x24>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	4a04      	ldr	r2, [pc, #16]	; (80015cc <HAL_IncTick+0x24>)
 80015ba:	6013      	str	r3, [r2, #0]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000018 	.word	0x20000018
 80015cc:	200009b4 	.word	0x200009b4

080015d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <HAL_GetTick+0x14>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	200009b4 	.word	0x200009b4

080015e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f0:	f7ff ffee 	bl	80015d0 <HAL_GetTick>
 80015f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001600:	d005      	beq.n	800160e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <HAL_Delay+0x44>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800160e:	bf00      	nop
 8001610:	f7ff ffde 	bl	80015d0 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	429a      	cmp	r2, r3
 800161e:	d8f7      	bhi.n	8001610 <HAL_Delay+0x28>
  {
  }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000018 	.word	0x20000018

08001630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <__NVIC_SetPriorityGrouping+0x40>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800164c:	4013      	ands	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 800165a:	4313      	orrs	r3, r2
 800165c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165e:	4a04      	ldr	r2, [pc, #16]	; (8001670 <__NVIC_SetPriorityGrouping+0x40>)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	60d3      	str	r3, [r2, #12]
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00
 8001674:	05fa0000 	.word	0x05fa0000

08001678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <__NVIC_GetPriorityGrouping+0x18>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	f003 0307 	and.w	r3, r3, #7
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	db0b      	blt.n	80016be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	f003 021f 	and.w	r2, r3, #31
 80016ac:	4907      	ldr	r1, [pc, #28]	; (80016cc <__NVIC_EnableIRQ+0x38>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	2001      	movs	r0, #1
 80016b6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000e100 	.word	0xe000e100

080016d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	db0a      	blt.n	80016fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	490c      	ldr	r1, [pc, #48]	; (800171c <__NVIC_SetPriority+0x4c>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	0112      	lsls	r2, r2, #4
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	440b      	add	r3, r1
 80016f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f8:	e00a      	b.n	8001710 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4908      	ldr	r1, [pc, #32]	; (8001720 <__NVIC_SetPriority+0x50>)
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	3b04      	subs	r3, #4
 8001708:	0112      	lsls	r2, r2, #4
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	440b      	add	r3, r1
 800170e:	761a      	strb	r2, [r3, #24]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000e100 	.word	0xe000e100
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f1c3 0307 	rsb	r3, r3, #7
 800173e:	2b04      	cmp	r3, #4
 8001740:	bf28      	it	cs
 8001742:	2304      	movcs	r3, #4
 8001744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3304      	adds	r3, #4
 800174a:	2b06      	cmp	r3, #6
 800174c:	d902      	bls.n	8001754 <NVIC_EncodePriority+0x30>
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3b03      	subs	r3, #3
 8001752:	e000      	b.n	8001756 <NVIC_EncodePriority+0x32>
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	f04f 32ff 	mov.w	r2, #4294967295
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43da      	mvns	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	401a      	ands	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800176c:	f04f 31ff 	mov.w	r1, #4294967295
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	43d9      	mvns	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	4313      	orrs	r3, r2
         );
}
 800177e:	4618      	mov	r0, r3
 8001780:	3724      	adds	r7, #36	; 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800179c:	d301      	bcc.n	80017a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179e:	2301      	movs	r3, #1
 80017a0:	e00f      	b.n	80017c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <SysTick_Config+0x40>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017aa:	210f      	movs	r1, #15
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295
 80017b0:	f7ff ff8e 	bl	80016d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <SysTick_Config+0x40>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ba:	4b04      	ldr	r3, [pc, #16]	; (80017cc <SysTick_Config+0x40>)
 80017bc:	2207      	movs	r2, #7
 80017be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	e000e010 	.word	0xe000e010

080017d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ff29 	bl	8001630 <__NVIC_SetPriorityGrouping>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017f8:	f7ff ff3e 	bl	8001678 <__NVIC_GetPriorityGrouping>
 80017fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	68b9      	ldr	r1, [r7, #8]
 8001802:	6978      	ldr	r0, [r7, #20]
 8001804:	f7ff ff8e 	bl	8001724 <NVIC_EncodePriority>
 8001808:	4602      	mov	r2, r0
 800180a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff5d 	bl	80016d0 <__NVIC_SetPriority>
}
 8001816:	bf00      	nop
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff31 	bl	8001694 <__NVIC_EnableIRQ>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ffa2 	bl	800178c <SysTick_Config>
 8001848:	4603      	mov	r3, r0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b084      	sub	sp, #16
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001860:	f7ff feb6 	bl	80015d0 <HAL_GetTick>
 8001864:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d008      	beq.n	8001884 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2280      	movs	r2, #128	; 0x80
 8001876:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e052      	b.n	800192a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0216 	bic.w	r2, r2, #22
 8001892:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	695a      	ldr	r2, [r3, #20]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d103      	bne.n	80018b4 <HAL_DMA_Abort+0x62>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d007      	beq.n	80018c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0208 	bic.w	r2, r2, #8
 80018c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0201 	bic.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d4:	e013      	b.n	80018fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018d6:	f7ff fe7b 	bl	80015d0 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d90c      	bls.n	80018fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2220      	movs	r2, #32
 80018e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2203      	movs	r2, #3
 80018ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e015      	b.n	800192a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1e4      	bne.n	80018d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001910:	223f      	movs	r2, #63	; 0x3f
 8001912:	409a      	lsls	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d004      	beq.n	8001950 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2280      	movs	r2, #128	; 0x80
 800194a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e00c      	b.n	800196a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2205      	movs	r2, #5
 8001954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0201 	bic.w	r2, r2, #1
 8001966:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e06a      	b.n	8001a60 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001990:	2b00      	cmp	r3, #0
 8001992:	d106      	bne.n	80019a2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2223      	movs	r2, #35	; 0x23
 8001998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7fe fea3 	bl	80006e8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a2:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <HAL_ETH_Init+0xf0>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	4a30      	ldr	r2, [pc, #192]	; (8001a68 <HAL_ETH_Init+0xf0>)
 80019a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ac:	6453      	str	r3, [r2, #68]	; 0x44
 80019ae:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <HAL_ETH_Init+0xf0>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80019ba:	4b2c      	ldr	r3, [pc, #176]	; (8001a6c <HAL_ETH_Init+0xf4>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4a2b      	ldr	r2, [pc, #172]	; (8001a6c <HAL_ETH_Init+0xf4>)
 80019c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019c4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80019c6:	4b29      	ldr	r3, [pc, #164]	; (8001a6c <HAL_ETH_Init+0xf4>)
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	4927      	ldr	r1, [pc, #156]	; (8001a6c <HAL_ETH_Init+0xf4>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80019d4:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <HAL_ETH_Init+0xf4>)
 80019d6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019f0:	f7ff fdee 	bl	80015d0 <HAL_GetTick>
 80019f4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80019f6:	e011      	b.n	8001a1c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80019f8:	f7ff fdea 	bl	80015d0 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a06:	d909      	bls.n	8001a1c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2204      	movs	r2, #4
 8001a0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	22e0      	movs	r2, #224	; 0xe0
 8001a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e021      	b.n	8001a60 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1e4      	bne.n	80019f8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f958 	bl	8001ce4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f9ff 	bl	8001e38 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 fa55 	bl	8001eea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	461a      	mov	r2, r3
 8001a46:	2100      	movs	r1, #0
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f9bd 	bl	8001dc8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2210      	movs	r2, #16
 8001a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40013800 	.word	0x40013800

08001a70 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4b51      	ldr	r3, [pc, #324]	; (8001bcc <ETH_SetMACConfig+0x15c>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	7c1b      	ldrb	r3, [r3, #16]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d102      	bne.n	8001a98 <ETH_SetMACConfig+0x28>
 8001a92:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a96:	e000      	b.n	8001a9a <ETH_SetMACConfig+0x2a>
 8001a98:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	7c5b      	ldrb	r3, [r3, #17]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d102      	bne.n	8001aa8 <ETH_SetMACConfig+0x38>
 8001aa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001aa6:	e000      	b.n	8001aaa <ETH_SetMACConfig+0x3a>
 8001aa8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001aaa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ab0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	7fdb      	ldrb	r3, [r3, #31]
 8001ab6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ab8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001abe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	7f92      	ldrb	r2, [r2, #30]
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d102      	bne.n	8001ace <ETH_SetMACConfig+0x5e>
 8001ac8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001acc:	e000      	b.n	8001ad0 <ETH_SetMACConfig+0x60>
 8001ace:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ad0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	7f1b      	ldrb	r3, [r3, #28]
 8001ad6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ad8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ade:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	791b      	ldrb	r3, [r3, #4]
 8001ae4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ae6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001aee:	2a00      	cmp	r2, #0
 8001af0:	d102      	bne.n	8001af8 <ETH_SetMACConfig+0x88>
 8001af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af6:	e000      	b.n	8001afa <ETH_SetMACConfig+0x8a>
 8001af8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001afa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	7bdb      	ldrb	r3, [r3, #15]
 8001b00:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001b02:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001b08:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b10:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b12:	4313      	orrs	r3, r2
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f7ff fd5c 	bl	80015e8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b46:	4013      	ands	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001b56:	2a00      	cmp	r2, #0
 8001b58:	d101      	bne.n	8001b5e <ETH_SetMACConfig+0xee>
 8001b5a:	2280      	movs	r2, #128	; 0x80
 8001b5c:	e000      	b.n	8001b60 <ETH_SetMACConfig+0xf0>
 8001b5e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b60:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001b66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001b6e:	2a01      	cmp	r2, #1
 8001b70:	d101      	bne.n	8001b76 <ETH_SetMACConfig+0x106>
 8001b72:	2208      	movs	r2, #8
 8001b74:	e000      	b.n	8001b78 <ETH_SetMACConfig+0x108>
 8001b76:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001b78:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001b80:	2a01      	cmp	r2, #1
 8001b82:	d101      	bne.n	8001b88 <ETH_SetMACConfig+0x118>
 8001b84:	2204      	movs	r2, #4
 8001b86:	e000      	b.n	8001b8a <ETH_SetMACConfig+0x11a>
 8001b88:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001b8a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001b92:	2a01      	cmp	r2, #1
 8001b94:	d101      	bne.n	8001b9a <ETH_SetMACConfig+0x12a>
 8001b96:	2202      	movs	r2, #2
 8001b98:	e000      	b.n	8001b9c <ETH_SetMACConfig+0x12c>
 8001b9a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f7ff fd17 	bl	80015e8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	619a      	str	r2, [r3, #24]
}
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	ff20810f 	.word	0xff20810f

08001bd0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	4b3d      	ldr	r3, [pc, #244]	; (8001ce0 <ETH_SetDMAConfig+0x110>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	7b1b      	ldrb	r3, [r3, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d102      	bne.n	8001bfc <ETH_SetDMAConfig+0x2c>
 8001bf6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bfa:	e000      	b.n	8001bfe <ETH_SetDMAConfig+0x2e>
 8001bfc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	7b5b      	ldrb	r3, [r3, #13]
 8001c02:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c04:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	7f52      	ldrb	r2, [r2, #29]
 8001c0a:	2a00      	cmp	r2, #0
 8001c0c:	d102      	bne.n	8001c14 <ETH_SetDMAConfig+0x44>
 8001c0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c12:	e000      	b.n	8001c16 <ETH_SetDMAConfig+0x46>
 8001c14:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001c16:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	7b9b      	ldrb	r3, [r3, #14]
 8001c1c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c1e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c24:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	7f1b      	ldrb	r3, [r3, #28]
 8001c2a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001c2c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	7f9b      	ldrb	r3, [r3, #30]
 8001c32:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c34:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c3a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c42:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c44:	4313      	orrs	r3, r2
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c54:	461a      	mov	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c66:	2001      	movs	r0, #1
 8001c68:	f7ff fcbe 	bl	80015e8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c74:	461a      	mov	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	791b      	ldrb	r3, [r3, #4]
 8001c7e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c84:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001c8a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c90:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c98:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001c9a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ca2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ca8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cb6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f7ff fc8f 	bl	80015e8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	f8de3f23 	.word	0xf8de3f23

08001ce4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b0a6      	sub	sp, #152	; 0x98
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001cec:	2301      	movs	r3, #1
 8001cee:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d02:	2301      	movs	r3, #1
 8001d04:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d20:	2300      	movs	r3, #0
 8001d22:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d4a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d50:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff fe86 	bl	8001a70 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001d64:	2301      	movs	r3, #1
 8001d66:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001d72:	2301      	movs	r3, #1
 8001d74:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d86:	2300      	movs	r3, #0
 8001d88:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d90:	2301      	movs	r3, #1
 8001d92:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d98:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d9e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001da0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001da4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001da6:	2301      	movs	r3, #1
 8001da8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001db4:	f107 0308 	add.w	r3, r7, #8
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff ff08 	bl	8001bd0 <ETH_SetDMAConfig>
}
 8001dc0:	bf00      	nop
 8001dc2:	3798      	adds	r7, #152	; 0x98
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3305      	adds	r3, #5
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	3204      	adds	r2, #4
 8001de0:	7812      	ldrb	r2, [r2, #0]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <ETH_MACAddressConfig+0x68>)
 8001dea:	4413      	add	r3, r2
 8001dec:	461a      	mov	r2, r3
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3303      	adds	r3, #3
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	061a      	lsls	r2, r3, #24
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	041b      	lsls	r3, r3, #16
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3301      	adds	r3, #1
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	7812      	ldrb	r2, [r2, #0]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <ETH_MACAddressConfig+0x6c>)
 8001e1a:	4413      	add	r3, r2
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	6013      	str	r3, [r2, #0]
}
 8001e22:	bf00      	nop
 8001e24:	371c      	adds	r7, #28
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40028040 	.word	0x40028040
 8001e34:	40028044 	.word	0x40028044

08001e38 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	e03e      	b.n	8001ec4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68d9      	ldr	r1, [r3, #12]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	440b      	add	r3, r1
 8001e56:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2200      	movs	r2, #0
 8001e62:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	3206      	adds	r2, #6
 8001e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d80c      	bhi.n	8001ea8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68d9      	ldr	r1, [r3, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	440b      	add	r3, r1
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	e004      	b.n	8001eb2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	461a      	mov	r2, r3
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d9bd      	bls.n	8001e46 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001edc:	611a      	str	r2, [r3, #16]
}
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b085      	sub	sp, #20
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	e046      	b.n	8001f86 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6919      	ldr	r1, [r3, #16]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	440b      	add	r3, r1
 8001f08:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2200      	movs	r2, #0
 8001f14:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2200      	movs	r2, #0
 8001f26:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f34:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001f3c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f4a:	68b9      	ldr	r1, [r7, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	3212      	adds	r2, #18
 8001f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d80c      	bhi.n	8001f76 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6919      	ldr	r1, [r3, #16]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	440b      	add	r3, r1
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	60da      	str	r2, [r3, #12]
 8001f74:	e004      	b.n	8001f80 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	3301      	adds	r3, #1
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d9b5      	bls.n	8001ef8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691a      	ldr	r2, [r3, #16]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb6:	60da      	str	r2, [r3, #12]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	; 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
 8001fe2:	e175      	b.n	80022d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	f040 8164 	bne.w	80022ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	2b01      	cmp	r3, #1
 800200c:	d005      	beq.n	800201a <HAL_GPIO_Init+0x56>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d130      	bne.n	800207c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	2203      	movs	r2, #3
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002050:	2201      	movs	r2, #1
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	091b      	lsrs	r3, r3, #4
 8002066:	f003 0201 	and.w	r2, r3, #1
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	2b03      	cmp	r3, #3
 8002086:	d017      	beq.n	80020b8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	2203      	movs	r2, #3
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d123      	bne.n	800210c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	08da      	lsrs	r2, r3, #3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3208      	adds	r2, #8
 80020cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	220f      	movs	r2, #15
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	691a      	ldr	r2, [r3, #16]
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	08da      	lsrs	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3208      	adds	r2, #8
 8002106:	69b9      	ldr	r1, [r7, #24]
 8002108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	2203      	movs	r2, #3
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0203 	and.w	r2, r3, #3
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80be 	beq.w	80022ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214e:	4b66      	ldr	r3, [pc, #408]	; (80022e8 <HAL_GPIO_Init+0x324>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	4a65      	ldr	r2, [pc, #404]	; (80022e8 <HAL_GPIO_Init+0x324>)
 8002154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002158:	6453      	str	r3, [r2, #68]	; 0x44
 800215a:	4b63      	ldr	r3, [pc, #396]	; (80022e8 <HAL_GPIO_Init+0x324>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002166:	4a61      	ldr	r2, [pc, #388]	; (80022ec <HAL_GPIO_Init+0x328>)
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	3302      	adds	r3, #2
 800216e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	220f      	movs	r2, #15
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a58      	ldr	r2, [pc, #352]	; (80022f0 <HAL_GPIO_Init+0x32c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d037      	beq.n	8002202 <HAL_GPIO_Init+0x23e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a57      	ldr	r2, [pc, #348]	; (80022f4 <HAL_GPIO_Init+0x330>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d031      	beq.n	80021fe <HAL_GPIO_Init+0x23a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a56      	ldr	r2, [pc, #344]	; (80022f8 <HAL_GPIO_Init+0x334>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d02b      	beq.n	80021fa <HAL_GPIO_Init+0x236>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a55      	ldr	r2, [pc, #340]	; (80022fc <HAL_GPIO_Init+0x338>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d025      	beq.n	80021f6 <HAL_GPIO_Init+0x232>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a54      	ldr	r2, [pc, #336]	; (8002300 <HAL_GPIO_Init+0x33c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d01f      	beq.n	80021f2 <HAL_GPIO_Init+0x22e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a53      	ldr	r2, [pc, #332]	; (8002304 <HAL_GPIO_Init+0x340>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d019      	beq.n	80021ee <HAL_GPIO_Init+0x22a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a52      	ldr	r2, [pc, #328]	; (8002308 <HAL_GPIO_Init+0x344>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d013      	beq.n	80021ea <HAL_GPIO_Init+0x226>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a51      	ldr	r2, [pc, #324]	; (800230c <HAL_GPIO_Init+0x348>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00d      	beq.n	80021e6 <HAL_GPIO_Init+0x222>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a50      	ldr	r2, [pc, #320]	; (8002310 <HAL_GPIO_Init+0x34c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d007      	beq.n	80021e2 <HAL_GPIO_Init+0x21e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4f      	ldr	r2, [pc, #316]	; (8002314 <HAL_GPIO_Init+0x350>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d101      	bne.n	80021de <HAL_GPIO_Init+0x21a>
 80021da:	2309      	movs	r3, #9
 80021dc:	e012      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021de:	230a      	movs	r3, #10
 80021e0:	e010      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021e2:	2308      	movs	r3, #8
 80021e4:	e00e      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021e6:	2307      	movs	r3, #7
 80021e8:	e00c      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021ea:	2306      	movs	r3, #6
 80021ec:	e00a      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021ee:	2305      	movs	r3, #5
 80021f0:	e008      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021f2:	2304      	movs	r3, #4
 80021f4:	e006      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021f6:	2303      	movs	r3, #3
 80021f8:	e004      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e002      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <HAL_GPIO_Init+0x240>
 8002202:	2300      	movs	r3, #0
 8002204:	69fa      	ldr	r2, [r7, #28]
 8002206:	f002 0203 	and.w	r2, r2, #3
 800220a:	0092      	lsls	r2, r2, #2
 800220c:	4093      	lsls	r3, r2
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002214:	4935      	ldr	r1, [pc, #212]	; (80022ec <HAL_GPIO_Init+0x328>)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	089b      	lsrs	r3, r3, #2
 800221a:	3302      	adds	r3, #2
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002222:	4b3d      	ldr	r3, [pc, #244]	; (8002318 <HAL_GPIO_Init+0x354>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002246:	4a34      	ldr	r2, [pc, #208]	; (8002318 <HAL_GPIO_Init+0x354>)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800224c:	4b32      	ldr	r3, [pc, #200]	; (8002318 <HAL_GPIO_Init+0x354>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002270:	4a29      	ldr	r2, [pc, #164]	; (8002318 <HAL_GPIO_Init+0x354>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002276:	4b28      	ldr	r3, [pc, #160]	; (8002318 <HAL_GPIO_Init+0x354>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800229a:	4a1f      	ldr	r2, [pc, #124]	; (8002318 <HAL_GPIO_Init+0x354>)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022a0:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_GPIO_Init+0x354>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022c4:	4a14      	ldr	r2, [pc, #80]	; (8002318 <HAL_GPIO_Init+0x354>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3301      	adds	r3, #1
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	2b0f      	cmp	r3, #15
 80022d4:	f67f ae86 	bls.w	8001fe4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	3724      	adds	r7, #36	; 0x24
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40013800 	.word	0x40013800
 80022f0:	40020000 	.word	0x40020000
 80022f4:	40020400 	.word	0x40020400
 80022f8:	40020800 	.word	0x40020800
 80022fc:	40020c00 	.word	0x40020c00
 8002300:	40021000 	.word	0x40021000
 8002304:	40021400 	.word	0x40021400
 8002308:	40021800 	.word	0x40021800
 800230c:	40021c00 	.word	0x40021c00
 8002310:	40022000 	.word	0x40022000
 8002314:	40022400 	.word	0x40022400
 8002318:	40013c00 	.word	0x40013c00

0800231c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	807b      	strh	r3, [r7, #2]
 8002328:	4613      	mov	r3, r2
 800232a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800232c:	787b      	ldrb	r3, [r7, #1]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002332:	887a      	ldrh	r2, [r7, #2]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002338:	e003      	b.n	8002342 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800233a:	887b      	ldrh	r3, [r7, #2]
 800233c:	041a      	lsls	r2, r3, #16
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	619a      	str	r2, [r3, #24]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800235c:	695a      	ldr	r2, [r3, #20]
 800235e:	88fb      	ldrh	r3, [r7, #6]
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d006      	beq.n	8002374 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002366:	4a05      	ldr	r2, [pc, #20]	; (800237c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe fd1a 	bl	8000da8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40013c00 	.word	0x40013c00

08002380 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e07f      	b.n	8002492 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d106      	bne.n	80023ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7fe fb40 	bl	8000a2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2224      	movs	r2, #36	; 0x24
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0201 	bic.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d107      	bne.n	80023fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	e006      	b.n	8002408 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002406:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d104      	bne.n	800241a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002418:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6859      	ldr	r1, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b1d      	ldr	r3, [pc, #116]	; (800249c <HAL_I2C_Init+0x11c>)
 8002426:	430b      	orrs	r3, r1
 8002428:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002438:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69d9      	ldr	r1, [r3, #28]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1a      	ldr	r2, [r3, #32]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2220      	movs	r2, #32
 800247e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	02008000 	.word	0x02008000

080024a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	607a      	str	r2, [r7, #4]
 80024aa:	461a      	mov	r2, r3
 80024ac:	460b      	mov	r3, r1
 80024ae:	817b      	strh	r3, [r7, #10]
 80024b0:	4613      	mov	r3, r2
 80024b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b20      	cmp	r3, #32
 80024be:	f040 80da 	bne.w	8002676 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <HAL_I2C_Master_Transmit+0x30>
 80024cc:	2302      	movs	r3, #2
 80024ce:	e0d3      	b.n	8002678 <HAL_I2C_Master_Transmit+0x1d8>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024d8:	f7ff f87a 	bl	80015d0 <HAL_GetTick>
 80024dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	2319      	movs	r3, #25
 80024e4:	2201      	movs	r2, #1
 80024e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fa00 	bl	80028f0 <I2C_WaitOnFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e0be      	b.n	8002678 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2221      	movs	r2, #33	; 0x21
 80024fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2210      	movs	r2, #16
 8002506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	893a      	ldrh	r2, [r7, #8]
 800251a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002526:	b29b      	uxth	r3, r3
 8002528:	2bff      	cmp	r3, #255	; 0xff
 800252a:	d90e      	bls.n	800254a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	22ff      	movs	r2, #255	; 0xff
 8002530:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002536:	b2da      	uxtb	r2, r3
 8002538:	8979      	ldrh	r1, [r7, #10]
 800253a:	4b51      	ldr	r3, [pc, #324]	; (8002680 <HAL_I2C_Master_Transmit+0x1e0>)
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 fbea 	bl	8002d1c <I2C_TransferConfig>
 8002548:	e06c      	b.n	8002624 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002558:	b2da      	uxtb	r2, r3
 800255a:	8979      	ldrh	r1, [r7, #10]
 800255c:	4b48      	ldr	r3, [pc, #288]	; (8002680 <HAL_I2C_Master_Transmit+0x1e0>)
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 fbd9 	bl	8002d1c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800256a:	e05b      	b.n	8002624 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	6a39      	ldr	r1, [r7, #32]
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 f9fd 	bl	8002970 <I2C_WaitOnTXISFlagUntilTimeout>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e07b      	b.n	8002678 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	781a      	ldrb	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259a:	b29b      	uxth	r3, r3
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d034      	beq.n	8002624 <HAL_I2C_Master_Transmit+0x184>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d130      	bne.n	8002624 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	2200      	movs	r2, #0
 80025ca:	2180      	movs	r1, #128	; 0x80
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 f98f 	bl	80028f0 <I2C_WaitOnFlagUntilTimeout>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e04d      	b.n	8002678 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	2bff      	cmp	r3, #255	; 0xff
 80025e4:	d90e      	bls.n	8002604 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	22ff      	movs	r2, #255	; 0xff
 80025ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	8979      	ldrh	r1, [r7, #10]
 80025f4:	2300      	movs	r3, #0
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 fb8d 	bl	8002d1c <I2C_TransferConfig>
 8002602:	e00f      	b.n	8002624 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002612:	b2da      	uxtb	r2, r3
 8002614:	8979      	ldrh	r1, [r7, #10]
 8002616:	2300      	movs	r3, #0
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 fb7c 	bl	8002d1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d19e      	bne.n	800256c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	6a39      	ldr	r1, [r7, #32]
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f9dc 	bl	80029f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e01a      	b.n	8002678 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2220      	movs	r2, #32
 8002648:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6859      	ldr	r1, [r3, #4]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_I2C_Master_Transmit+0x1e4>)
 8002656:	400b      	ands	r3, r1
 8002658:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	e000      	b.n	8002678 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002676:	2302      	movs	r3, #2
  }
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	80002000 	.word	0x80002000
 8002684:	fe00e800 	.word	0xfe00e800

08002688 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af02      	add	r7, sp, #8
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	461a      	mov	r2, r3
 8002694:	460b      	mov	r3, r1
 8002696:	817b      	strh	r3, [r7, #10]
 8002698:	4613      	mov	r3, r2
 800269a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b20      	cmp	r3, #32
 80026a6:	f040 80db 	bne.w	8002860 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_I2C_Master_Receive+0x30>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e0d4      	b.n	8002862 <HAL_I2C_Master_Receive+0x1da>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026c0:	f7fe ff86 	bl	80015d0 <HAL_GetTick>
 80026c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	2319      	movs	r3, #25
 80026cc:	2201      	movs	r2, #1
 80026ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 f90c 	bl	80028f0 <I2C_WaitOnFlagUntilTimeout>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e0bf      	b.n	8002862 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2222      	movs	r2, #34	; 0x22
 80026e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2210      	movs	r2, #16
 80026ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	893a      	ldrh	r2, [r7, #8]
 8002702:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270e:	b29b      	uxth	r3, r3
 8002710:	2bff      	cmp	r3, #255	; 0xff
 8002712:	d90e      	bls.n	8002732 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	22ff      	movs	r2, #255	; 0xff
 8002718:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271e:	b2da      	uxtb	r2, r3
 8002720:	8979      	ldrh	r1, [r7, #10]
 8002722:	4b52      	ldr	r3, [pc, #328]	; (800286c <HAL_I2C_Master_Receive+0x1e4>)
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 faf6 	bl	8002d1c <I2C_TransferConfig>
 8002730:	e06d      	b.n	800280e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002740:	b2da      	uxtb	r2, r3
 8002742:	8979      	ldrh	r1, [r7, #10]
 8002744:	4b49      	ldr	r3, [pc, #292]	; (800286c <HAL_I2C_Master_Receive+0x1e4>)
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 fae5 	bl	8002d1c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002752:	e05c      	b.n	800280e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	6a39      	ldr	r1, [r7, #32]
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 f985 	bl	8002a68 <I2C_WaitOnRXNEFlagUntilTimeout>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e07c      	b.n	8002862 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002790:	b29b      	uxth	r3, r3
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d034      	beq.n	800280e <HAL_I2C_Master_Receive+0x186>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d130      	bne.n	800280e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	2200      	movs	r2, #0
 80027b4:	2180      	movs	r1, #128	; 0x80
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 f89a 	bl	80028f0 <I2C_WaitOnFlagUntilTimeout>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e04d      	b.n	8002862 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	2bff      	cmp	r3, #255	; 0xff
 80027ce:	d90e      	bls.n	80027ee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	22ff      	movs	r2, #255	; 0xff
 80027d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	8979      	ldrh	r1, [r7, #10]
 80027de:	2300      	movs	r3, #0
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 fa98 	bl	8002d1c <I2C_TransferConfig>
 80027ec:	e00f      	b.n	800280e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	8979      	ldrh	r1, [r7, #10]
 8002800:	2300      	movs	r3, #0
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 fa87 	bl	8002d1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d19d      	bne.n	8002754 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	6a39      	ldr	r1, [r7, #32]
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 f8e7 	bl	80029f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e01a      	b.n	8002862 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2220      	movs	r2, #32
 8002832:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6859      	ldr	r1, [r3, #4]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <HAL_I2C_Master_Receive+0x1e8>)
 8002840:	400b      	ands	r3, r1
 8002842:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	e000      	b.n	8002862 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002860:	2302      	movs	r3, #2
  }
}
 8002862:	4618      	mov	r0, r3
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	80002400 	.word	0x80002400
 8002870:	fe00e800 	.word	0xfe00e800

08002874 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	68f9      	ldr	r1, [r7, #12]
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	4798      	blx	r3
  }
}
 80028a0:	bf00      	nop
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d103      	bne.n	80028c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2200      	movs	r2, #0
 80028c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d007      	beq.n	80028e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0201 	orr.w	r2, r2, #1
 80028e2:	619a      	str	r2, [r3, #24]
  }
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	4613      	mov	r3, r2
 80028fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002900:	e022      	b.n	8002948 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002908:	d01e      	beq.n	8002948 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290a:	f7fe fe61 	bl	80015d0 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d302      	bcc.n	8002920 <I2C_WaitOnFlagUntilTimeout+0x30>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d113      	bne.n	8002948 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002924:	f043 0220 	orr.w	r2, r3, #32
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e00f      	b.n	8002968 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699a      	ldr	r2, [r3, #24]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	4013      	ands	r3, r2
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	429a      	cmp	r2, r3
 8002956:	bf0c      	ite	eq
 8002958:	2301      	moveq	r3, #1
 800295a:	2300      	movne	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	461a      	mov	r2, r3
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	429a      	cmp	r2, r3
 8002964:	d0cd      	beq.n	8002902 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800297c:	e02c      	b.n	80029d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f8ea 	bl	8002b5c <I2C_IsErrorOccurred>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e02a      	b.n	80029e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002998:	d01e      	beq.n	80029d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800299a:	f7fe fe19 	bl	80015d0 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d302      	bcc.n	80029b0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d113      	bne.n	80029d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b4:	f043 0220 	orr.w	r2, r3, #32
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e007      	b.n	80029e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d1cb      	bne.n	800297e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029fc:	e028      	b.n	8002a50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	68b9      	ldr	r1, [r7, #8]
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f8aa 	bl	8002b5c <I2C_IsErrorOccurred>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e026      	b.n	8002a60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a12:	f7fe fddd 	bl	80015d0 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d302      	bcc.n	8002a28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d113      	bne.n	8002a50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2c:	f043 0220 	orr.w	r2, r3, #32
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e007      	b.n	8002a60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	2b20      	cmp	r3, #32
 8002a5c:	d1cf      	bne.n	80029fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a74:	e064      	b.n	8002b40 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 f86e 	bl	8002b5c <I2C_IsErrorOccurred>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e062      	b.n	8002b50 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	2b20      	cmp	r3, #32
 8002a96:	d138      	bne.n	8002b0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d105      	bne.n	8002ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	e04e      	b.n	8002b50 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	f003 0310 	and.w	r3, r3, #16
 8002abc:	2b10      	cmp	r3, #16
 8002abe:	d107      	bne.n	8002ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2210      	movs	r2, #16
 8002ac6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2204      	movs	r2, #4
 8002acc:	645a      	str	r2, [r3, #68]	; 0x44
 8002ace:	e002      	b.n	8002ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2220      	movs	r2, #32
 8002adc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6859      	ldr	r1, [r3, #4]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002aea:	400b      	ands	r3, r1
 8002aec:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2220      	movs	r2, #32
 8002af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e022      	b.n	8002b50 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0a:	f7fe fd61 	bl	80015d0 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d302      	bcc.n	8002b20 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10f      	bne.n	8002b40 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b24:	f043 0220 	orr.w	r2, r3, #32
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e007      	b.n	8002b50 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d193      	bne.n	8002a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	fe00e800 	.word	0xfe00e800

08002b5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08a      	sub	sp, #40	; 0x28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d068      	beq.n	8002c5a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2210      	movs	r2, #16
 8002b8e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b90:	e049      	b.n	8002c26 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b98:	d045      	beq.n	8002c26 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b9a:	f7fe fd19 	bl	80015d0 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d302      	bcc.n	8002bb0 <I2C_IsErrorOccurred+0x54>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d13a      	bne.n	8002c26 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bc2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bd2:	d121      	bne.n	8002c18 <I2C_IsErrorOccurred+0xbc>
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bda:	d01d      	beq.n	8002c18 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002bdc:	7cfb      	ldrb	r3, [r7, #19]
 8002bde:	2b20      	cmp	r3, #32
 8002be0:	d01a      	beq.n	8002c18 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bf0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002bf2:	f7fe fced 	bl	80015d0 <HAL_GetTick>
 8002bf6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bf8:	e00e      	b.n	8002c18 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002bfa:	f7fe fce9 	bl	80015d0 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b19      	cmp	r3, #25
 8002c06:	d907      	bls.n	8002c18 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	f043 0320 	orr.w	r3, r3, #32
 8002c0e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002c16:	e006      	b.n	8002c26 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	d1e9      	bne.n	8002bfa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	d003      	beq.n	8002c3c <I2C_IsErrorOccurred+0xe0>
 8002c34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0aa      	beq.n	8002b92 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d103      	bne.n	8002c4c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	f043 0304 	orr.w	r3, r3, #4
 8002c52:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00b      	beq.n	8002c84 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	f043 0301 	orr.w	r3, r3, #1
 8002c72:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00b      	beq.n	8002ca6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	f043 0308 	orr.w	r3, r3, #8
 8002c94:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00b      	beq.n	8002cc8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	f043 0302 	orr.w	r3, r3, #2
 8002cb6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cc0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d01c      	beq.n	8002d0a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f7ff fde9 	bl	80028a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6859      	ldr	r1, [r3, #4]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <I2C_IsErrorOccurred+0x1bc>)
 8002ce2:	400b      	ands	r3, r1
 8002ce4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	431a      	orrs	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3728      	adds	r7, #40	; 0x28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	fe00e800 	.word	0xfe00e800

08002d1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	607b      	str	r3, [r7, #4]
 8002d26:	460b      	mov	r3, r1
 8002d28:	817b      	strh	r3, [r7, #10]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d2e:	897b      	ldrh	r3, [r7, #10]
 8002d30:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d34:	7a7b      	ldrb	r3, [r7, #9]
 8002d36:	041b      	lsls	r3, r3, #16
 8002d38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d3c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d4a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	0d5b      	lsrs	r3, r3, #21
 8002d56:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002d5a:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <I2C_TransferConfig+0x60>)
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	ea02 0103 	and.w	r1, r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d6e:	bf00      	nop
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	03ff63ff 	.word	0x03ff63ff

08002d80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	d138      	bne.n	8002e08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e032      	b.n	8002e0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2224      	movs	r2, #36	; 0x24
 8002db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0201 	bic.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6819      	ldr	r1, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2220      	movs	r2, #32
 8002df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	e000      	b.n	8002e0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e08:	2302      	movs	r3, #2
  }
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b085      	sub	sp, #20
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b20      	cmp	r3, #32
 8002e2a:	d139      	bne.n	8002ea0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e033      	b.n	8002ea2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2224      	movs	r2, #36	; 0x24
 8002e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0201 	bic.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	021b      	lsls	r3, r3, #8
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	e000      	b.n	8002ea2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ea0:	2302      	movs	r3, #2
  }
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002eae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eb0:	b08f      	sub	sp, #60	; 0x3c
 8002eb2:	af0a      	add	r7, sp, #40	; 0x28
 8002eb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e116      	b.n	80030ee <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d106      	bne.n	8002ee0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7fe fa84 	bl	80013e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d102      	bne.n	8002efa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f003 fed8 	bl	8006cb4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	603b      	str	r3, [r7, #0]
 8002f0a:	687e      	ldr	r6, [r7, #4]
 8002f0c:	466d      	mov	r5, sp
 8002f0e:	f106 0410 	add.w	r4, r6, #16
 8002f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f22:	1d33      	adds	r3, r6, #4
 8002f24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f26:	6838      	ldr	r0, [r7, #0]
 8002f28:	f003 fe6c 	bl	8006c04 <USB_CoreInit>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2202      	movs	r2, #2
 8002f36:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0d7      	b.n	80030ee <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2100      	movs	r1, #0
 8002f44:	4618      	mov	r0, r3
 8002f46:	f003 fec6 	bl	8006cd6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	73fb      	strb	r3, [r7, #15]
 8002f4e:	e04a      	b.n	8002fe6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f50:	7bfa      	ldrb	r2, [r7, #15]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	333d      	adds	r3, #61	; 0x3d
 8002f60:	2201      	movs	r2, #1
 8002f62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f64:	7bfa      	ldrb	r2, [r7, #15]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	333c      	adds	r3, #60	; 0x3c
 8002f74:	7bfa      	ldrb	r2, [r7, #15]
 8002f76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f78:	7bfa      	ldrb	r2, [r7, #15]
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	b298      	uxth	r0, r3
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	3344      	adds	r3, #68	; 0x44
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f90:	7bfa      	ldrb	r2, [r7, #15]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4413      	add	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	3340      	adds	r3, #64	; 0x40
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fa4:	7bfa      	ldrb	r2, [r7, #15]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	3348      	adds	r3, #72	; 0x48
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fb8:	7bfa      	ldrb	r2, [r7, #15]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	334c      	adds	r3, #76	; 0x4c
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fcc:	7bfa      	ldrb	r2, [r7, #15]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	3354      	adds	r3, #84	; 0x54
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	73fb      	strb	r3, [r7, #15]
 8002fe6:	7bfa      	ldrb	r2, [r7, #15]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d3af      	bcc.n	8002f50 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	73fb      	strb	r3, [r7, #15]
 8002ff4:	e044      	b.n	8003080 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ff6:	7bfa      	ldrb	r2, [r7, #15]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003008:	2200      	movs	r2, #0
 800300a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800301e:	7bfa      	ldrb	r2, [r7, #15]
 8003020:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003022:	7bfa      	ldrb	r2, [r7, #15]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003034:	2200      	movs	r2, #0
 8003036:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003038:	7bfa      	ldrb	r2, [r7, #15]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800304e:	7bfa      	ldrb	r2, [r7, #15]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003064:	7bfa      	ldrb	r2, [r7, #15]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800307a:	7bfb      	ldrb	r3, [r7, #15]
 800307c:	3301      	adds	r3, #1
 800307e:	73fb      	strb	r3, [r7, #15]
 8003080:	7bfa      	ldrb	r2, [r7, #15]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	429a      	cmp	r2, r3
 8003088:	d3b5      	bcc.n	8002ff6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	687e      	ldr	r6, [r7, #4]
 8003092:	466d      	mov	r5, sp
 8003094:	f106 0410 	add.w	r4, r6, #16
 8003098:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800309a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800309c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800309e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80030a8:	1d33      	adds	r3, r6, #4
 80030aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030ac:	6838      	ldr	r0, [r7, #0]
 80030ae:	f003 fe5f 	bl	8006d70 <USB_DevInit>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e014      	b.n	80030ee <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d102      	bne.n	80030e2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f80b 	bl	80030f8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f004 f81d 	bl	8007126 <USB_DevDisconnect>

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080030f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <HAL_PCDEx_ActivateLPM+0x44>)
 8003128:	4313      	orrs	r3, r2
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	10000003 	.word	0x10000003

08003140 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003144:	4b05      	ldr	r3, [pc, #20]	; (800315c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a04      	ldr	r2, [pc, #16]	; (800315c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800314a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314e:	6013      	str	r3, [r2, #0]
}
 8003150:	bf00      	nop
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40007000 	.word	0x40007000

08003160 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003168:	2300      	movs	r3, #0
 800316a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e291      	b.n	800369a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 8087 	beq.w	8003292 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003184:	4b96      	ldr	r3, [pc, #600]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 030c 	and.w	r3, r3, #12
 800318c:	2b04      	cmp	r3, #4
 800318e:	d00c      	beq.n	80031aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003190:	4b93      	ldr	r3, [pc, #588]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 030c 	and.w	r3, r3, #12
 8003198:	2b08      	cmp	r3, #8
 800319a:	d112      	bne.n	80031c2 <HAL_RCC_OscConfig+0x62>
 800319c:	4b90      	ldr	r3, [pc, #576]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031a8:	d10b      	bne.n	80031c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031aa:	4b8d      	ldr	r3, [pc, #564]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d06c      	beq.n	8003290 <HAL_RCC_OscConfig+0x130>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d168      	bne.n	8003290 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e26b      	b.n	800369a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ca:	d106      	bne.n	80031da <HAL_RCC_OscConfig+0x7a>
 80031cc:	4b84      	ldr	r3, [pc, #528]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a83      	ldr	r2, [pc, #524]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 80031d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	e02e      	b.n	8003238 <HAL_RCC_OscConfig+0xd8>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10c      	bne.n	80031fc <HAL_RCC_OscConfig+0x9c>
 80031e2:	4b7f      	ldr	r3, [pc, #508]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a7e      	ldr	r2, [pc, #504]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 80031e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	4b7c      	ldr	r3, [pc, #496]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a7b      	ldr	r2, [pc, #492]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 80031f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	e01d      	b.n	8003238 <HAL_RCC_OscConfig+0xd8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0xc0>
 8003206:	4b76      	ldr	r3, [pc, #472]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a75      	ldr	r2, [pc, #468]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 800320c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	4b73      	ldr	r3, [pc, #460]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a72      	ldr	r2, [pc, #456]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 8003218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e00b      	b.n	8003238 <HAL_RCC_OscConfig+0xd8>
 8003220:	4b6f      	ldr	r3, [pc, #444]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a6e      	ldr	r2, [pc, #440]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 8003226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	4b6c      	ldr	r3, [pc, #432]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a6b      	ldr	r2, [pc, #428]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 8003232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d013      	beq.n	8003268 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fe f9c6 	bl	80015d0 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003248:	f7fe f9c2 	bl	80015d0 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	; 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e21f      	b.n	800369a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325a:	4b61      	ldr	r3, [pc, #388]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0xe8>
 8003266:	e014      	b.n	8003292 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003268:	f7fe f9b2 	bl	80015d0 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003270:	f7fe f9ae 	bl	80015d0 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b64      	cmp	r3, #100	; 0x64
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e20b      	b.n	800369a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003282:	4b57      	ldr	r3, [pc, #348]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0x110>
 800328e:	e000      	b.n	8003292 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d069      	beq.n	8003372 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800329e:	4b50      	ldr	r3, [pc, #320]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00b      	beq.n	80032c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032aa:	4b4d      	ldr	r3, [pc, #308]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d11c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x190>
 80032b6:	4b4a      	ldr	r3, [pc, #296]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d116      	bne.n	80032f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c2:	4b47      	ldr	r3, [pc, #284]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <HAL_RCC_OscConfig+0x17a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d001      	beq.n	80032da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e1df      	b.n	800369a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032da:	4b41      	ldr	r3, [pc, #260]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	493d      	ldr	r1, [pc, #244]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ee:	e040      	b.n	8003372 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d023      	beq.n	8003340 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f8:	4b39      	ldr	r3, [pc, #228]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a38      	ldr	r2, [pc, #224]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fe f964 	bl	80015d0 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800330c:	f7fe f960 	bl	80015d0 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e1bd      	b.n	800369a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331e:	4b30      	ldr	r3, [pc, #192]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332a:	4b2d      	ldr	r3, [pc, #180]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	4929      	ldr	r1, [pc, #164]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 800333a:	4313      	orrs	r3, r2
 800333c:	600b      	str	r3, [r1, #0]
 800333e:	e018      	b.n	8003372 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003340:	4b27      	ldr	r3, [pc, #156]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a26      	ldr	r2, [pc, #152]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 8003346:	f023 0301 	bic.w	r3, r3, #1
 800334a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7fe f940 	bl	80015d0 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003354:	f7fe f93c 	bl	80015d0 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e199      	b.n	800369a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003366:	4b1e      	ldr	r3, [pc, #120]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d038      	beq.n	80033f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d019      	beq.n	80033ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003386:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 8003388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338a:	4a15      	ldr	r2, [pc, #84]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003392:	f7fe f91d 	bl	80015d0 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800339a:	f7fe f919 	bl	80015d0 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e176      	b.n	800369a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ac:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 80033ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0f0      	beq.n	800339a <HAL_RCC_OscConfig+0x23a>
 80033b8:	e01a      	b.n	80033f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ba:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 80033bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033be:	4a08      	ldr	r2, [pc, #32]	; (80033e0 <HAL_RCC_OscConfig+0x280>)
 80033c0:	f023 0301 	bic.w	r3, r3, #1
 80033c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c6:	f7fe f903 	bl	80015d0 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033cc:	e00a      	b.n	80033e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ce:	f7fe f8ff 	bl	80015d0 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d903      	bls.n	80033e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e15c      	b.n	800369a <HAL_RCC_OscConfig+0x53a>
 80033e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e4:	4b91      	ldr	r3, [pc, #580]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 80033e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1ee      	bne.n	80033ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 80a4 	beq.w	8003546 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033fe:	4b8b      	ldr	r3, [pc, #556]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10d      	bne.n	8003426 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800340a:	4b88      	ldr	r3, [pc, #544]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	4a87      	ldr	r2, [pc, #540]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 8003410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003414:	6413      	str	r3, [r2, #64]	; 0x40
 8003416:	4b85      	ldr	r3, [pc, #532]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341e:	60bb      	str	r3, [r7, #8]
 8003420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003422:	2301      	movs	r3, #1
 8003424:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003426:	4b82      	ldr	r3, [pc, #520]	; (8003630 <HAL_RCC_OscConfig+0x4d0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342e:	2b00      	cmp	r3, #0
 8003430:	d118      	bne.n	8003464 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003432:	4b7f      	ldr	r3, [pc, #508]	; (8003630 <HAL_RCC_OscConfig+0x4d0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a7e      	ldr	r2, [pc, #504]	; (8003630 <HAL_RCC_OscConfig+0x4d0>)
 8003438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800343c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800343e:	f7fe f8c7 	bl	80015d0 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003446:	f7fe f8c3 	bl	80015d0 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b64      	cmp	r3, #100	; 0x64
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e120      	b.n	800369a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003458:	4b75      	ldr	r3, [pc, #468]	; (8003630 <HAL_RCC_OscConfig+0x4d0>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f0      	beq.n	8003446 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d106      	bne.n	800347a <HAL_RCC_OscConfig+0x31a>
 800346c:	4b6f      	ldr	r3, [pc, #444]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 800346e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003470:	4a6e      	ldr	r2, [pc, #440]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	6713      	str	r3, [r2, #112]	; 0x70
 8003478:	e02d      	b.n	80034d6 <HAL_RCC_OscConfig+0x376>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10c      	bne.n	800349c <HAL_RCC_OscConfig+0x33c>
 8003482:	4b6a      	ldr	r3, [pc, #424]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 8003484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003486:	4a69      	ldr	r2, [pc, #420]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 8003488:	f023 0301 	bic.w	r3, r3, #1
 800348c:	6713      	str	r3, [r2, #112]	; 0x70
 800348e:	4b67      	ldr	r3, [pc, #412]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003492:	4a66      	ldr	r2, [pc, #408]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 8003494:	f023 0304 	bic.w	r3, r3, #4
 8003498:	6713      	str	r3, [r2, #112]	; 0x70
 800349a:	e01c      	b.n	80034d6 <HAL_RCC_OscConfig+0x376>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b05      	cmp	r3, #5
 80034a2:	d10c      	bne.n	80034be <HAL_RCC_OscConfig+0x35e>
 80034a4:	4b61      	ldr	r3, [pc, #388]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	4a60      	ldr	r2, [pc, #384]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 80034aa:	f043 0304 	orr.w	r3, r3, #4
 80034ae:	6713      	str	r3, [r2, #112]	; 0x70
 80034b0:	4b5e      	ldr	r3, [pc, #376]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 80034b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b4:	4a5d      	ldr	r2, [pc, #372]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	6713      	str	r3, [r2, #112]	; 0x70
 80034bc:	e00b      	b.n	80034d6 <HAL_RCC_OscConfig+0x376>
 80034be:	4b5b      	ldr	r3, [pc, #364]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c2:	4a5a      	ldr	r2, [pc, #360]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 80034c4:	f023 0301 	bic.w	r3, r3, #1
 80034c8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ca:	4b58      	ldr	r3, [pc, #352]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 80034cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ce:	4a57      	ldr	r2, [pc, #348]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 80034d0:	f023 0304 	bic.w	r3, r3, #4
 80034d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d015      	beq.n	800350a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034de:	f7fe f877 	bl	80015d0 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e4:	e00a      	b.n	80034fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e6:	f7fe f873 	bl	80015d0 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e0ce      	b.n	800369a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fc:	4b4b      	ldr	r3, [pc, #300]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 80034fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0ee      	beq.n	80034e6 <HAL_RCC_OscConfig+0x386>
 8003508:	e014      	b.n	8003534 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350a:	f7fe f861 	bl	80015d0 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003510:	e00a      	b.n	8003528 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003512:	f7fe f85d 	bl	80015d0 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003520:	4293      	cmp	r3, r2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e0b8      	b.n	800369a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003528:	4b40      	ldr	r3, [pc, #256]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 800352a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1ee      	bne.n	8003512 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003534:	7dfb      	ldrb	r3, [r7, #23]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d105      	bne.n	8003546 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800353a:	4b3c      	ldr	r3, [pc, #240]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	4a3b      	ldr	r2, [pc, #236]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 8003540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003544:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 80a4 	beq.w	8003698 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003550:	4b36      	ldr	r3, [pc, #216]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b08      	cmp	r3, #8
 800355a:	d06b      	beq.n	8003634 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d149      	bne.n	80035f8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003564:	4b31      	ldr	r3, [pc, #196]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a30      	ldr	r2, [pc, #192]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 800356a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800356e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fe f82e 	bl	80015d0 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003578:	f7fe f82a 	bl	80015d0 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e087      	b.n	800369a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358a:	4b28      	ldr	r3, [pc, #160]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	69da      	ldr	r2, [r3, #28]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	019b      	lsls	r3, r3, #6
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ac:	085b      	lsrs	r3, r3, #1
 80035ae:	3b01      	subs	r3, #1
 80035b0:	041b      	lsls	r3, r3, #16
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	061b      	lsls	r3, r3, #24
 80035ba:	4313      	orrs	r3, r2
 80035bc:	4a1b      	ldr	r2, [pc, #108]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 80035be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035c2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c4:	4b19      	ldr	r3, [pc, #100]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a18      	ldr	r2, [pc, #96]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 80035ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d0:	f7fd fffe 	bl	80015d0 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d8:	f7fd fffa 	bl	80015d0 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e057      	b.n	800369a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f0      	beq.n	80035d8 <HAL_RCC_OscConfig+0x478>
 80035f6:	e04f      	b.n	8003698 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f8:	4b0c      	ldr	r3, [pc, #48]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a0b      	ldr	r2, [pc, #44]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 80035fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7fd ffe4 	bl	80015d0 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360c:	f7fd ffe0 	bl	80015d0 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e03d      	b.n	800369a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361e:	4b03      	ldr	r3, [pc, #12]	; (800362c <HAL_RCC_OscConfig+0x4cc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0x4ac>
 800362a:	e035      	b.n	8003698 <HAL_RCC_OscConfig+0x538>
 800362c:	40023800 	.word	0x40023800
 8003630:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003634:	4b1b      	ldr	r3, [pc, #108]	; (80036a4 <HAL_RCC_OscConfig+0x544>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d028      	beq.n	8003694 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800364c:	429a      	cmp	r2, r3
 800364e:	d121      	bne.n	8003694 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d11a      	bne.n	8003694 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003664:	4013      	ands	r3, r2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800366a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800366c:	4293      	cmp	r3, r2
 800366e:	d111      	bne.n	8003694 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	085b      	lsrs	r3, r3, #1
 800367c:	3b01      	subs	r3, #1
 800367e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003680:	429a      	cmp	r2, r3
 8003682:	d107      	bne.n	8003694 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e000      	b.n	800369a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40023800 	.word	0x40023800

080036a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0d0      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036c0:	4b6a      	ldr	r3, [pc, #424]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 030f 	and.w	r3, r3, #15
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d910      	bls.n	80036f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ce:	4b67      	ldr	r3, [pc, #412]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 020f 	bic.w	r2, r3, #15
 80036d6:	4965      	ldr	r1, [pc, #404]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	4313      	orrs	r3, r2
 80036dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	4b63      	ldr	r3, [pc, #396]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0b8      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d020      	beq.n	800373e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003708:	4b59      	ldr	r3, [pc, #356]	; (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	4a58      	ldr	r2, [pc, #352]	; (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 800370e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003712:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003720:	4b53      	ldr	r3, [pc, #332]	; (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	4a52      	ldr	r2, [pc, #328]	; (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 8003726:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800372a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800372c:	4b50      	ldr	r3, [pc, #320]	; (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	494d      	ldr	r1, [pc, #308]	; (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 800373a:	4313      	orrs	r3, r2
 800373c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d040      	beq.n	80037cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d107      	bne.n	8003762 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003752:	4b47      	ldr	r3, [pc, #284]	; (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d115      	bne.n	800378a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e07f      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d107      	bne.n	800377a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376a:	4b41      	ldr	r3, [pc, #260]	; (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e073      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377a:	4b3d      	ldr	r3, [pc, #244]	; (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e06b      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800378a:	4b39      	ldr	r3, [pc, #228]	; (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f023 0203 	bic.w	r2, r3, #3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4936      	ldr	r1, [pc, #216]	; (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 8003798:	4313      	orrs	r3, r2
 800379a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800379c:	f7fd ff18 	bl	80015d0 <HAL_GetTick>
 80037a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a2:	e00a      	b.n	80037ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a4:	f7fd ff14 	bl	80015d0 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e053      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ba:	4b2d      	ldr	r3, [pc, #180]	; (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 020c 	and.w	r2, r3, #12
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d1eb      	bne.n	80037a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037cc:	4b27      	ldr	r3, [pc, #156]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d210      	bcs.n	80037fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037da:	4b24      	ldr	r3, [pc, #144]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f023 020f 	bic.w	r2, r3, #15
 80037e2:	4922      	ldr	r1, [pc, #136]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ea:	4b20      	ldr	r3, [pc, #128]	; (800386c <HAL_RCC_ClockConfig+0x1c4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d001      	beq.n	80037fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e032      	b.n	8003862 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003808:	4b19      	ldr	r3, [pc, #100]	; (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	4916      	ldr	r1, [pc, #88]	; (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 8003816:	4313      	orrs	r3, r2
 8003818:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003826:	4b12      	ldr	r3, [pc, #72]	; (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	490e      	ldr	r1, [pc, #56]	; (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 8003836:	4313      	orrs	r3, r2
 8003838:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800383a:	f000 f821 	bl	8003880 <HAL_RCC_GetSysClockFreq>
 800383e:	4602      	mov	r2, r0
 8003840:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <HAL_RCC_ClockConfig+0x1c8>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	091b      	lsrs	r3, r3, #4
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	490a      	ldr	r1, [pc, #40]	; (8003874 <HAL_RCC_ClockConfig+0x1cc>)
 800384c:	5ccb      	ldrb	r3, [r1, r3]
 800384e:	fa22 f303 	lsr.w	r3, r2, r3
 8003852:	4a09      	ldr	r2, [pc, #36]	; (8003878 <HAL_RCC_ClockConfig+0x1d0>)
 8003854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003856:	4b09      	ldr	r3, [pc, #36]	; (800387c <HAL_RCC_ClockConfig+0x1d4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f7fd fe74 	bl	8001548 <HAL_InitTick>

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40023c00 	.word	0x40023c00
 8003870:	40023800 	.word	0x40023800
 8003874:	08007ce4 	.word	0x08007ce4
 8003878:	20000010 	.word	0x20000010
 800387c:	20000014 	.word	0x20000014

08003880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003884:	b094      	sub	sp, #80	; 0x50
 8003886:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	647b      	str	r3, [r7, #68]	; 0x44
 800388c:	2300      	movs	r3, #0
 800388e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003890:	2300      	movs	r3, #0
 8003892:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003898:	4b79      	ldr	r3, [pc, #484]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x200>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 030c 	and.w	r3, r3, #12
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d00d      	beq.n	80038c0 <HAL_RCC_GetSysClockFreq+0x40>
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	f200 80e1 	bhi.w	8003a6c <HAL_RCC_GetSysClockFreq+0x1ec>
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <HAL_RCC_GetSysClockFreq+0x34>
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d003      	beq.n	80038ba <HAL_RCC_GetSysClockFreq+0x3a>
 80038b2:	e0db      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038b4:	4b73      	ldr	r3, [pc, #460]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x204>)
 80038b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038b8:	e0db      	b.n	8003a72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038ba:	4b73      	ldr	r3, [pc, #460]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x208>)
 80038bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038be:	e0d8      	b.n	8003a72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038c0:	4b6f      	ldr	r3, [pc, #444]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038c8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80038ca:	4b6d      	ldr	r3, [pc, #436]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d063      	beq.n	800399e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038d6:	4b6a      	ldr	r3, [pc, #424]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	099b      	lsrs	r3, r3, #6
 80038dc:	2200      	movs	r2, #0
 80038de:	63bb      	str	r3, [r7, #56]	; 0x38
 80038e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e8:	633b      	str	r3, [r7, #48]	; 0x30
 80038ea:	2300      	movs	r3, #0
 80038ec:	637b      	str	r3, [r7, #52]	; 0x34
 80038ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038f2:	4622      	mov	r2, r4
 80038f4:	462b      	mov	r3, r5
 80038f6:	f04f 0000 	mov.w	r0, #0
 80038fa:	f04f 0100 	mov.w	r1, #0
 80038fe:	0159      	lsls	r1, r3, #5
 8003900:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003904:	0150      	lsls	r0, r2, #5
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4621      	mov	r1, r4
 800390c:	1a51      	subs	r1, r2, r1
 800390e:	6139      	str	r1, [r7, #16]
 8003910:	4629      	mov	r1, r5
 8003912:	eb63 0301 	sbc.w	r3, r3, r1
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003924:	4659      	mov	r1, fp
 8003926:	018b      	lsls	r3, r1, #6
 8003928:	4651      	mov	r1, sl
 800392a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800392e:	4651      	mov	r1, sl
 8003930:	018a      	lsls	r2, r1, #6
 8003932:	4651      	mov	r1, sl
 8003934:	ebb2 0801 	subs.w	r8, r2, r1
 8003938:	4659      	mov	r1, fp
 800393a:	eb63 0901 	sbc.w	r9, r3, r1
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800394a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800394e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003952:	4690      	mov	r8, r2
 8003954:	4699      	mov	r9, r3
 8003956:	4623      	mov	r3, r4
 8003958:	eb18 0303 	adds.w	r3, r8, r3
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	462b      	mov	r3, r5
 8003960:	eb49 0303 	adc.w	r3, r9, r3
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003972:	4629      	mov	r1, r5
 8003974:	024b      	lsls	r3, r1, #9
 8003976:	4621      	mov	r1, r4
 8003978:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800397c:	4621      	mov	r1, r4
 800397e:	024a      	lsls	r2, r1, #9
 8003980:	4610      	mov	r0, r2
 8003982:	4619      	mov	r1, r3
 8003984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003986:	2200      	movs	r2, #0
 8003988:	62bb      	str	r3, [r7, #40]	; 0x28
 800398a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800398c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003990:	f7fc fc8e 	bl	80002b0 <__aeabi_uldivmod>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4613      	mov	r3, r2
 800399a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800399c:	e058      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800399e:	4b38      	ldr	r3, [pc, #224]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x200>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	099b      	lsrs	r3, r3, #6
 80039a4:	2200      	movs	r2, #0
 80039a6:	4618      	mov	r0, r3
 80039a8:	4611      	mov	r1, r2
 80039aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039ae:	623b      	str	r3, [r7, #32]
 80039b0:	2300      	movs	r3, #0
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
 80039b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039b8:	4642      	mov	r2, r8
 80039ba:	464b      	mov	r3, r9
 80039bc:	f04f 0000 	mov.w	r0, #0
 80039c0:	f04f 0100 	mov.w	r1, #0
 80039c4:	0159      	lsls	r1, r3, #5
 80039c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039ca:	0150      	lsls	r0, r2, #5
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4641      	mov	r1, r8
 80039d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80039d6:	4649      	mov	r1, r9
 80039d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039f0:	ebb2 040a 	subs.w	r4, r2, sl
 80039f4:	eb63 050b 	sbc.w	r5, r3, fp
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	00eb      	lsls	r3, r5, #3
 8003a02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a06:	00e2      	lsls	r2, r4, #3
 8003a08:	4614      	mov	r4, r2
 8003a0a:	461d      	mov	r5, r3
 8003a0c:	4643      	mov	r3, r8
 8003a0e:	18e3      	adds	r3, r4, r3
 8003a10:	603b      	str	r3, [r7, #0]
 8003a12:	464b      	mov	r3, r9
 8003a14:	eb45 0303 	adc.w	r3, r5, r3
 8003a18:	607b      	str	r3, [r7, #4]
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a26:	4629      	mov	r1, r5
 8003a28:	028b      	lsls	r3, r1, #10
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a30:	4621      	mov	r1, r4
 8003a32:	028a      	lsls	r2, r1, #10
 8003a34:	4610      	mov	r0, r2
 8003a36:	4619      	mov	r1, r3
 8003a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	61fa      	str	r2, [r7, #28]
 8003a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a44:	f7fc fc34 	bl	80002b0 <__aeabi_uldivmod>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a50:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	0c1b      	lsrs	r3, r3, #16
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003a60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a6a:	e002      	b.n	8003a72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3750      	adds	r7, #80	; 0x50
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a7e:	bf00      	nop
 8003a80:	40023800 	.word	0x40023800
 8003a84:	00f42400 	.word	0x00f42400
 8003a88:	007a1200 	.word	0x007a1200

08003a8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a90:	4b03      	ldr	r3, [pc, #12]	; (8003aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a92:	681b      	ldr	r3, [r3, #0]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	20000010 	.word	0x20000010

08003aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003aa8:	f7ff fff0 	bl	8003a8c <HAL_RCC_GetHCLKFreq>
 8003aac:	4602      	mov	r2, r0
 8003aae:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	0a9b      	lsrs	r3, r3, #10
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	4903      	ldr	r1, [pc, #12]	; (8003ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aba:	5ccb      	ldrb	r3, [r1, r3]
 8003abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	08007cf4 	.word	0x08007cf4

08003acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ad0:	f7ff ffdc 	bl	8003a8c <HAL_RCC_GetHCLKFreq>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	4b05      	ldr	r3, [pc, #20]	; (8003aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	0b5b      	lsrs	r3, r3, #13
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	4903      	ldr	r1, [pc, #12]	; (8003af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ae2:	5ccb      	ldrb	r3, [r1, r3]
 8003ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40023800 	.word	0x40023800
 8003af0:	08007cf4 	.word	0x08007cf4

08003af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d012      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b1c:	4b69      	ldr	r3, [pc, #420]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	4a68      	ldr	r2, [pc, #416]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b26:	6093      	str	r3, [r2, #8]
 8003b28:	4b66      	ldr	r3, [pc, #408]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b30:	4964      	ldr	r1, [pc, #400]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d017      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b4e:	4b5d      	ldr	r3, [pc, #372]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5c:	4959      	ldr	r1, [pc, #356]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d017      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b8a:	4b4e      	ldr	r3, [pc, #312]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	494a      	ldr	r1, [pc, #296]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ba8:	d101      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003baa:	2301      	movs	r3, #1
 8003bac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0320 	and.w	r3, r3, #32
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 808b 	beq.w	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bd8:	4b3a      	ldr	r3, [pc, #232]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	4a39      	ldr	r2, [pc, #228]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be2:	6413      	str	r3, [r2, #64]	; 0x40
 8003be4:	4b37      	ldr	r3, [pc, #220]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bec:	60bb      	str	r3, [r7, #8]
 8003bee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bf0:	4b35      	ldr	r3, [pc, #212]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a34      	ldr	r2, [pc, #208]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bfc:	f7fd fce8 	bl	80015d0 <HAL_GetTick>
 8003c00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c04:	f7fd fce4 	bl	80015d0 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b64      	cmp	r3, #100	; 0x64
 8003c10:	d901      	bls.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e357      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c16:	4b2c      	ldr	r3, [pc, #176]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c22:	4b28      	ldr	r3, [pc, #160]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d035      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d02e      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c40:	4b20      	ldr	r3, [pc, #128]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c4a:	4b1e      	ldr	r3, [pc, #120]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4e:	4a1d      	ldr	r2, [pc, #116]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c54:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c56:	4b1b      	ldr	r3, [pc, #108]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5a:	4a1a      	ldr	r2, [pc, #104]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c62:	4a18      	ldr	r2, [pc, #96]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c68:	4b16      	ldr	r3, [pc, #88]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d114      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fd fcac 	bl	80015d0 <HAL_GetTick>
 8003c78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c7c:	f7fd fca8 	bl	80015d0 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e319      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c92:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0ee      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003caa:	d111      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003cac:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cb8:	4b04      	ldr	r3, [pc, #16]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003cba:	400b      	ands	r3, r1
 8003cbc:	4901      	ldr	r1, [pc, #4]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	608b      	str	r3, [r1, #8]
 8003cc2:	e00b      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	40007000 	.word	0x40007000
 8003ccc:	0ffffcff 	.word	0x0ffffcff
 8003cd0:	4baa      	ldr	r3, [pc, #680]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4aa9      	ldr	r2, [pc, #676]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003cda:	6093      	str	r3, [r2, #8]
 8003cdc:	4ba7      	ldr	r3, [pc, #668]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce8:	49a4      	ldr	r1, [pc, #656]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0310 	and.w	r3, r3, #16
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d010      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cfa:	4ba0      	ldr	r3, [pc, #640]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d00:	4a9e      	ldr	r2, [pc, #632]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d0a:	4b9c      	ldr	r3, [pc, #624]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	4999      	ldr	r1, [pc, #612]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d28:	4b94      	ldr	r3, [pc, #592]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d36:	4991      	ldr	r1, [pc, #580]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d4a:	4b8c      	ldr	r3, [pc, #560]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d58:	4988      	ldr	r1, [pc, #544]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d6c:	4b83      	ldr	r3, [pc, #524]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d7a:	4980      	ldr	r1, [pc, #512]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d8e:	4b7b      	ldr	r3, [pc, #492]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	4977      	ldr	r1, [pc, #476]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00a      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003db0:	4b72      	ldr	r3, [pc, #456]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db6:	f023 0203 	bic.w	r2, r3, #3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbe:	496f      	ldr	r1, [pc, #444]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dd2:	4b6a      	ldr	r3, [pc, #424]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd8:	f023 020c 	bic.w	r2, r3, #12
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de0:	4966      	ldr	r1, [pc, #408]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00a      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003df4:	4b61      	ldr	r3, [pc, #388]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e02:	495e      	ldr	r1, [pc, #376]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e16:	4b59      	ldr	r3, [pc, #356]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e24:	4955      	ldr	r1, [pc, #340]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e38:	4b50      	ldr	r3, [pc, #320]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e46:	494d      	ldr	r1, [pc, #308]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e5a:	4b48      	ldr	r3, [pc, #288]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e68:	4944      	ldr	r1, [pc, #272]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e7c:	4b3f      	ldr	r3, [pc, #252]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8a:	493c      	ldr	r1, [pc, #240]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e9e:	4b37      	ldr	r3, [pc, #220]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eac:	4933      	ldr	r1, [pc, #204]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ec0:	4b2e      	ldr	r3, [pc, #184]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ece:	492b      	ldr	r1, [pc, #172]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d011      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ee2:	4b26      	ldr	r3, [pc, #152]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ef0:	4922      	ldr	r1, [pc, #136]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003efc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f00:	d101      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f02:	2301      	movs	r3, #1
 8003f04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f12:	2301      	movs	r3, #1
 8003f14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f22:	4b16      	ldr	r3, [pc, #88]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f28:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f30:	4912      	ldr	r1, [pc, #72]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00b      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f44:	4b0d      	ldr	r3, [pc, #52]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f54:	4909      	ldr	r1, [pc, #36]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d006      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 80d9 	beq.w	8004122 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f70:	4b02      	ldr	r3, [pc, #8]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a01      	ldr	r2, [pc, #4]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f7a:	e001      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f82:	f7fd fb25 	bl	80015d0 <HAL_GetTick>
 8003f86:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f88:	e008      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f8a:	f7fd fb21 	bl	80015d0 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b64      	cmp	r3, #100	; 0x64
 8003f96:	d901      	bls.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e194      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f9c:	4b6c      	ldr	r3, [pc, #432]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1f0      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d021      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d11d      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fbc:	4b64      	ldr	r3, [pc, #400]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc2:	0c1b      	lsrs	r3, r3, #16
 8003fc4:	f003 0303 	and.w	r3, r3, #3
 8003fc8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fca:	4b61      	ldr	r3, [pc, #388]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fd0:	0e1b      	lsrs	r3, r3, #24
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	019a      	lsls	r2, r3, #6
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	041b      	lsls	r3, r3, #16
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	061b      	lsls	r3, r3, #24
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	071b      	lsls	r3, r3, #28
 8003ff0:	4957      	ldr	r1, [pc, #348]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d004      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004008:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800400c:	d00a      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004016:	2b00      	cmp	r3, #0
 8004018:	d02e      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004022:	d129      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004024:	4b4a      	ldr	r3, [pc, #296]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800402a:	0c1b      	lsrs	r3, r3, #16
 800402c:	f003 0303 	and.w	r3, r3, #3
 8004030:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004032:	4b47      	ldr	r3, [pc, #284]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004038:	0f1b      	lsrs	r3, r3, #28
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	019a      	lsls	r2, r3, #6
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	041b      	lsls	r3, r3, #16
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	061b      	lsls	r3, r3, #24
 8004052:	431a      	orrs	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	071b      	lsls	r3, r3, #28
 8004058:	493d      	ldr	r1, [pc, #244]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004060:	4b3b      	ldr	r3, [pc, #236]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004066:	f023 021f 	bic.w	r2, r3, #31
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	3b01      	subs	r3, #1
 8004070:	4937      	ldr	r1, [pc, #220]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d01d      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004084:	4b32      	ldr	r3, [pc, #200]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800408a:	0e1b      	lsrs	r3, r3, #24
 800408c:	f003 030f 	and.w	r3, r3, #15
 8004090:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004092:	4b2f      	ldr	r3, [pc, #188]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004098:	0f1b      	lsrs	r3, r3, #28
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	019a      	lsls	r2, r3, #6
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	041b      	lsls	r3, r3, #16
 80040ac:	431a      	orrs	r2, r3
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	061b      	lsls	r3, r3, #24
 80040b2:	431a      	orrs	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	071b      	lsls	r3, r3, #28
 80040b8:	4925      	ldr	r1, [pc, #148]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d011      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	019a      	lsls	r2, r3, #6
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	041b      	lsls	r3, r3, #16
 80040d8:	431a      	orrs	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	061b      	lsls	r3, r3, #24
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	071b      	lsls	r3, r3, #28
 80040e8:	4919      	ldr	r1, [pc, #100]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040f0:	4b17      	ldr	r3, [pc, #92]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a16      	ldr	r2, [pc, #88]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040fc:	f7fd fa68 	bl	80015d0 <HAL_GetTick>
 8004100:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004104:	f7fd fa64 	bl	80015d0 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b64      	cmp	r3, #100	; 0x64
 8004110:	d901      	bls.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e0d7      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004116:	4b0e      	ldr	r3, [pc, #56]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f0      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	2b01      	cmp	r3, #1
 8004126:	f040 80cd 	bne.w	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800412a:	4b09      	ldr	r3, [pc, #36]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a08      	ldr	r2, [pc, #32]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004134:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004136:	f7fd fa4b 	bl	80015d0 <HAL_GetTick>
 800413a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800413c:	e00a      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800413e:	f7fd fa47 	bl	80015d0 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b64      	cmp	r3, #100	; 0x64
 800414a:	d903      	bls.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e0ba      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004150:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004154:	4b5e      	ldr	r3, [pc, #376]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800415c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004160:	d0ed      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004172:	2b00      	cmp	r3, #0
 8004174:	d009      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800417e:	2b00      	cmp	r3, #0
 8004180:	d02e      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	d12a      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800418a:	4b51      	ldr	r3, [pc, #324]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800418c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004190:	0c1b      	lsrs	r3, r3, #16
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004198:	4b4d      	ldr	r3, [pc, #308]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419e:	0f1b      	lsrs	r3, r3, #28
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	019a      	lsls	r2, r3, #6
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	041b      	lsls	r3, r3, #16
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	061b      	lsls	r3, r3, #24
 80041b8:	431a      	orrs	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	071b      	lsls	r3, r3, #28
 80041be:	4944      	ldr	r1, [pc, #272]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80041c6:	4b42      	ldr	r3, [pc, #264]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d4:	3b01      	subs	r3, #1
 80041d6:	021b      	lsls	r3, r3, #8
 80041d8:	493d      	ldr	r1, [pc, #244]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d022      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041f4:	d11d      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041f6:	4b36      	ldr	r3, [pc, #216]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fc:	0e1b      	lsrs	r3, r3, #24
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004204:	4b32      	ldr	r3, [pc, #200]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420a:	0f1b      	lsrs	r3, r3, #28
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	019a      	lsls	r2, r3, #6
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	041b      	lsls	r3, r3, #16
 800421e:	431a      	orrs	r2, r3
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	061b      	lsls	r3, r3, #24
 8004224:	431a      	orrs	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	071b      	lsls	r3, r3, #28
 800422a:	4929      	ldr	r1, [pc, #164]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d028      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800423e:	4b24      	ldr	r3, [pc, #144]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	0e1b      	lsrs	r3, r3, #24
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800424c:	4b20      	ldr	r3, [pc, #128]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004252:	0c1b      	lsrs	r3, r3, #16
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	019a      	lsls	r2, r3, #6
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	041b      	lsls	r3, r3, #16
 8004264:	431a      	orrs	r2, r3
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	061b      	lsls	r3, r3, #24
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	071b      	lsls	r3, r3, #28
 8004272:	4917      	ldr	r1, [pc, #92]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004274:	4313      	orrs	r3, r2
 8004276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800427a:	4b15      	ldr	r3, [pc, #84]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800427c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004280:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	4911      	ldr	r1, [pc, #68]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004290:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a0e      	ldr	r2, [pc, #56]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800429a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800429c:	f7fd f998 	bl	80015d0 <HAL_GetTick>
 80042a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042a4:	f7fd f994 	bl	80015d0 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b64      	cmp	r3, #100	; 0x64
 80042b0:	d901      	bls.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e007      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042b6:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042c2:	d1ef      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3720      	adds	r7, #32
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40023800 	.word	0x40023800

080042d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e049      	b.n	800437a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7fc ff34 	bl	8001168 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3304      	adds	r3, #4
 8004310:	4619      	mov	r1, r3
 8004312:	4610      	mov	r0, r2
 8004314:	f000 fd30 	bl	8004d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	d001      	beq.n	800439c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e054      	b.n	8004446 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a26      	ldr	r2, [pc, #152]	; (8004454 <HAL_TIM_Base_Start_IT+0xd0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d022      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0x80>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c6:	d01d      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0x80>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a22      	ldr	r2, [pc, #136]	; (8004458 <HAL_TIM_Base_Start_IT+0xd4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d018      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0x80>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a21      	ldr	r2, [pc, #132]	; (800445c <HAL_TIM_Base_Start_IT+0xd8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d013      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0x80>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a1f      	ldr	r2, [pc, #124]	; (8004460 <HAL_TIM_Base_Start_IT+0xdc>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00e      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0x80>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a1e      	ldr	r2, [pc, #120]	; (8004464 <HAL_TIM_Base_Start_IT+0xe0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d009      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0x80>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a1c      	ldr	r2, [pc, #112]	; (8004468 <HAL_TIM_Base_Start_IT+0xe4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d004      	beq.n	8004404 <HAL_TIM_Base_Start_IT+0x80>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a1b      	ldr	r2, [pc, #108]	; (800446c <HAL_TIM_Base_Start_IT+0xe8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d115      	bne.n	8004430 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689a      	ldr	r2, [r3, #8]
 800440a:	4b19      	ldr	r3, [pc, #100]	; (8004470 <HAL_TIM_Base_Start_IT+0xec>)
 800440c:	4013      	ands	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b06      	cmp	r3, #6
 8004414:	d015      	beq.n	8004442 <HAL_TIM_Base_Start_IT+0xbe>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441c:	d011      	beq.n	8004442 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0201 	orr.w	r2, r2, #1
 800442c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800442e:	e008      	b.n	8004442 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0201 	orr.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	e000      	b.n	8004444 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004442:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40010000 	.word	0x40010000
 8004458:	40000400 	.word	0x40000400
 800445c:	40000800 	.word	0x40000800
 8004460:	40000c00 	.word	0x40000c00
 8004464:	40010400 	.word	0x40010400
 8004468:	40014000 	.word	0x40014000
 800446c:	40001800 	.word	0x40001800
 8004470:	00010007 	.word	0x00010007

08004474 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e049      	b.n	800451a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d106      	bne.n	80044a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f841 	bl	8004522 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3304      	adds	r3, #4
 80044b0:	4619      	mov	r1, r3
 80044b2:	4610      	mov	r0, r2
 80044b4:	f000 fc60 	bl	8004d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
	...

08004538 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d109      	bne.n	800455c <HAL_TIM_PWM_Start+0x24>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b01      	cmp	r3, #1
 8004552:	bf14      	ite	ne
 8004554:	2301      	movne	r3, #1
 8004556:	2300      	moveq	r3, #0
 8004558:	b2db      	uxtb	r3, r3
 800455a:	e03c      	b.n	80045d6 <HAL_TIM_PWM_Start+0x9e>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b04      	cmp	r3, #4
 8004560:	d109      	bne.n	8004576 <HAL_TIM_PWM_Start+0x3e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b01      	cmp	r3, #1
 800456c:	bf14      	ite	ne
 800456e:	2301      	movne	r3, #1
 8004570:	2300      	moveq	r3, #0
 8004572:	b2db      	uxtb	r3, r3
 8004574:	e02f      	b.n	80045d6 <HAL_TIM_PWM_Start+0x9e>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b08      	cmp	r3, #8
 800457a:	d109      	bne.n	8004590 <HAL_TIM_PWM_Start+0x58>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b01      	cmp	r3, #1
 8004586:	bf14      	ite	ne
 8004588:	2301      	movne	r3, #1
 800458a:	2300      	moveq	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	e022      	b.n	80045d6 <HAL_TIM_PWM_Start+0x9e>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b0c      	cmp	r3, #12
 8004594:	d109      	bne.n	80045aa <HAL_TIM_PWM_Start+0x72>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b01      	cmp	r3, #1
 80045a0:	bf14      	ite	ne
 80045a2:	2301      	movne	r3, #1
 80045a4:	2300      	moveq	r3, #0
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	e015      	b.n	80045d6 <HAL_TIM_PWM_Start+0x9e>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b10      	cmp	r3, #16
 80045ae:	d109      	bne.n	80045c4 <HAL_TIM_PWM_Start+0x8c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	bf14      	ite	ne
 80045bc:	2301      	movne	r3, #1
 80045be:	2300      	moveq	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	e008      	b.n	80045d6 <HAL_TIM_PWM_Start+0x9e>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	bf14      	ite	ne
 80045d0:	2301      	movne	r3, #1
 80045d2:	2300      	moveq	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e092      	b.n	8004704 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d104      	bne.n	80045ee <HAL_TIM_PWM_Start+0xb6>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045ec:	e023      	b.n	8004636 <HAL_TIM_PWM_Start+0xfe>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d104      	bne.n	80045fe <HAL_TIM_PWM_Start+0xc6>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045fc:	e01b      	b.n	8004636 <HAL_TIM_PWM_Start+0xfe>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b08      	cmp	r3, #8
 8004602:	d104      	bne.n	800460e <HAL_TIM_PWM_Start+0xd6>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800460c:	e013      	b.n	8004636 <HAL_TIM_PWM_Start+0xfe>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b0c      	cmp	r3, #12
 8004612:	d104      	bne.n	800461e <HAL_TIM_PWM_Start+0xe6>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800461c:	e00b      	b.n	8004636 <HAL_TIM_PWM_Start+0xfe>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b10      	cmp	r3, #16
 8004622:	d104      	bne.n	800462e <HAL_TIM_PWM_Start+0xf6>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800462c:	e003      	b.n	8004636 <HAL_TIM_PWM_Start+0xfe>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2202      	movs	r2, #2
 8004632:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2201      	movs	r2, #1
 800463c:	6839      	ldr	r1, [r7, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	f000 ff32 	bl	80054a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a30      	ldr	r2, [pc, #192]	; (800470c <HAL_TIM_PWM_Start+0x1d4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d004      	beq.n	8004658 <HAL_TIM_PWM_Start+0x120>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a2f      	ldr	r2, [pc, #188]	; (8004710 <HAL_TIM_PWM_Start+0x1d8>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d101      	bne.n	800465c <HAL_TIM_PWM_Start+0x124>
 8004658:	2301      	movs	r3, #1
 800465a:	e000      	b.n	800465e <HAL_TIM_PWM_Start+0x126>
 800465c:	2300      	movs	r3, #0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d007      	beq.n	8004672 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004670:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a25      	ldr	r2, [pc, #148]	; (800470c <HAL_TIM_PWM_Start+0x1d4>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d022      	beq.n	80046c2 <HAL_TIM_PWM_Start+0x18a>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004684:	d01d      	beq.n	80046c2 <HAL_TIM_PWM_Start+0x18a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a22      	ldr	r2, [pc, #136]	; (8004714 <HAL_TIM_PWM_Start+0x1dc>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d018      	beq.n	80046c2 <HAL_TIM_PWM_Start+0x18a>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a20      	ldr	r2, [pc, #128]	; (8004718 <HAL_TIM_PWM_Start+0x1e0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d013      	beq.n	80046c2 <HAL_TIM_PWM_Start+0x18a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a1f      	ldr	r2, [pc, #124]	; (800471c <HAL_TIM_PWM_Start+0x1e4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00e      	beq.n	80046c2 <HAL_TIM_PWM_Start+0x18a>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a19      	ldr	r2, [pc, #100]	; (8004710 <HAL_TIM_PWM_Start+0x1d8>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d009      	beq.n	80046c2 <HAL_TIM_PWM_Start+0x18a>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a1b      	ldr	r2, [pc, #108]	; (8004720 <HAL_TIM_PWM_Start+0x1e8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d004      	beq.n	80046c2 <HAL_TIM_PWM_Start+0x18a>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a19      	ldr	r2, [pc, #100]	; (8004724 <HAL_TIM_PWM_Start+0x1ec>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d115      	bne.n	80046ee <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	4b17      	ldr	r3, [pc, #92]	; (8004728 <HAL_TIM_PWM_Start+0x1f0>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b06      	cmp	r3, #6
 80046d2:	d015      	beq.n	8004700 <HAL_TIM_PWM_Start+0x1c8>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046da:	d011      	beq.n	8004700 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ec:	e008      	b.n	8004700 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f042 0201 	orr.w	r2, r2, #1
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	e000      	b.n	8004702 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004700:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40010000 	.word	0x40010000
 8004710:	40010400 	.word	0x40010400
 8004714:	40000400 	.word	0x40000400
 8004718:	40000800 	.word	0x40000800
 800471c:	40000c00 	.word	0x40000c00
 8004720:	40014000 	.word	0x40014000
 8004724:	40001800 	.word	0x40001800
 8004728:	00010007 	.word	0x00010007

0800472c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b02      	cmp	r3, #2
 8004740:	d122      	bne.n	8004788 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b02      	cmp	r3, #2
 800474e:	d11b      	bne.n	8004788 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f06f 0202 	mvn.w	r2, #2
 8004758:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fae4 	bl	8004d3c <HAL_TIM_IC_CaptureCallback>
 8004774:	e005      	b.n	8004782 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fad6 	bl	8004d28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fae7 	bl	8004d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f003 0304 	and.w	r3, r3, #4
 8004792:	2b04      	cmp	r3, #4
 8004794:	d122      	bne.n	80047dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	d11b      	bne.n	80047dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f06f 0204 	mvn.w	r2, #4
 80047ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2202      	movs	r2, #2
 80047b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 faba 	bl	8004d3c <HAL_TIM_IC_CaptureCallback>
 80047c8:	e005      	b.n	80047d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 faac 	bl	8004d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 fabd 	bl	8004d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b08      	cmp	r3, #8
 80047e8:	d122      	bne.n	8004830 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d11b      	bne.n	8004830 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f06f 0208 	mvn.w	r2, #8
 8004800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2204      	movs	r2, #4
 8004806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fa90 	bl	8004d3c <HAL_TIM_IC_CaptureCallback>
 800481c:	e005      	b.n	800482a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fa82 	bl	8004d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 fa93 	bl	8004d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	f003 0310 	and.w	r3, r3, #16
 800483a:	2b10      	cmp	r3, #16
 800483c:	d122      	bne.n	8004884 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	2b10      	cmp	r3, #16
 800484a:	d11b      	bne.n	8004884 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f06f 0210 	mvn.w	r2, #16
 8004854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2208      	movs	r2, #8
 800485a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fa66 	bl	8004d3c <HAL_TIM_IC_CaptureCallback>
 8004870:	e005      	b.n	800487e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fa58 	bl	8004d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fa69 	bl	8004d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b01      	cmp	r3, #1
 8004890:	d10e      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b01      	cmp	r3, #1
 800489e:	d107      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f06f 0201 	mvn.w	r2, #1
 80048a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7fc f926 	bl	8000afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ba:	2b80      	cmp	r3, #128	; 0x80
 80048bc:	d10e      	bne.n	80048dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c8:	2b80      	cmp	r3, #128	; 0x80
 80048ca:	d107      	bne.n	80048dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fea4 	bl	8005624 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ea:	d10e      	bne.n	800490a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f6:	2b80      	cmp	r3, #128	; 0x80
 80048f8:	d107      	bne.n	800490a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 fe97 	bl	8005638 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004914:	2b40      	cmp	r3, #64	; 0x40
 8004916:	d10e      	bne.n	8004936 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004922:	2b40      	cmp	r3, #64	; 0x40
 8004924:	d107      	bne.n	8004936 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800492e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fa17 	bl	8004d64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	f003 0320 	and.w	r3, r3, #32
 8004940:	2b20      	cmp	r3, #32
 8004942:	d10e      	bne.n	8004962 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b20      	cmp	r3, #32
 8004950:	d107      	bne.n	8004962 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f06f 0220 	mvn.w	r2, #32
 800495a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fe57 	bl	8005610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004962:	bf00      	nop
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004978:	2300      	movs	r3, #0
 800497a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004986:	2302      	movs	r3, #2
 8004988:	e0ff      	b.n	8004b8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b14      	cmp	r3, #20
 8004996:	f200 80f0 	bhi.w	8004b7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800499a:	a201      	add	r2, pc, #4	; (adr r2, 80049a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800499c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a0:	080049f5 	.word	0x080049f5
 80049a4:	08004b7b 	.word	0x08004b7b
 80049a8:	08004b7b 	.word	0x08004b7b
 80049ac:	08004b7b 	.word	0x08004b7b
 80049b0:	08004a35 	.word	0x08004a35
 80049b4:	08004b7b 	.word	0x08004b7b
 80049b8:	08004b7b 	.word	0x08004b7b
 80049bc:	08004b7b 	.word	0x08004b7b
 80049c0:	08004a77 	.word	0x08004a77
 80049c4:	08004b7b 	.word	0x08004b7b
 80049c8:	08004b7b 	.word	0x08004b7b
 80049cc:	08004b7b 	.word	0x08004b7b
 80049d0:	08004ab7 	.word	0x08004ab7
 80049d4:	08004b7b 	.word	0x08004b7b
 80049d8:	08004b7b 	.word	0x08004b7b
 80049dc:	08004b7b 	.word	0x08004b7b
 80049e0:	08004af9 	.word	0x08004af9
 80049e4:	08004b7b 	.word	0x08004b7b
 80049e8:	08004b7b 	.word	0x08004b7b
 80049ec:	08004b7b 	.word	0x08004b7b
 80049f0:	08004b39 	.word	0x08004b39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68b9      	ldr	r1, [r7, #8]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 fa5c 	bl	8004eb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699a      	ldr	r2, [r3, #24]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0208 	orr.w	r2, r2, #8
 8004a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699a      	ldr	r2, [r3, #24]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0204 	bic.w	r2, r2, #4
 8004a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6999      	ldr	r1, [r3, #24]
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	619a      	str	r2, [r3, #24]
      break;
 8004a32:	e0a5      	b.n	8004b80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68b9      	ldr	r1, [r7, #8]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 faae 	bl	8004f9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699a      	ldr	r2, [r3, #24]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699a      	ldr	r2, [r3, #24]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6999      	ldr	r1, [r3, #24]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	021a      	lsls	r2, r3, #8
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	619a      	str	r2, [r3, #24]
      break;
 8004a74:	e084      	b.n	8004b80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68b9      	ldr	r1, [r7, #8]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fb05 	bl	800508c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	69da      	ldr	r2, [r3, #28]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f042 0208 	orr.w	r2, r2, #8
 8004a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69da      	ldr	r2, [r3, #28]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0204 	bic.w	r2, r2, #4
 8004aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69d9      	ldr	r1, [r3, #28]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	61da      	str	r2, [r3, #28]
      break;
 8004ab4:	e064      	b.n	8004b80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fb5b 	bl	8005178 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69da      	ldr	r2, [r3, #28]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69da      	ldr	r2, [r3, #28]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69d9      	ldr	r1, [r3, #28]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	021a      	lsls	r2, r3, #8
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	61da      	str	r2, [r3, #28]
      break;
 8004af6:	e043      	b.n	8004b80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68b9      	ldr	r1, [r7, #8]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fb92 	bl	8005228 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0208 	orr.w	r2, r2, #8
 8004b12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0204 	bic.w	r2, r2, #4
 8004b22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	691a      	ldr	r2, [r3, #16]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b36:	e023      	b.n	8004b80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68b9      	ldr	r1, [r7, #8]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fbc4 	bl	80052cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	021a      	lsls	r2, r3, #8
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b78:	e002      	b.n	8004b80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop

08004b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <HAL_TIM_ConfigClockSource+0x1c>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e0b4      	b.n	8004d1a <HAL_TIM_ConfigClockSource+0x186>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	4b56      	ldr	r3, [pc, #344]	; (8004d24 <HAL_TIM_ConfigClockSource+0x190>)
 8004bcc:	4013      	ands	r3, r2
 8004bce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be8:	d03e      	beq.n	8004c68 <HAL_TIM_ConfigClockSource+0xd4>
 8004bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bee:	f200 8087 	bhi.w	8004d00 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf6:	f000 8086 	beq.w	8004d06 <HAL_TIM_ConfigClockSource+0x172>
 8004bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfe:	d87f      	bhi.n	8004d00 <HAL_TIM_ConfigClockSource+0x16c>
 8004c00:	2b70      	cmp	r3, #112	; 0x70
 8004c02:	d01a      	beq.n	8004c3a <HAL_TIM_ConfigClockSource+0xa6>
 8004c04:	2b70      	cmp	r3, #112	; 0x70
 8004c06:	d87b      	bhi.n	8004d00 <HAL_TIM_ConfigClockSource+0x16c>
 8004c08:	2b60      	cmp	r3, #96	; 0x60
 8004c0a:	d050      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0x11a>
 8004c0c:	2b60      	cmp	r3, #96	; 0x60
 8004c0e:	d877      	bhi.n	8004d00 <HAL_TIM_ConfigClockSource+0x16c>
 8004c10:	2b50      	cmp	r3, #80	; 0x50
 8004c12:	d03c      	beq.n	8004c8e <HAL_TIM_ConfigClockSource+0xfa>
 8004c14:	2b50      	cmp	r3, #80	; 0x50
 8004c16:	d873      	bhi.n	8004d00 <HAL_TIM_ConfigClockSource+0x16c>
 8004c18:	2b40      	cmp	r3, #64	; 0x40
 8004c1a:	d058      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0x13a>
 8004c1c:	2b40      	cmp	r3, #64	; 0x40
 8004c1e:	d86f      	bhi.n	8004d00 <HAL_TIM_ConfigClockSource+0x16c>
 8004c20:	2b30      	cmp	r3, #48	; 0x30
 8004c22:	d064      	beq.n	8004cee <HAL_TIM_ConfigClockSource+0x15a>
 8004c24:	2b30      	cmp	r3, #48	; 0x30
 8004c26:	d86b      	bhi.n	8004d00 <HAL_TIM_ConfigClockSource+0x16c>
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	d060      	beq.n	8004cee <HAL_TIM_ConfigClockSource+0x15a>
 8004c2c:	2b20      	cmp	r3, #32
 8004c2e:	d867      	bhi.n	8004d00 <HAL_TIM_ConfigClockSource+0x16c>
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d05c      	beq.n	8004cee <HAL_TIM_ConfigClockSource+0x15a>
 8004c34:	2b10      	cmp	r3, #16
 8004c36:	d05a      	beq.n	8004cee <HAL_TIM_ConfigClockSource+0x15a>
 8004c38:	e062      	b.n	8004d00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	6899      	ldr	r1, [r3, #8]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f000 fc0d 	bl	8005468 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	609a      	str	r2, [r3, #8]
      break;
 8004c66:	e04f      	b.n	8004d08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6818      	ldr	r0, [r3, #0]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	6899      	ldr	r1, [r3, #8]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f000 fbf6 	bl	8005468 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c8a:	609a      	str	r2, [r3, #8]
      break;
 8004c8c:	e03c      	b.n	8004d08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6859      	ldr	r1, [r3, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f000 fb6a 	bl	8005374 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2150      	movs	r1, #80	; 0x50
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fbc3 	bl	8005432 <TIM_ITRx_SetConfig>
      break;
 8004cac:	e02c      	b.n	8004d08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6818      	ldr	r0, [r3, #0]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	6859      	ldr	r1, [r3, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f000 fb89 	bl	80053d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2160      	movs	r1, #96	; 0x60
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 fbb3 	bl	8005432 <TIM_ITRx_SetConfig>
      break;
 8004ccc:	e01c      	b.n	8004d08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6818      	ldr	r0, [r3, #0]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	6859      	ldr	r1, [r3, #4]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f000 fb4a 	bl	8005374 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2140      	movs	r1, #64	; 0x40
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 fba3 	bl	8005432 <TIM_ITRx_SetConfig>
      break;
 8004cec:	e00c      	b.n	8004d08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	f000 fb9a 	bl	8005432 <TIM_ITRx_SetConfig>
      break;
 8004cfe:	e003      	b.n	8004d08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	73fb      	strb	r3, [r7, #15]
      break;
 8004d04:	e000      	b.n	8004d08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	fffeff88 	.word	0xfffeff88

08004d28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a40      	ldr	r2, [pc, #256]	; (8004e8c <TIM_Base_SetConfig+0x114>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d013      	beq.n	8004db8 <TIM_Base_SetConfig+0x40>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d96:	d00f      	beq.n	8004db8 <TIM_Base_SetConfig+0x40>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a3d      	ldr	r2, [pc, #244]	; (8004e90 <TIM_Base_SetConfig+0x118>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d00b      	beq.n	8004db8 <TIM_Base_SetConfig+0x40>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a3c      	ldr	r2, [pc, #240]	; (8004e94 <TIM_Base_SetConfig+0x11c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d007      	beq.n	8004db8 <TIM_Base_SetConfig+0x40>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a3b      	ldr	r2, [pc, #236]	; (8004e98 <TIM_Base_SetConfig+0x120>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d003      	beq.n	8004db8 <TIM_Base_SetConfig+0x40>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a3a      	ldr	r2, [pc, #232]	; (8004e9c <TIM_Base_SetConfig+0x124>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d108      	bne.n	8004dca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a2f      	ldr	r2, [pc, #188]	; (8004e8c <TIM_Base_SetConfig+0x114>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d02b      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd8:	d027      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a2c      	ldr	r2, [pc, #176]	; (8004e90 <TIM_Base_SetConfig+0x118>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d023      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a2b      	ldr	r2, [pc, #172]	; (8004e94 <TIM_Base_SetConfig+0x11c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d01f      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a2a      	ldr	r2, [pc, #168]	; (8004e98 <TIM_Base_SetConfig+0x120>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d01b      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a29      	ldr	r2, [pc, #164]	; (8004e9c <TIM_Base_SetConfig+0x124>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d017      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a28      	ldr	r2, [pc, #160]	; (8004ea0 <TIM_Base_SetConfig+0x128>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a27      	ldr	r2, [pc, #156]	; (8004ea4 <TIM_Base_SetConfig+0x12c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00f      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a26      	ldr	r2, [pc, #152]	; (8004ea8 <TIM_Base_SetConfig+0x130>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00b      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a25      	ldr	r2, [pc, #148]	; (8004eac <TIM_Base_SetConfig+0x134>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d007      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a24      	ldr	r2, [pc, #144]	; (8004eb0 <TIM_Base_SetConfig+0x138>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d003      	beq.n	8004e2a <TIM_Base_SetConfig+0xb2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a23      	ldr	r2, [pc, #140]	; (8004eb4 <TIM_Base_SetConfig+0x13c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d108      	bne.n	8004e3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a0a      	ldr	r2, [pc, #40]	; (8004e8c <TIM_Base_SetConfig+0x114>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d003      	beq.n	8004e70 <TIM_Base_SetConfig+0xf8>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a0c      	ldr	r2, [pc, #48]	; (8004e9c <TIM_Base_SetConfig+0x124>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d103      	bne.n	8004e78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	691a      	ldr	r2, [r3, #16]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	615a      	str	r2, [r3, #20]
}
 8004e7e:	bf00      	nop
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	40010000 	.word	0x40010000
 8004e90:	40000400 	.word	0x40000400
 8004e94:	40000800 	.word	0x40000800
 8004e98:	40000c00 	.word	0x40000c00
 8004e9c:	40010400 	.word	0x40010400
 8004ea0:	40014000 	.word	0x40014000
 8004ea4:	40014400 	.word	0x40014400
 8004ea8:	40014800 	.word	0x40014800
 8004eac:	40001800 	.word	0x40001800
 8004eb0:	40001c00 	.word	0x40001c00
 8004eb4:	40002000 	.word	0x40002000

08004eb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	f023 0201 	bic.w	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	4b2b      	ldr	r3, [pc, #172]	; (8004f90 <TIM_OC1_SetConfig+0xd8>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0303 	bic.w	r3, r3, #3
 8004eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f023 0302 	bic.w	r3, r3, #2
 8004f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a21      	ldr	r2, [pc, #132]	; (8004f94 <TIM_OC1_SetConfig+0xdc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d003      	beq.n	8004f1c <TIM_OC1_SetConfig+0x64>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a20      	ldr	r2, [pc, #128]	; (8004f98 <TIM_OC1_SetConfig+0xe0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d10c      	bne.n	8004f36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f023 0308 	bic.w	r3, r3, #8
 8004f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f023 0304 	bic.w	r3, r3, #4
 8004f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a16      	ldr	r2, [pc, #88]	; (8004f94 <TIM_OC1_SetConfig+0xdc>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d003      	beq.n	8004f46 <TIM_OC1_SetConfig+0x8e>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a15      	ldr	r2, [pc, #84]	; (8004f98 <TIM_OC1_SetConfig+0xe0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d111      	bne.n	8004f6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	621a      	str	r2, [r3, #32]
}
 8004f84:	bf00      	nop
 8004f86:	371c      	adds	r7, #28
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	fffeff8f 	.word	0xfffeff8f
 8004f94:	40010000 	.word	0x40010000
 8004f98:	40010400 	.word	0x40010400

08004f9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	f023 0210 	bic.w	r2, r3, #16
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4b2e      	ldr	r3, [pc, #184]	; (8005080 <TIM_OC2_SetConfig+0xe4>)
 8004fc8:	4013      	ands	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	021b      	lsls	r3, r3, #8
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f023 0320 	bic.w	r3, r3, #32
 8004fe6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a23      	ldr	r2, [pc, #140]	; (8005084 <TIM_OC2_SetConfig+0xe8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d003      	beq.n	8005004 <TIM_OC2_SetConfig+0x68>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a22      	ldr	r2, [pc, #136]	; (8005088 <TIM_OC2_SetConfig+0xec>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d10d      	bne.n	8005020 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800500a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	4313      	orrs	r3, r2
 8005016:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800501e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a18      	ldr	r2, [pc, #96]	; (8005084 <TIM_OC2_SetConfig+0xe8>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d003      	beq.n	8005030 <TIM_OC2_SetConfig+0x94>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a17      	ldr	r2, [pc, #92]	; (8005088 <TIM_OC2_SetConfig+0xec>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d113      	bne.n	8005058 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005036:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800503e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	4313      	orrs	r3, r2
 8005056:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	621a      	str	r2, [r3, #32]
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	feff8fff 	.word	0xfeff8fff
 8005084:	40010000 	.word	0x40010000
 8005088:	40010400 	.word	0x40010400

0800508c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4b2d      	ldr	r3, [pc, #180]	; (800516c <TIM_OC3_SetConfig+0xe0>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 0303 	bic.w	r3, r3, #3
 80050c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a22      	ldr	r2, [pc, #136]	; (8005170 <TIM_OC3_SetConfig+0xe4>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d003      	beq.n	80050f2 <TIM_OC3_SetConfig+0x66>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a21      	ldr	r2, [pc, #132]	; (8005174 <TIM_OC3_SetConfig+0xe8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d10d      	bne.n	800510e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	021b      	lsls	r3, r3, #8
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	4313      	orrs	r3, r2
 8005104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800510c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a17      	ldr	r2, [pc, #92]	; (8005170 <TIM_OC3_SetConfig+0xe4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d003      	beq.n	800511e <TIM_OC3_SetConfig+0x92>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a16      	ldr	r2, [pc, #88]	; (8005174 <TIM_OC3_SetConfig+0xe8>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d113      	bne.n	8005146 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800512c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	4313      	orrs	r3, r2
 8005138:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	621a      	str	r2, [r3, #32]
}
 8005160:	bf00      	nop
 8005162:	371c      	adds	r7, #28
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	fffeff8f 	.word	0xfffeff8f
 8005170:	40010000 	.word	0x40010000
 8005174:	40010400 	.word	0x40010400

08005178 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4b1e      	ldr	r3, [pc, #120]	; (800521c <TIM_OC4_SetConfig+0xa4>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	021b      	lsls	r3, r3, #8
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	031b      	lsls	r3, r3, #12
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a13      	ldr	r2, [pc, #76]	; (8005220 <TIM_OC4_SetConfig+0xa8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d003      	beq.n	80051e0 <TIM_OC4_SetConfig+0x68>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a12      	ldr	r2, [pc, #72]	; (8005224 <TIM_OC4_SetConfig+0xac>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d109      	bne.n	80051f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	019b      	lsls	r3, r3, #6
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	621a      	str	r2, [r3, #32]
}
 800520e:	bf00      	nop
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	feff8fff 	.word	0xfeff8fff
 8005220:	40010000 	.word	0x40010000
 8005224:	40010400 	.word	0x40010400

08005228 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	4b1b      	ldr	r3, [pc, #108]	; (80052c0 <TIM_OC5_SetConfig+0x98>)
 8005254:	4013      	ands	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4313      	orrs	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005268:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	041b      	lsls	r3, r3, #16
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a12      	ldr	r2, [pc, #72]	; (80052c4 <TIM_OC5_SetConfig+0x9c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d003      	beq.n	8005286 <TIM_OC5_SetConfig+0x5e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a11      	ldr	r2, [pc, #68]	; (80052c8 <TIM_OC5_SetConfig+0xa0>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d109      	bne.n	800529a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800528c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	021b      	lsls	r3, r3, #8
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	4313      	orrs	r3, r2
 8005298:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	621a      	str	r2, [r3, #32]
}
 80052b4:	bf00      	nop
 80052b6:	371c      	adds	r7, #28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	fffeff8f 	.word	0xfffeff8f
 80052c4:	40010000 	.word	0x40010000
 80052c8:	40010400 	.word	0x40010400

080052cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	4b1c      	ldr	r3, [pc, #112]	; (8005368 <TIM_OC6_SetConfig+0x9c>)
 80052f8:	4013      	ands	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	021b      	lsls	r3, r3, #8
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800530e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	051b      	lsls	r3, r3, #20
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	4313      	orrs	r3, r2
 800531a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a13      	ldr	r2, [pc, #76]	; (800536c <TIM_OC6_SetConfig+0xa0>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d003      	beq.n	800532c <TIM_OC6_SetConfig+0x60>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a12      	ldr	r2, [pc, #72]	; (8005370 <TIM_OC6_SetConfig+0xa4>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d109      	bne.n	8005340 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005332:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	029b      	lsls	r3, r3, #10
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	621a      	str	r2, [r3, #32]
}
 800535a:	bf00      	nop
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	feff8fff 	.word	0xfeff8fff
 800536c:	40010000 	.word	0x40010000
 8005370:	40010400 	.word	0x40010400

08005374 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005374:	b480      	push	{r7}
 8005376:	b087      	sub	sp, #28
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	f023 0201 	bic.w	r2, r3, #1
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800539e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	011b      	lsls	r3, r3, #4
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f023 030a 	bic.w	r3, r3, #10
 80053b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	621a      	str	r2, [r3, #32]
}
 80053c6:	bf00      	nop
 80053c8:	371c      	adds	r7, #28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b087      	sub	sp, #28
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	f023 0210 	bic.w	r2, r3, #16
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	031b      	lsls	r3, r3, #12
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	4313      	orrs	r3, r2
 8005406:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800540e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	621a      	str	r2, [r3, #32]
}
 8005426:	bf00      	nop
 8005428:	371c      	adds	r7, #28
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005432:	b480      	push	{r7}
 8005434:	b085      	sub	sp, #20
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005448:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	f043 0307 	orr.w	r3, r3, #7
 8005454:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	609a      	str	r2, [r3, #8]
}
 800545c:	bf00      	nop
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005482:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	021a      	lsls	r2, r3, #8
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	431a      	orrs	r2, r3
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	4313      	orrs	r3, r2
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	4313      	orrs	r3, r2
 8005494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	609a      	str	r2, [r3, #8]
}
 800549c:	bf00      	nop
 800549e:	371c      	adds	r7, #28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f003 031f 	and.w	r3, r3, #31
 80054ba:	2201      	movs	r2, #1
 80054bc:	fa02 f303 	lsl.w	r3, r2, r3
 80054c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a1a      	ldr	r2, [r3, #32]
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	43db      	mvns	r3, r3
 80054ca:	401a      	ands	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a1a      	ldr	r2, [r3, #32]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f003 031f 	and.w	r3, r3, #31
 80054da:	6879      	ldr	r1, [r7, #4]
 80054dc:	fa01 f303 	lsl.w	r3, r1, r3
 80054e0:	431a      	orrs	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	621a      	str	r2, [r3, #32]
}
 80054e6:	bf00      	nop
 80054e8:	371c      	adds	r7, #28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
	...

080054f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005508:	2302      	movs	r3, #2
 800550a:	e06d      	b.n	80055e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a30      	ldr	r2, [pc, #192]	; (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d004      	beq.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a2f      	ldr	r2, [pc, #188]	; (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d108      	bne.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005546:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005558:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a20      	ldr	r2, [pc, #128]	; (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d022      	beq.n	80055bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800557e:	d01d      	beq.n	80055bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a1d      	ldr	r2, [pc, #116]	; (80055fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d018      	beq.n	80055bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a1c      	ldr	r2, [pc, #112]	; (8005600 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d013      	beq.n	80055bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a1a      	ldr	r2, [pc, #104]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d00e      	beq.n	80055bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a15      	ldr	r2, [pc, #84]	; (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d009      	beq.n	80055bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a16      	ldr	r2, [pc, #88]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d004      	beq.n	80055bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a15      	ldr	r2, [pc, #84]	; (800560c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d10c      	bne.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	40010000 	.word	0x40010000
 80055f8:	40010400 	.word	0x40010400
 80055fc:	40000400 	.word	0x40000400
 8005600:	40000800 	.word	0x40000800
 8005604:	40000c00 	.word	0x40000c00
 8005608:	40014000 	.word	0x40014000
 800560c:	40001800 	.word	0x40001800

08005610 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e040      	b.n	80056e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005662:	2b00      	cmp	r3, #0
 8005664:	d106      	bne.n	8005674 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7fb fe24 	bl	80012bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2224      	movs	r2, #36	; 0x24
 8005678:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 0201 	bic.w	r2, r2, #1
 8005688:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fbe6 	bl	8005e5c <UART_SetConfig>
 8005690:	4603      	mov	r3, r0
 8005692:	2b01      	cmp	r3, #1
 8005694:	d101      	bne.n	800569a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e022      	b.n	80056e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fe3e 	bl	8006324 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0201 	orr.w	r2, r2, #1
 80056d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fec5 	bl	8006468 <UART_CheckIdleState>
 80056de:	4603      	mov	r3, r0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b08a      	sub	sp, #40	; 0x28
 80056ec:	af02      	add	r7, sp, #8
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	603b      	str	r3, [r7, #0]
 80056f4:	4613      	mov	r3, r2
 80056f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056fc:	2b20      	cmp	r3, #32
 80056fe:	d171      	bne.n	80057e4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <HAL_UART_Transmit+0x24>
 8005706:	88fb      	ldrh	r3, [r7, #6]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e06a      	b.n	80057e6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2221      	movs	r2, #33	; 0x21
 800571c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800571e:	f7fb ff57 	bl	80015d0 <HAL_GetTick>
 8005722:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	88fa      	ldrh	r2, [r7, #6]
 8005728:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	88fa      	ldrh	r2, [r7, #6]
 8005730:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800573c:	d108      	bne.n	8005750 <HAL_UART_Transmit+0x68>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d104      	bne.n	8005750 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005746:	2300      	movs	r3, #0
 8005748:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	61bb      	str	r3, [r7, #24]
 800574e:	e003      	b.n	8005758 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005754:	2300      	movs	r3, #0
 8005756:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005758:	e02c      	b.n	80057b4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2200      	movs	r2, #0
 8005762:	2180      	movs	r1, #128	; 0x80
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 feb6 	bl	80064d6 <UART_WaitOnFlagUntilTimeout>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e038      	b.n	80057e6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10b      	bne.n	8005792 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	881b      	ldrh	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005788:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	3302      	adds	r3, #2
 800578e:	61bb      	str	r3, [r7, #24]
 8005790:	e007      	b.n	80057a2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	781a      	ldrb	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	3301      	adds	r3, #1
 80057a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3b01      	subs	r3, #1
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1cc      	bne.n	800575a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2200      	movs	r2, #0
 80057c8:	2140      	movs	r1, #64	; 0x40
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f000 fe83 	bl	80064d6 <UART_WaitOnFlagUntilTimeout>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e005      	b.n	80057e6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2220      	movs	r2, #32
 80057de:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80057e0:	2300      	movs	r3, #0
 80057e2:	e000      	b.n	80057e6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80057e4:	2302      	movs	r3, #2
  }
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3720      	adds	r7, #32
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b08a      	sub	sp, #40	; 0x28
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	4613      	mov	r3, r2
 80057fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005802:	2b20      	cmp	r3, #32
 8005804:	d132      	bne.n	800586c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <HAL_UART_Receive_IT+0x24>
 800580c:	88fb      	ldrh	r3, [r7, #6]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e02b      	b.n	800586e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d018      	beq.n	800585c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	613b      	str	r3, [r7, #16]
   return(result);
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800583e:	627b      	str	r3, [r7, #36]	; 0x24
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	461a      	mov	r2, r3
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	623b      	str	r3, [r7, #32]
 800584a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584c:	69f9      	ldr	r1, [r7, #28]
 800584e:	6a3a      	ldr	r2, [r7, #32]
 8005850:	e841 2300 	strex	r3, r2, [r1]
 8005854:	61bb      	str	r3, [r7, #24]
   return(result);
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1e6      	bne.n	800582a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800585c:	88fb      	ldrh	r3, [r7, #6]
 800585e:	461a      	mov	r2, r3
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f000 fefe 	bl	8006664 <UART_Start_Receive_IT>
 8005868:	4603      	mov	r3, r0
 800586a:	e000      	b.n	800586e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800586c:	2302      	movs	r3, #2
  }
}
 800586e:	4618      	mov	r0, r3
 8005870:	3728      	adds	r7, #40	; 0x28
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
	...

08005878 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b0ba      	sub	sp, #232	; 0xe8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800589e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80058a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80058a6:	4013      	ands	r3, r2
 80058a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80058ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d115      	bne.n	80058e0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80058b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b8:	f003 0320 	and.w	r3, r3, #32
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00f      	beq.n	80058e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058c4:	f003 0320 	and.w	r3, r3, #32
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d009      	beq.n	80058e0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 8297 	beq.w	8005e04 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	4798      	blx	r3
      }
      return;
 80058de:	e291      	b.n	8005e04 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80058e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 8117 	beq.w	8005b18 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80058ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d106      	bne.n	8005904 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80058f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80058fa:	4b85      	ldr	r3, [pc, #532]	; (8005b10 <HAL_UART_IRQHandler+0x298>)
 80058fc:	4013      	ands	r3, r2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 810a 	beq.w	8005b18 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b00      	cmp	r3, #0
 800590e:	d011      	beq.n	8005934 <HAL_UART_IRQHandler+0xbc>
 8005910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00b      	beq.n	8005934 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2201      	movs	r2, #1
 8005922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800592a:	f043 0201 	orr.w	r2, r3, #1
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d011      	beq.n	8005964 <HAL_UART_IRQHandler+0xec>
 8005940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00b      	beq.n	8005964 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2202      	movs	r2, #2
 8005952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800595a:	f043 0204 	orr.w	r2, r3, #4
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d011      	beq.n	8005994 <HAL_UART_IRQHandler+0x11c>
 8005970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00b      	beq.n	8005994 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2204      	movs	r2, #4
 8005982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800598a:	f043 0202 	orr.w	r2, r3, #2
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005998:	f003 0308 	and.w	r3, r3, #8
 800599c:	2b00      	cmp	r3, #0
 800599e:	d017      	beq.n	80059d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a4:	f003 0320 	and.w	r3, r3, #32
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d105      	bne.n	80059b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00b      	beq.n	80059d0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2208      	movs	r2, #8
 80059be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059c6:	f043 0208 	orr.w	r2, r3, #8
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d012      	beq.n	8005a02 <HAL_UART_IRQHandler+0x18a>
 80059dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00c      	beq.n	8005a02 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059f8:	f043 0220 	orr.w	r2, r3, #32
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 81fd 	beq.w	8005e08 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a12:	f003 0320 	and.w	r3, r3, #32
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00d      	beq.n	8005a36 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a1e:	f003 0320 	and.w	r3, r3, #32
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d007      	beq.n	8005a36 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4a:	2b40      	cmp	r3, #64	; 0x40
 8005a4c:	d005      	beq.n	8005a5a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d04f      	beq.n	8005afa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fec8 	bl	80067f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6a:	2b40      	cmp	r3, #64	; 0x40
 8005a6c:	d141      	bne.n	8005af2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	3308      	adds	r3, #8
 8005a74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a7c:	e853 3f00 	ldrex	r3, [r3]
 8005a80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3308      	adds	r3, #8
 8005a96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005aa6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005aaa:	e841 2300 	strex	r3, r2, [r1]
 8005aae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ab2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1d9      	bne.n	8005a6e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d013      	beq.n	8005aea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac6:	4a13      	ldr	r2, [pc, #76]	; (8005b14 <HAL_UART_IRQHandler+0x29c>)
 8005ac8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fb ff2f 	bl	8001932 <HAL_DMA_Abort_IT>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d017      	beq.n	8005b0a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ae4:	4610      	mov	r0, r2
 8005ae6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae8:	e00f      	b.n	8005b0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f9a0 	bl	8005e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af0:	e00b      	b.n	8005b0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f99c 	bl	8005e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af8:	e007      	b.n	8005b0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f998 	bl	8005e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005b08:	e17e      	b.n	8005e08 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b0a:	bf00      	nop
    return;
 8005b0c:	e17c      	b.n	8005e08 <HAL_UART_IRQHandler+0x590>
 8005b0e:	bf00      	nop
 8005b10:	04000120 	.word	0x04000120
 8005b14:	080068b9 	.word	0x080068b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	f040 814c 	bne.w	8005dba <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b26:	f003 0310 	and.w	r3, r3, #16
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 8145 	beq.w	8005dba <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b34:	f003 0310 	and.w	r3, r3, #16
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 813e 	beq.w	8005dba <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2210      	movs	r2, #16
 8005b44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b50:	2b40      	cmp	r3, #64	; 0x40
 8005b52:	f040 80b6 	bne.w	8005cc2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b62:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 8150 	beq.w	8005e0c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b76:	429a      	cmp	r2, r3
 8005b78:	f080 8148 	bcs.w	8005e0c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b90:	f000 8086 	beq.w	8005ca0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	461a      	mov	r2, r3
 8005bba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005bc2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005bca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1da      	bne.n	8005b94 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3308      	adds	r3, #8
 8005be4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005be8:	e853 3f00 	ldrex	r3, [r3]
 8005bec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bf0:	f023 0301 	bic.w	r3, r3, #1
 8005bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c0e:	e841 2300 	strex	r3, r2, [r1]
 8005c12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1e1      	bne.n	8005bde <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3308      	adds	r3, #8
 8005c20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c24:	e853 3f00 	ldrex	r3, [r3]
 8005c28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	3308      	adds	r3, #8
 8005c3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1e3      	bne.n	8005c1a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c70:	f023 0310 	bic.w	r3, r3, #16
 8005c74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c82:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c84:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c8a:	e841 2300 	strex	r3, r2, [r1]
 8005c8e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1e4      	bne.n	8005c60 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fb fdd9 	bl	8001852 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	4619      	mov	r1, r3
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f8c2 	bl	8005e44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cc0:	e0a4      	b.n	8005e0c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 8096 	beq.w	8005e10 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005ce4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 8091 	beq.w	8005e10 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf6:	e853 3f00 	ldrex	r3, [r3]
 8005cfa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cfe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d10:	647b      	str	r3, [r7, #68]	; 0x44
 8005d12:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d18:	e841 2300 	strex	r3, r2, [r1]
 8005d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1e4      	bne.n	8005cee <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	3308      	adds	r3, #8
 8005d2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	e853 3f00 	ldrex	r3, [r3]
 8005d32:	623b      	str	r3, [r7, #32]
   return(result);
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	f023 0301 	bic.w	r3, r3, #1
 8005d3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3308      	adds	r3, #8
 8005d44:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d48:	633a      	str	r2, [r7, #48]	; 0x30
 8005d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d50:	e841 2300 	strex	r3, r2, [r1]
 8005d54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1e3      	bne.n	8005d24 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f023 0310 	bic.w	r3, r3, #16
 8005d84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d92:	61fb      	str	r3, [r7, #28]
 8005d94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d96:	69b9      	ldr	r1, [r7, #24]
 8005d98:	69fa      	ldr	r2, [r7, #28]
 8005d9a:	e841 2300 	strex	r3, r2, [r1]
 8005d9e:	617b      	str	r3, [r7, #20]
   return(result);
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1e4      	bne.n	8005d70 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2202      	movs	r2, #2
 8005daa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005db0:	4619      	mov	r1, r3
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f846 	bl	8005e44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005db8:	e02a      	b.n	8005e10 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00e      	beq.n	8005de4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d008      	beq.n	8005de4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d01c      	beq.n	8005e14 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	4798      	blx	r3
    }
    return;
 8005de2:	e017      	b.n	8005e14 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d012      	beq.n	8005e16 <HAL_UART_IRQHandler+0x59e>
 8005df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00c      	beq.n	8005e16 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fd71 	bl	80068e4 <UART_EndTransmit_IT>
    return;
 8005e02:	e008      	b.n	8005e16 <HAL_UART_IRQHandler+0x59e>
      return;
 8005e04:	bf00      	nop
 8005e06:	e006      	b.n	8005e16 <HAL_UART_IRQHandler+0x59e>
    return;
 8005e08:	bf00      	nop
 8005e0a:	e004      	b.n	8005e16 <HAL_UART_IRQHandler+0x59e>
      return;
 8005e0c:	bf00      	nop
 8005e0e:	e002      	b.n	8005e16 <HAL_UART_IRQHandler+0x59e>
      return;
 8005e10:	bf00      	nop
 8005e12:	e000      	b.n	8005e16 <HAL_UART_IRQHandler+0x59e>
    return;
 8005e14:	bf00      	nop
  }

}
 8005e16:	37e8      	adds	r7, #232	; 0xe8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e64:	2300      	movs	r3, #0
 8005e66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	431a      	orrs	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	431a      	orrs	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	4ba6      	ldr	r3, [pc, #664]	; (8006120 <UART_SetConfig+0x2c4>)
 8005e88:	4013      	ands	r3, r2
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	6812      	ldr	r2, [r2, #0]
 8005e8e:	6979      	ldr	r1, [r7, #20]
 8005e90:	430b      	orrs	r3, r1
 8005e92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68da      	ldr	r2, [r3, #12]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a94      	ldr	r2, [pc, #592]	; (8006124 <UART_SetConfig+0x2c8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d120      	bne.n	8005f1a <UART_SetConfig+0xbe>
 8005ed8:	4b93      	ldr	r3, [pc, #588]	; (8006128 <UART_SetConfig+0x2cc>)
 8005eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ede:	f003 0303 	and.w	r3, r3, #3
 8005ee2:	2b03      	cmp	r3, #3
 8005ee4:	d816      	bhi.n	8005f14 <UART_SetConfig+0xb8>
 8005ee6:	a201      	add	r2, pc, #4	; (adr r2, 8005eec <UART_SetConfig+0x90>)
 8005ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eec:	08005efd 	.word	0x08005efd
 8005ef0:	08005f09 	.word	0x08005f09
 8005ef4:	08005f03 	.word	0x08005f03
 8005ef8:	08005f0f 	.word	0x08005f0f
 8005efc:	2301      	movs	r3, #1
 8005efe:	77fb      	strb	r3, [r7, #31]
 8005f00:	e150      	b.n	80061a4 <UART_SetConfig+0x348>
 8005f02:	2302      	movs	r3, #2
 8005f04:	77fb      	strb	r3, [r7, #31]
 8005f06:	e14d      	b.n	80061a4 <UART_SetConfig+0x348>
 8005f08:	2304      	movs	r3, #4
 8005f0a:	77fb      	strb	r3, [r7, #31]
 8005f0c:	e14a      	b.n	80061a4 <UART_SetConfig+0x348>
 8005f0e:	2308      	movs	r3, #8
 8005f10:	77fb      	strb	r3, [r7, #31]
 8005f12:	e147      	b.n	80061a4 <UART_SetConfig+0x348>
 8005f14:	2310      	movs	r3, #16
 8005f16:	77fb      	strb	r3, [r7, #31]
 8005f18:	e144      	b.n	80061a4 <UART_SetConfig+0x348>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a83      	ldr	r2, [pc, #524]	; (800612c <UART_SetConfig+0x2d0>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d132      	bne.n	8005f8a <UART_SetConfig+0x12e>
 8005f24:	4b80      	ldr	r3, [pc, #512]	; (8006128 <UART_SetConfig+0x2cc>)
 8005f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2a:	f003 030c 	and.w	r3, r3, #12
 8005f2e:	2b0c      	cmp	r3, #12
 8005f30:	d828      	bhi.n	8005f84 <UART_SetConfig+0x128>
 8005f32:	a201      	add	r2, pc, #4	; (adr r2, 8005f38 <UART_SetConfig+0xdc>)
 8005f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f38:	08005f6d 	.word	0x08005f6d
 8005f3c:	08005f85 	.word	0x08005f85
 8005f40:	08005f85 	.word	0x08005f85
 8005f44:	08005f85 	.word	0x08005f85
 8005f48:	08005f79 	.word	0x08005f79
 8005f4c:	08005f85 	.word	0x08005f85
 8005f50:	08005f85 	.word	0x08005f85
 8005f54:	08005f85 	.word	0x08005f85
 8005f58:	08005f73 	.word	0x08005f73
 8005f5c:	08005f85 	.word	0x08005f85
 8005f60:	08005f85 	.word	0x08005f85
 8005f64:	08005f85 	.word	0x08005f85
 8005f68:	08005f7f 	.word	0x08005f7f
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	77fb      	strb	r3, [r7, #31]
 8005f70:	e118      	b.n	80061a4 <UART_SetConfig+0x348>
 8005f72:	2302      	movs	r3, #2
 8005f74:	77fb      	strb	r3, [r7, #31]
 8005f76:	e115      	b.n	80061a4 <UART_SetConfig+0x348>
 8005f78:	2304      	movs	r3, #4
 8005f7a:	77fb      	strb	r3, [r7, #31]
 8005f7c:	e112      	b.n	80061a4 <UART_SetConfig+0x348>
 8005f7e:	2308      	movs	r3, #8
 8005f80:	77fb      	strb	r3, [r7, #31]
 8005f82:	e10f      	b.n	80061a4 <UART_SetConfig+0x348>
 8005f84:	2310      	movs	r3, #16
 8005f86:	77fb      	strb	r3, [r7, #31]
 8005f88:	e10c      	b.n	80061a4 <UART_SetConfig+0x348>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a68      	ldr	r2, [pc, #416]	; (8006130 <UART_SetConfig+0x2d4>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d120      	bne.n	8005fd6 <UART_SetConfig+0x17a>
 8005f94:	4b64      	ldr	r3, [pc, #400]	; (8006128 <UART_SetConfig+0x2cc>)
 8005f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f9e:	2b30      	cmp	r3, #48	; 0x30
 8005fa0:	d013      	beq.n	8005fca <UART_SetConfig+0x16e>
 8005fa2:	2b30      	cmp	r3, #48	; 0x30
 8005fa4:	d814      	bhi.n	8005fd0 <UART_SetConfig+0x174>
 8005fa6:	2b20      	cmp	r3, #32
 8005fa8:	d009      	beq.n	8005fbe <UART_SetConfig+0x162>
 8005faa:	2b20      	cmp	r3, #32
 8005fac:	d810      	bhi.n	8005fd0 <UART_SetConfig+0x174>
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <UART_SetConfig+0x15c>
 8005fb2:	2b10      	cmp	r3, #16
 8005fb4:	d006      	beq.n	8005fc4 <UART_SetConfig+0x168>
 8005fb6:	e00b      	b.n	8005fd0 <UART_SetConfig+0x174>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	77fb      	strb	r3, [r7, #31]
 8005fbc:	e0f2      	b.n	80061a4 <UART_SetConfig+0x348>
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	77fb      	strb	r3, [r7, #31]
 8005fc2:	e0ef      	b.n	80061a4 <UART_SetConfig+0x348>
 8005fc4:	2304      	movs	r3, #4
 8005fc6:	77fb      	strb	r3, [r7, #31]
 8005fc8:	e0ec      	b.n	80061a4 <UART_SetConfig+0x348>
 8005fca:	2308      	movs	r3, #8
 8005fcc:	77fb      	strb	r3, [r7, #31]
 8005fce:	e0e9      	b.n	80061a4 <UART_SetConfig+0x348>
 8005fd0:	2310      	movs	r3, #16
 8005fd2:	77fb      	strb	r3, [r7, #31]
 8005fd4:	e0e6      	b.n	80061a4 <UART_SetConfig+0x348>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a56      	ldr	r2, [pc, #344]	; (8006134 <UART_SetConfig+0x2d8>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d120      	bne.n	8006022 <UART_SetConfig+0x1c6>
 8005fe0:	4b51      	ldr	r3, [pc, #324]	; (8006128 <UART_SetConfig+0x2cc>)
 8005fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005fea:	2bc0      	cmp	r3, #192	; 0xc0
 8005fec:	d013      	beq.n	8006016 <UART_SetConfig+0x1ba>
 8005fee:	2bc0      	cmp	r3, #192	; 0xc0
 8005ff0:	d814      	bhi.n	800601c <UART_SetConfig+0x1c0>
 8005ff2:	2b80      	cmp	r3, #128	; 0x80
 8005ff4:	d009      	beq.n	800600a <UART_SetConfig+0x1ae>
 8005ff6:	2b80      	cmp	r3, #128	; 0x80
 8005ff8:	d810      	bhi.n	800601c <UART_SetConfig+0x1c0>
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <UART_SetConfig+0x1a8>
 8005ffe:	2b40      	cmp	r3, #64	; 0x40
 8006000:	d006      	beq.n	8006010 <UART_SetConfig+0x1b4>
 8006002:	e00b      	b.n	800601c <UART_SetConfig+0x1c0>
 8006004:	2300      	movs	r3, #0
 8006006:	77fb      	strb	r3, [r7, #31]
 8006008:	e0cc      	b.n	80061a4 <UART_SetConfig+0x348>
 800600a:	2302      	movs	r3, #2
 800600c:	77fb      	strb	r3, [r7, #31]
 800600e:	e0c9      	b.n	80061a4 <UART_SetConfig+0x348>
 8006010:	2304      	movs	r3, #4
 8006012:	77fb      	strb	r3, [r7, #31]
 8006014:	e0c6      	b.n	80061a4 <UART_SetConfig+0x348>
 8006016:	2308      	movs	r3, #8
 8006018:	77fb      	strb	r3, [r7, #31]
 800601a:	e0c3      	b.n	80061a4 <UART_SetConfig+0x348>
 800601c:	2310      	movs	r3, #16
 800601e:	77fb      	strb	r3, [r7, #31]
 8006020:	e0c0      	b.n	80061a4 <UART_SetConfig+0x348>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a44      	ldr	r2, [pc, #272]	; (8006138 <UART_SetConfig+0x2dc>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d125      	bne.n	8006078 <UART_SetConfig+0x21c>
 800602c:	4b3e      	ldr	r3, [pc, #248]	; (8006128 <UART_SetConfig+0x2cc>)
 800602e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006036:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800603a:	d017      	beq.n	800606c <UART_SetConfig+0x210>
 800603c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006040:	d817      	bhi.n	8006072 <UART_SetConfig+0x216>
 8006042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006046:	d00b      	beq.n	8006060 <UART_SetConfig+0x204>
 8006048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800604c:	d811      	bhi.n	8006072 <UART_SetConfig+0x216>
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <UART_SetConfig+0x1fe>
 8006052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006056:	d006      	beq.n	8006066 <UART_SetConfig+0x20a>
 8006058:	e00b      	b.n	8006072 <UART_SetConfig+0x216>
 800605a:	2300      	movs	r3, #0
 800605c:	77fb      	strb	r3, [r7, #31]
 800605e:	e0a1      	b.n	80061a4 <UART_SetConfig+0x348>
 8006060:	2302      	movs	r3, #2
 8006062:	77fb      	strb	r3, [r7, #31]
 8006064:	e09e      	b.n	80061a4 <UART_SetConfig+0x348>
 8006066:	2304      	movs	r3, #4
 8006068:	77fb      	strb	r3, [r7, #31]
 800606a:	e09b      	b.n	80061a4 <UART_SetConfig+0x348>
 800606c:	2308      	movs	r3, #8
 800606e:	77fb      	strb	r3, [r7, #31]
 8006070:	e098      	b.n	80061a4 <UART_SetConfig+0x348>
 8006072:	2310      	movs	r3, #16
 8006074:	77fb      	strb	r3, [r7, #31]
 8006076:	e095      	b.n	80061a4 <UART_SetConfig+0x348>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a2f      	ldr	r2, [pc, #188]	; (800613c <UART_SetConfig+0x2e0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d125      	bne.n	80060ce <UART_SetConfig+0x272>
 8006082:	4b29      	ldr	r3, [pc, #164]	; (8006128 <UART_SetConfig+0x2cc>)
 8006084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006088:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800608c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006090:	d017      	beq.n	80060c2 <UART_SetConfig+0x266>
 8006092:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006096:	d817      	bhi.n	80060c8 <UART_SetConfig+0x26c>
 8006098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800609c:	d00b      	beq.n	80060b6 <UART_SetConfig+0x25a>
 800609e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060a2:	d811      	bhi.n	80060c8 <UART_SetConfig+0x26c>
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d003      	beq.n	80060b0 <UART_SetConfig+0x254>
 80060a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ac:	d006      	beq.n	80060bc <UART_SetConfig+0x260>
 80060ae:	e00b      	b.n	80060c8 <UART_SetConfig+0x26c>
 80060b0:	2301      	movs	r3, #1
 80060b2:	77fb      	strb	r3, [r7, #31]
 80060b4:	e076      	b.n	80061a4 <UART_SetConfig+0x348>
 80060b6:	2302      	movs	r3, #2
 80060b8:	77fb      	strb	r3, [r7, #31]
 80060ba:	e073      	b.n	80061a4 <UART_SetConfig+0x348>
 80060bc:	2304      	movs	r3, #4
 80060be:	77fb      	strb	r3, [r7, #31]
 80060c0:	e070      	b.n	80061a4 <UART_SetConfig+0x348>
 80060c2:	2308      	movs	r3, #8
 80060c4:	77fb      	strb	r3, [r7, #31]
 80060c6:	e06d      	b.n	80061a4 <UART_SetConfig+0x348>
 80060c8:	2310      	movs	r3, #16
 80060ca:	77fb      	strb	r3, [r7, #31]
 80060cc:	e06a      	b.n	80061a4 <UART_SetConfig+0x348>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a1b      	ldr	r2, [pc, #108]	; (8006140 <UART_SetConfig+0x2e4>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d138      	bne.n	800614a <UART_SetConfig+0x2ee>
 80060d8:	4b13      	ldr	r3, [pc, #76]	; (8006128 <UART_SetConfig+0x2cc>)
 80060da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80060e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060e6:	d017      	beq.n	8006118 <UART_SetConfig+0x2bc>
 80060e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060ec:	d82a      	bhi.n	8006144 <UART_SetConfig+0x2e8>
 80060ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060f2:	d00b      	beq.n	800610c <UART_SetConfig+0x2b0>
 80060f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060f8:	d824      	bhi.n	8006144 <UART_SetConfig+0x2e8>
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <UART_SetConfig+0x2aa>
 80060fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006102:	d006      	beq.n	8006112 <UART_SetConfig+0x2b6>
 8006104:	e01e      	b.n	8006144 <UART_SetConfig+0x2e8>
 8006106:	2300      	movs	r3, #0
 8006108:	77fb      	strb	r3, [r7, #31]
 800610a:	e04b      	b.n	80061a4 <UART_SetConfig+0x348>
 800610c:	2302      	movs	r3, #2
 800610e:	77fb      	strb	r3, [r7, #31]
 8006110:	e048      	b.n	80061a4 <UART_SetConfig+0x348>
 8006112:	2304      	movs	r3, #4
 8006114:	77fb      	strb	r3, [r7, #31]
 8006116:	e045      	b.n	80061a4 <UART_SetConfig+0x348>
 8006118:	2308      	movs	r3, #8
 800611a:	77fb      	strb	r3, [r7, #31]
 800611c:	e042      	b.n	80061a4 <UART_SetConfig+0x348>
 800611e:	bf00      	nop
 8006120:	efff69f3 	.word	0xefff69f3
 8006124:	40011000 	.word	0x40011000
 8006128:	40023800 	.word	0x40023800
 800612c:	40004400 	.word	0x40004400
 8006130:	40004800 	.word	0x40004800
 8006134:	40004c00 	.word	0x40004c00
 8006138:	40005000 	.word	0x40005000
 800613c:	40011400 	.word	0x40011400
 8006140:	40007800 	.word	0x40007800
 8006144:	2310      	movs	r3, #16
 8006146:	77fb      	strb	r3, [r7, #31]
 8006148:	e02c      	b.n	80061a4 <UART_SetConfig+0x348>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a72      	ldr	r2, [pc, #456]	; (8006318 <UART_SetConfig+0x4bc>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d125      	bne.n	80061a0 <UART_SetConfig+0x344>
 8006154:	4b71      	ldr	r3, [pc, #452]	; (800631c <UART_SetConfig+0x4c0>)
 8006156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800615a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800615e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006162:	d017      	beq.n	8006194 <UART_SetConfig+0x338>
 8006164:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006168:	d817      	bhi.n	800619a <UART_SetConfig+0x33e>
 800616a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800616e:	d00b      	beq.n	8006188 <UART_SetConfig+0x32c>
 8006170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006174:	d811      	bhi.n	800619a <UART_SetConfig+0x33e>
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <UART_SetConfig+0x326>
 800617a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800617e:	d006      	beq.n	800618e <UART_SetConfig+0x332>
 8006180:	e00b      	b.n	800619a <UART_SetConfig+0x33e>
 8006182:	2300      	movs	r3, #0
 8006184:	77fb      	strb	r3, [r7, #31]
 8006186:	e00d      	b.n	80061a4 <UART_SetConfig+0x348>
 8006188:	2302      	movs	r3, #2
 800618a:	77fb      	strb	r3, [r7, #31]
 800618c:	e00a      	b.n	80061a4 <UART_SetConfig+0x348>
 800618e:	2304      	movs	r3, #4
 8006190:	77fb      	strb	r3, [r7, #31]
 8006192:	e007      	b.n	80061a4 <UART_SetConfig+0x348>
 8006194:	2308      	movs	r3, #8
 8006196:	77fb      	strb	r3, [r7, #31]
 8006198:	e004      	b.n	80061a4 <UART_SetConfig+0x348>
 800619a:	2310      	movs	r3, #16
 800619c:	77fb      	strb	r3, [r7, #31]
 800619e:	e001      	b.n	80061a4 <UART_SetConfig+0x348>
 80061a0:	2310      	movs	r3, #16
 80061a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	69db      	ldr	r3, [r3, #28]
 80061a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ac:	d15b      	bne.n	8006266 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80061ae:	7ffb      	ldrb	r3, [r7, #31]
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	d828      	bhi.n	8006206 <UART_SetConfig+0x3aa>
 80061b4:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <UART_SetConfig+0x360>)
 80061b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ba:	bf00      	nop
 80061bc:	080061e1 	.word	0x080061e1
 80061c0:	080061e9 	.word	0x080061e9
 80061c4:	080061f1 	.word	0x080061f1
 80061c8:	08006207 	.word	0x08006207
 80061cc:	080061f7 	.word	0x080061f7
 80061d0:	08006207 	.word	0x08006207
 80061d4:	08006207 	.word	0x08006207
 80061d8:	08006207 	.word	0x08006207
 80061dc:	080061ff 	.word	0x080061ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061e0:	f7fd fc60 	bl	8003aa4 <HAL_RCC_GetPCLK1Freq>
 80061e4:	61b8      	str	r0, [r7, #24]
        break;
 80061e6:	e013      	b.n	8006210 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061e8:	f7fd fc70 	bl	8003acc <HAL_RCC_GetPCLK2Freq>
 80061ec:	61b8      	str	r0, [r7, #24]
        break;
 80061ee:	e00f      	b.n	8006210 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061f0:	4b4b      	ldr	r3, [pc, #300]	; (8006320 <UART_SetConfig+0x4c4>)
 80061f2:	61bb      	str	r3, [r7, #24]
        break;
 80061f4:	e00c      	b.n	8006210 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061f6:	f7fd fb43 	bl	8003880 <HAL_RCC_GetSysClockFreq>
 80061fa:	61b8      	str	r0, [r7, #24]
        break;
 80061fc:	e008      	b.n	8006210 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006202:	61bb      	str	r3, [r7, #24]
        break;
 8006204:	e004      	b.n	8006210 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	77bb      	strb	r3, [r7, #30]
        break;
 800620e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d074      	beq.n	8006300 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	005a      	lsls	r2, r3, #1
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	085b      	lsrs	r3, r3, #1
 8006220:	441a      	add	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	fbb2 f3f3 	udiv	r3, r2, r3
 800622a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	2b0f      	cmp	r3, #15
 8006230:	d916      	bls.n	8006260 <UART_SetConfig+0x404>
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006238:	d212      	bcs.n	8006260 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	b29b      	uxth	r3, r3
 800623e:	f023 030f 	bic.w	r3, r3, #15
 8006242:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	085b      	lsrs	r3, r3, #1
 8006248:	b29b      	uxth	r3, r3
 800624a:	f003 0307 	and.w	r3, r3, #7
 800624e:	b29a      	uxth	r2, r3
 8006250:	89fb      	ldrh	r3, [r7, #14]
 8006252:	4313      	orrs	r3, r2
 8006254:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	89fa      	ldrh	r2, [r7, #14]
 800625c:	60da      	str	r2, [r3, #12]
 800625e:	e04f      	b.n	8006300 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	77bb      	strb	r3, [r7, #30]
 8006264:	e04c      	b.n	8006300 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006266:	7ffb      	ldrb	r3, [r7, #31]
 8006268:	2b08      	cmp	r3, #8
 800626a:	d828      	bhi.n	80062be <UART_SetConfig+0x462>
 800626c:	a201      	add	r2, pc, #4	; (adr r2, 8006274 <UART_SetConfig+0x418>)
 800626e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006272:	bf00      	nop
 8006274:	08006299 	.word	0x08006299
 8006278:	080062a1 	.word	0x080062a1
 800627c:	080062a9 	.word	0x080062a9
 8006280:	080062bf 	.word	0x080062bf
 8006284:	080062af 	.word	0x080062af
 8006288:	080062bf 	.word	0x080062bf
 800628c:	080062bf 	.word	0x080062bf
 8006290:	080062bf 	.word	0x080062bf
 8006294:	080062b7 	.word	0x080062b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006298:	f7fd fc04 	bl	8003aa4 <HAL_RCC_GetPCLK1Freq>
 800629c:	61b8      	str	r0, [r7, #24]
        break;
 800629e:	e013      	b.n	80062c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062a0:	f7fd fc14 	bl	8003acc <HAL_RCC_GetPCLK2Freq>
 80062a4:	61b8      	str	r0, [r7, #24]
        break;
 80062a6:	e00f      	b.n	80062c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062a8:	4b1d      	ldr	r3, [pc, #116]	; (8006320 <UART_SetConfig+0x4c4>)
 80062aa:	61bb      	str	r3, [r7, #24]
        break;
 80062ac:	e00c      	b.n	80062c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ae:	f7fd fae7 	bl	8003880 <HAL_RCC_GetSysClockFreq>
 80062b2:	61b8      	str	r0, [r7, #24]
        break;
 80062b4:	e008      	b.n	80062c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ba:	61bb      	str	r3, [r7, #24]
        break;
 80062bc:	e004      	b.n	80062c8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	77bb      	strb	r3, [r7, #30]
        break;
 80062c6:	bf00      	nop
    }

    if (pclk != 0U)
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d018      	beq.n	8006300 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	085a      	lsrs	r2, r3, #1
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	441a      	add	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	2b0f      	cmp	r3, #15
 80062e6:	d909      	bls.n	80062fc <UART_SetConfig+0x4a0>
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ee:	d205      	bcs.n	80062fc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	60da      	str	r2, [r3, #12]
 80062fa:	e001      	b.n	8006300 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800630c:	7fbb      	ldrb	r3, [r7, #30]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3720      	adds	r7, #32
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	40007c00 	.word	0x40007c00
 800631c:	40023800 	.word	0x40023800
 8006320:	00f42400 	.word	0x00f42400

08006324 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00a      	beq.n	800634e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006352:	f003 0302 	and.w	r3, r3, #2
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00a      	beq.n	8006370 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00a      	beq.n	8006392 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	430a      	orrs	r2, r1
 8006390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	f003 0308 	and.w	r3, r3, #8
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00a      	beq.n	80063b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	430a      	orrs	r2, r1
 80063b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	f003 0310 	and.w	r3, r3, #16
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00a      	beq.n	80063d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	430a      	orrs	r2, r1
 80063d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	f003 0320 	and.w	r3, r3, #32
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00a      	beq.n	80063f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006400:	2b00      	cmp	r3, #0
 8006402:	d01a      	beq.n	800643a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006422:	d10a      	bne.n	800643a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	605a      	str	r2, [r3, #4]
  }
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b086      	sub	sp, #24
 800646c:	af02      	add	r7, sp, #8
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006478:	f7fb f8aa 	bl	80015d0 <HAL_GetTick>
 800647c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0308 	and.w	r3, r3, #8
 8006488:	2b08      	cmp	r3, #8
 800648a:	d10e      	bne.n	80064aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800648c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f81b 	bl	80064d6 <UART_WaitOnFlagUntilTimeout>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e011      	b.n	80064ce <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2220      	movs	r2, #32
 80064b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b09c      	sub	sp, #112	; 0x70
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	603b      	str	r3, [r7, #0]
 80064e2:	4613      	mov	r3, r2
 80064e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e6:	e0a7      	b.n	8006638 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ee:	f000 80a3 	beq.w	8006638 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064f2:	f7fb f86d 	bl	80015d0 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80064fe:	429a      	cmp	r2, r3
 8006500:	d302      	bcc.n	8006508 <UART_WaitOnFlagUntilTimeout+0x32>
 8006502:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006504:	2b00      	cmp	r3, #0
 8006506:	d13f      	bne.n	8006588 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006510:	e853 3f00 	ldrex	r3, [r3]
 8006514:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006518:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800651c:	667b      	str	r3, [r7, #100]	; 0x64
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006526:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006528:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800652c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800652e:	e841 2300 	strex	r3, r2, [r1]
 8006532:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1e6      	bne.n	8006508 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	3308      	adds	r3, #8
 8006540:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006544:	e853 3f00 	ldrex	r3, [r3]
 8006548:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800654a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654c:	f023 0301 	bic.w	r3, r3, #1
 8006550:	663b      	str	r3, [r7, #96]	; 0x60
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3308      	adds	r3, #8
 8006558:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800655a:	64ba      	str	r2, [r7, #72]	; 0x48
 800655c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006560:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006562:	e841 2300 	strex	r3, r2, [r1]
 8006566:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1e5      	bne.n	800653a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2220      	movs	r2, #32
 8006572:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2220      	movs	r2, #32
 8006578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e068      	b.n	800665a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0304 	and.w	r3, r3, #4
 8006592:	2b00      	cmp	r3, #0
 8006594:	d050      	beq.n	8006638 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065a4:	d148      	bne.n	8006638 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065ae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b8:	e853 3f00 	ldrex	r3, [r3]
 80065bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	461a      	mov	r2, r3
 80065cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ce:	637b      	str	r3, [r7, #52]	; 0x34
 80065d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065d6:	e841 2300 	strex	r3, r2, [r1]
 80065da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1e6      	bne.n	80065b0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3308      	adds	r3, #8
 80065e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	e853 3f00 	ldrex	r3, [r3]
 80065f0:	613b      	str	r3, [r7, #16]
   return(result);
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	f023 0301 	bic.w	r3, r3, #1
 80065f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	3308      	adds	r3, #8
 8006600:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006602:	623a      	str	r2, [r7, #32]
 8006604:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006606:	69f9      	ldr	r1, [r7, #28]
 8006608:	6a3a      	ldr	r2, [r7, #32]
 800660a:	e841 2300 	strex	r3, r2, [r1]
 800660e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1e5      	bne.n	80065e2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2220      	movs	r2, #32
 800661a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2220      	movs	r2, #32
 8006620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2220      	movs	r2, #32
 8006628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e010      	b.n	800665a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	69da      	ldr	r2, [r3, #28]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	4013      	ands	r3, r2
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	429a      	cmp	r2, r3
 8006646:	bf0c      	ite	eq
 8006648:	2301      	moveq	r3, #1
 800664a:	2300      	movne	r3, #0
 800664c:	b2db      	uxtb	r3, r3
 800664e:	461a      	mov	r2, r3
 8006650:	79fb      	ldrb	r3, [r7, #7]
 8006652:	429a      	cmp	r2, r3
 8006654:	f43f af48 	beq.w	80064e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3770      	adds	r7, #112	; 0x70
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
	...

08006664 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006664:	b480      	push	{r7}
 8006666:	b097      	sub	sp, #92	; 0x5c
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	4613      	mov	r3, r2
 8006670:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	88fa      	ldrh	r2, [r7, #6]
 800667c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	88fa      	ldrh	r2, [r7, #6]
 8006684:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006696:	d10e      	bne.n	80066b6 <UART_Start_Receive_IT+0x52>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d105      	bne.n	80066ac <UART_Start_Receive_IT+0x48>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80066a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066aa:	e02d      	b.n	8006708 <UART_Start_Receive_IT+0xa4>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	22ff      	movs	r2, #255	; 0xff
 80066b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066b4:	e028      	b.n	8006708 <UART_Start_Receive_IT+0xa4>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10d      	bne.n	80066da <UART_Start_Receive_IT+0x76>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d104      	bne.n	80066d0 <UART_Start_Receive_IT+0x6c>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	22ff      	movs	r2, #255	; 0xff
 80066ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066ce:	e01b      	b.n	8006708 <UART_Start_Receive_IT+0xa4>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	227f      	movs	r2, #127	; 0x7f
 80066d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066d8:	e016      	b.n	8006708 <UART_Start_Receive_IT+0xa4>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066e2:	d10d      	bne.n	8006700 <UART_Start_Receive_IT+0x9c>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d104      	bne.n	80066f6 <UART_Start_Receive_IT+0x92>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	227f      	movs	r2, #127	; 0x7f
 80066f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066f4:	e008      	b.n	8006708 <UART_Start_Receive_IT+0xa4>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	223f      	movs	r2, #63	; 0x3f
 80066fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066fe:	e003      	b.n	8006708 <UART_Start_Receive_IT+0xa4>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2222      	movs	r2, #34	; 0x22
 8006714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3308      	adds	r3, #8
 800671e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006722:	e853 3f00 	ldrex	r3, [r3]
 8006726:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	f043 0301 	orr.w	r3, r3, #1
 800672e:	657b      	str	r3, [r7, #84]	; 0x54
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3308      	adds	r3, #8
 8006736:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006738:	64ba      	str	r2, [r7, #72]	; 0x48
 800673a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800673e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006740:	e841 2300 	strex	r3, r2, [r1]
 8006744:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1e5      	bne.n	8006718 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006754:	d107      	bne.n	8006766 <UART_Start_Receive_IT+0x102>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d103      	bne.n	8006766 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4a21      	ldr	r2, [pc, #132]	; (80067e8 <UART_Start_Receive_IT+0x184>)
 8006762:	669a      	str	r2, [r3, #104]	; 0x68
 8006764:	e002      	b.n	800676c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4a20      	ldr	r2, [pc, #128]	; (80067ec <UART_Start_Receive_IT+0x188>)
 800676a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d019      	beq.n	80067a8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677c:	e853 3f00 	ldrex	r3, [r3]
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006788:	64fb      	str	r3, [r7, #76]	; 0x4c
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006792:	637b      	str	r3, [r7, #52]	; 0x34
 8006794:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006796:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006798:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800679a:	e841 2300 	strex	r3, r2, [r1]
 800679e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1e6      	bne.n	8006774 <UART_Start_Receive_IT+0x110>
 80067a6:	e018      	b.n	80067da <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	e853 3f00 	ldrex	r3, [r3]
 80067b4:	613b      	str	r3, [r7, #16]
   return(result);
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f043 0320 	orr.w	r3, r3, #32
 80067bc:	653b      	str	r3, [r7, #80]	; 0x50
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	461a      	mov	r2, r3
 80067c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067c6:	623b      	str	r3, [r7, #32]
 80067c8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ca:	69f9      	ldr	r1, [r7, #28]
 80067cc:	6a3a      	ldr	r2, [r7, #32]
 80067ce:	e841 2300 	strex	r3, r2, [r1]
 80067d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e6      	bne.n	80067a8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	375c      	adds	r7, #92	; 0x5c
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	08006a9f 	.word	0x08006a9f
 80067ec:	08006939 	.word	0x08006939

080067f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b095      	sub	sp, #84	; 0x54
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006800:	e853 3f00 	ldrex	r3, [r3]
 8006804:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006808:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800680c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	461a      	mov	r2, r3
 8006814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006816:	643b      	str	r3, [r7, #64]	; 0x40
 8006818:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800681c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800681e:	e841 2300 	strex	r3, r2, [r1]
 8006822:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1e6      	bne.n	80067f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3308      	adds	r3, #8
 8006830:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	e853 3f00 	ldrex	r3, [r3]
 8006838:	61fb      	str	r3, [r7, #28]
   return(result);
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	f023 0301 	bic.w	r3, r3, #1
 8006840:	64bb      	str	r3, [r7, #72]	; 0x48
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3308      	adds	r3, #8
 8006848:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800684a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800684c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006852:	e841 2300 	strex	r3, r2, [r1]
 8006856:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1e5      	bne.n	800682a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006862:	2b01      	cmp	r3, #1
 8006864:	d118      	bne.n	8006898 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	e853 3f00 	ldrex	r3, [r3]
 8006872:	60bb      	str	r3, [r7, #8]
   return(result);
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f023 0310 	bic.w	r3, r3, #16
 800687a:	647b      	str	r3, [r7, #68]	; 0x44
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	461a      	mov	r2, r3
 8006882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006884:	61bb      	str	r3, [r7, #24]
 8006886:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006888:	6979      	ldr	r1, [r7, #20]
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	e841 2300 	strex	r3, r2, [r1]
 8006890:	613b      	str	r3, [r7, #16]
   return(result);
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1e6      	bne.n	8006866 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2220      	movs	r2, #32
 800689c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80068ac:	bf00      	nop
 80068ae:	3754      	adds	r7, #84	; 0x54
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f7ff faaa 	bl	8005e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068dc:	bf00      	nop
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b088      	sub	sp, #32
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	e853 3f00 	ldrex	r3, [r3]
 80068f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006900:	61fb      	str	r3, [r7, #28]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	461a      	mov	r2, r3
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	61bb      	str	r3, [r7, #24]
 800690c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690e:	6979      	ldr	r1, [r7, #20]
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	e841 2300 	strex	r3, r2, [r1]
 8006916:	613b      	str	r3, [r7, #16]
   return(result);
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1e6      	bne.n	80068ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2220      	movs	r2, #32
 8006922:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7ff fa76 	bl	8005e1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006930:	bf00      	nop
 8006932:	3720      	adds	r7, #32
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b096      	sub	sp, #88	; 0x58
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006946:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006950:	2b22      	cmp	r3, #34	; 0x22
 8006952:	f040 8098 	bne.w	8006a86 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006960:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006964:	b2d9      	uxtb	r1, r3
 8006966:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800696a:	b2da      	uxtb	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006970:	400a      	ands	r2, r1
 8006972:	b2d2      	uxtb	r2, r2
 8006974:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697a:	1c5a      	adds	r2, r3, #1
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006986:	b29b      	uxth	r3, r3
 8006988:	3b01      	subs	r3, #1
 800698a:	b29a      	uxth	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d17b      	bne.n	8006a96 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a6:	e853 3f00 	ldrex	r3, [r3]
 80069aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069b2:	653b      	str	r3, [r7, #80]	; 0x50
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	461a      	mov	r2, r3
 80069ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069bc:	647b      	str	r3, [r7, #68]	; 0x44
 80069be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069c4:	e841 2300 	strex	r3, r2, [r1]
 80069c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1e6      	bne.n	800699e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	3308      	adds	r3, #8
 80069d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	e853 3f00 	ldrex	r3, [r3]
 80069de:	623b      	str	r3, [r7, #32]
   return(result);
 80069e0:	6a3b      	ldr	r3, [r7, #32]
 80069e2:	f023 0301 	bic.w	r3, r3, #1
 80069e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3308      	adds	r3, #8
 80069ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069f0:	633a      	str	r2, [r7, #48]	; 0x30
 80069f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069f8:	e841 2300 	strex	r3, r2, [r1]
 80069fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e5      	bne.n	80069d0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2220      	movs	r2, #32
 8006a08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d12e      	bne.n	8006a7e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	e853 3f00 	ldrex	r3, [r3]
 8006a32:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0310 	bic.w	r3, r3, #16
 8006a3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	461a      	mov	r2, r3
 8006a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a44:	61fb      	str	r3, [r7, #28]
 8006a46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a48:	69b9      	ldr	r1, [r7, #24]
 8006a4a:	69fa      	ldr	r2, [r7, #28]
 8006a4c:	e841 2300 	strex	r3, r2, [r1]
 8006a50:	617b      	str	r3, [r7, #20]
   return(result);
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1e6      	bne.n	8006a26 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	f003 0310 	and.w	r3, r3, #16
 8006a62:	2b10      	cmp	r3, #16
 8006a64:	d103      	bne.n	8006a6e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2210      	movs	r2, #16
 8006a6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a74:	4619      	mov	r1, r3
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7ff f9e4 	bl	8005e44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a7c:	e00b      	b.n	8006a96 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7fa f8c6 	bl	8000c10 <HAL_UART_RxCpltCallback>
}
 8006a84:	e007      	b.n	8006a96 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	699a      	ldr	r2, [r3, #24]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f042 0208 	orr.w	r2, r2, #8
 8006a94:	619a      	str	r2, [r3, #24]
}
 8006a96:	bf00      	nop
 8006a98:	3758      	adds	r7, #88	; 0x58
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b096      	sub	sp, #88	; 0x58
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006aac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ab6:	2b22      	cmp	r3, #34	; 0x22
 8006ab8:	f040 8098 	bne.w	8006bec <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aca:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006acc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006ad0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ada:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae0:	1c9a      	adds	r2, r3, #2
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	3b01      	subs	r3, #1
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d17b      	bne.n	8006bfc <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0c:	e853 3f00 	ldrex	r3, [r3]
 8006b10:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b22:	643b      	str	r3, [r7, #64]	; 0x40
 8006b24:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1e6      	bne.n	8006b04 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3308      	adds	r3, #8
 8006b3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	f023 0301 	bic.w	r3, r3, #1
 8006b4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	3308      	adds	r3, #8
 8006b54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b5e:	e841 2300 	strex	r3, r2, [r1]
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1e5      	bne.n	8006b36 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d12e      	bne.n	8006be4 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	e853 3f00 	ldrex	r3, [r3]
 8006b98:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	f023 0310 	bic.w	r3, r3, #16
 8006ba0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006baa:	61bb      	str	r3, [r7, #24]
 8006bac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bae:	6979      	ldr	r1, [r7, #20]
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	e841 2300 	strex	r3, r2, [r1]
 8006bb6:	613b      	str	r3, [r7, #16]
   return(result);
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1e6      	bne.n	8006b8c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	69db      	ldr	r3, [r3, #28]
 8006bc4:	f003 0310 	and.w	r3, r3, #16
 8006bc8:	2b10      	cmp	r3, #16
 8006bca:	d103      	bne.n	8006bd4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2210      	movs	r2, #16
 8006bd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7ff f931 	bl	8005e44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006be2:	e00b      	b.n	8006bfc <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7fa f813 	bl	8000c10 <HAL_UART_RxCpltCallback>
}
 8006bea:	e007      	b.n	8006bfc <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	699a      	ldr	r2, [r3, #24]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0208 	orr.w	r2, r2, #8
 8006bfa:	619a      	str	r2, [r3, #24]
}
 8006bfc:	bf00      	nop
 8006bfe:	3758      	adds	r7, #88	; 0x58
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c04:	b084      	sub	sp, #16
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b084      	sub	sp, #16
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	f107 001c 	add.w	r0, r7, #28
 8006c12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d120      	bne.n	8006c5e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68da      	ldr	r2, [r3, #12]
 8006c2c:	4b20      	ldr	r3, [pc, #128]	; (8006cb0 <USB_CoreInit+0xac>)
 8006c2e:	4013      	ands	r3, r2
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d105      	bne.n	8006c52 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fa96 	bl	8007184 <USB_CoreReset>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	73fb      	strb	r3, [r7, #15]
 8006c5c:	e010      	b.n	8006c80 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fa8a 	bl	8007184 <USB_CoreReset>
 8006c70:	4603      	mov	r3, r0
 8006c72:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d10b      	bne.n	8006c9e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f043 0206 	orr.w	r2, r3, #6
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f043 0220 	orr.w	r2, r3, #32
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006caa:	b004      	add	sp, #16
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	ffbdffbf 	.word	0xffbdffbf

08006cb4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f023 0201 	bic.w	r2, r3, #1
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b084      	sub	sp, #16
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	460b      	mov	r3, r1
 8006ce0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cf2:	78fb      	ldrb	r3, [r7, #3]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d115      	bne.n	8006d24 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d04:	2001      	movs	r0, #1
 8006d06:	f7fa fc6f 	bl	80015e8 <HAL_Delay>
      ms++;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fa29 	bl	8007168 <USB_GetMode>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d01e      	beq.n	8006d5a <USB_SetCurrentMode+0x84>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2b31      	cmp	r3, #49	; 0x31
 8006d20:	d9f0      	bls.n	8006d04 <USB_SetCurrentMode+0x2e>
 8006d22:	e01a      	b.n	8006d5a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d24:	78fb      	ldrb	r3, [r7, #3]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d115      	bne.n	8006d56 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d36:	2001      	movs	r0, #1
 8006d38:	f7fa fc56 	bl	80015e8 <HAL_Delay>
      ms++;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fa10 	bl	8007168 <USB_GetMode>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d005      	beq.n	8006d5a <USB_SetCurrentMode+0x84>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b31      	cmp	r3, #49	; 0x31
 8006d52:	d9f0      	bls.n	8006d36 <USB_SetCurrentMode+0x60>
 8006d54:	e001      	b.n	8006d5a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e005      	b.n	8006d66 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2b32      	cmp	r3, #50	; 0x32
 8006d5e:	d101      	bne.n	8006d64 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e000      	b.n	8006d66 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
	...

08006d70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d70:	b084      	sub	sp, #16
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b086      	sub	sp, #24
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	613b      	str	r3, [r7, #16]
 8006d8e:	e009      	b.n	8006da4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	3340      	adds	r3, #64	; 0x40
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	3301      	adds	r3, #1
 8006da2:	613b      	str	r3, [r7, #16]
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	2b0e      	cmp	r3, #14
 8006da8:	d9f2      	bls.n	8006d90 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d11c      	bne.n	8006dea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dbe:	f043 0302 	orr.w	r3, r3, #2
 8006dc2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	e005      	b.n	8006df6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	2300      	movs	r3, #0
 8006e00:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e08:	4619      	mov	r1, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e10:	461a      	mov	r2, r3
 8006e12:	680b      	ldr	r3, [r1, #0]
 8006e14:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d10c      	bne.n	8006e36 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d104      	bne.n	8006e2c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e22:	2100      	movs	r1, #0
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f965 	bl	80070f4 <USB_SetDevSpeed>
 8006e2a:	e008      	b.n	8006e3e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f960 	bl	80070f4 <USB_SetDevSpeed>
 8006e34:	e003      	b.n	8006e3e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e36:	2103      	movs	r1, #3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f95b 	bl	80070f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e3e:	2110      	movs	r1, #16
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f8f3 	bl	800702c <USB_FlushTxFifo>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d001      	beq.n	8006e50 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f91f 	bl	8007094 <USB_FlushRxFifo>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d001      	beq.n	8006e60 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e66:	461a      	mov	r2, r3
 8006e68:	2300      	movs	r3, #0
 8006e6a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e72:	461a      	mov	r2, r3
 8006e74:	2300      	movs	r3, #0
 8006e76:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e7e:	461a      	mov	r2, r3
 8006e80:	2300      	movs	r3, #0
 8006e82:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e84:	2300      	movs	r3, #0
 8006e86:	613b      	str	r3, [r7, #16]
 8006e88:	e043      	b.n	8006f12 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ea0:	d118      	bne.n	8006ed4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10a      	bne.n	8006ebe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006eba:	6013      	str	r3, [r2, #0]
 8006ebc:	e013      	b.n	8006ee6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	015a      	lsls	r2, r3, #5
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ed0:	6013      	str	r3, [r2, #0]
 8006ed2:	e008      	b.n	8006ee6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	015a      	lsls	r2, r3, #5
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f04:	461a      	mov	r2, r3
 8006f06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	613b      	str	r3, [r7, #16]
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d3b7      	bcc.n	8006e8a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	613b      	str	r3, [r7, #16]
 8006f1e:	e043      	b.n	8006fa8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f36:	d118      	bne.n	8006f6a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10a      	bne.n	8006f54 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f50:	6013      	str	r3, [r2, #0]
 8006f52:	e013      	b.n	8006f7c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f60:	461a      	mov	r2, r3
 8006f62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	e008      	b.n	8006f7c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f76:	461a      	mov	r2, r3
 8006f78:	2300      	movs	r3, #0
 8006f7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	015a      	lsls	r2, r3, #5
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f88:	461a      	mov	r2, r3
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006fa0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	613b      	str	r3, [r7, #16]
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d3b7      	bcc.n	8006f20 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fc2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006fd0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d105      	bne.n	8006fe4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	f043 0210 	orr.w	r2, r3, #16
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	699a      	ldr	r2, [r3, #24]
 8006fe8:	4b0e      	ldr	r3, [pc, #56]	; (8007024 <USB_DevInit+0x2b4>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d005      	beq.n	8007002 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	f043 0208 	orr.w	r2, r3, #8
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007004:	2b01      	cmp	r3, #1
 8007006:	d105      	bne.n	8007014 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	699a      	ldr	r2, [r3, #24]
 800700c:	4b06      	ldr	r3, [pc, #24]	; (8007028 <USB_DevInit+0x2b8>)
 800700e:	4313      	orrs	r3, r2
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007014:	7dfb      	ldrb	r3, [r7, #23]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007020:	b004      	add	sp, #16
 8007022:	4770      	bx	lr
 8007024:	803c3800 	.word	0x803c3800
 8007028:	40000004 	.word	0x40000004

0800702c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007036:	2300      	movs	r3, #0
 8007038:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3301      	adds	r3, #1
 800703e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4a13      	ldr	r2, [pc, #76]	; (8007090 <USB_FlushTxFifo+0x64>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d901      	bls.n	800704c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e01b      	b.n	8007084 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	daf2      	bge.n	800703a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007054:	2300      	movs	r3, #0
 8007056:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	019b      	lsls	r3, r3, #6
 800705c:	f043 0220 	orr.w	r2, r3, #32
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	3301      	adds	r3, #1
 8007068:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4a08      	ldr	r2, [pc, #32]	; (8007090 <USB_FlushTxFifo+0x64>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d901      	bls.n	8007076 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e006      	b.n	8007084 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f003 0320 	and.w	r3, r3, #32
 800707e:	2b20      	cmp	r3, #32
 8007080:	d0f0      	beq.n	8007064 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	00030d40 	.word	0x00030d40

08007094 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800709c:	2300      	movs	r3, #0
 800709e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	3301      	adds	r3, #1
 80070a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	4a11      	ldr	r2, [pc, #68]	; (80070f0 <USB_FlushRxFifo+0x5c>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d901      	bls.n	80070b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e018      	b.n	80070e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	daf2      	bge.n	80070a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2210      	movs	r2, #16
 80070c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	3301      	adds	r3, #1
 80070c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	4a08      	ldr	r2, [pc, #32]	; (80070f0 <USB_FlushRxFifo+0x5c>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d901      	bls.n	80070d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e006      	b.n	80070e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	f003 0310 	and.w	r3, r3, #16
 80070de:	2b10      	cmp	r3, #16
 80070e0:	d0f0      	beq.n	80070c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	00030d40 	.word	0x00030d40

080070f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	68f9      	ldr	r1, [r7, #12]
 8007110:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007114:	4313      	orrs	r3, r2
 8007116:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007126:	b480      	push	{r7}
 8007128:	b085      	sub	sp, #20
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007140:	f023 0303 	bic.w	r3, r3, #3
 8007144:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007154:	f043 0302 	orr.w	r3, r3, #2
 8007158:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	f003 0301 	and.w	r3, r3, #1
}
 8007178:	4618      	mov	r0, r3
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	3301      	adds	r3, #1
 8007194:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	4a13      	ldr	r2, [pc, #76]	; (80071e8 <USB_CoreReset+0x64>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d901      	bls.n	80071a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e01b      	b.n	80071da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	daf2      	bge.n	8007190 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	f043 0201 	orr.w	r2, r3, #1
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	3301      	adds	r3, #1
 80071be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	4a09      	ldr	r2, [pc, #36]	; (80071e8 <USB_CoreReset+0x64>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d901      	bls.n	80071cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e006      	b.n	80071da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d0f0      	beq.n	80071ba <USB_CoreReset+0x36>

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3714      	adds	r7, #20
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	00030d40 	.word	0x00030d40

080071ec <arm_pid_init_f32>:
 80071ec:	ed90 7a08 	vldr	s14, [r0, #32]
 80071f0:	edd0 7a06 	vldr	s15, [r0, #24]
 80071f4:	ed90 6a07 	vldr	s12, [r0, #28]
 80071f8:	eef1 6a67 	vneg.f32	s13, s15
 80071fc:	ed80 7a02 	vstr	s14, [r0, #8]
 8007200:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007204:	ee37 6a07 	vadd.f32	s12, s14, s14
 8007208:	ee77 7a87 	vadd.f32	s15, s15, s14
 800720c:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8007210:	edc0 7a00 	vstr	s15, [r0]
 8007214:	ed80 7a01 	vstr	s14, [r0, #4]
 8007218:	b901      	cbnz	r1, 800721c <arm_pid_init_f32+0x30>
 800721a:	4770      	bx	lr
 800721c:	2300      	movs	r3, #0
 800721e:	60c3      	str	r3, [r0, #12]
 8007220:	6103      	str	r3, [r0, #16]
 8007222:	6143      	str	r3, [r0, #20]
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop

08007228 <atol>:
 8007228:	220a      	movs	r2, #10
 800722a:	2100      	movs	r1, #0
 800722c:	f000 b8d4 	b.w	80073d8 <strtol>

08007230 <__errno>:
 8007230:	4b01      	ldr	r3, [pc, #4]	; (8007238 <__errno+0x8>)
 8007232:	6818      	ldr	r0, [r3, #0]
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	2000001c 	.word	0x2000001c

0800723c <__libc_init_array>:
 800723c:	b570      	push	{r4, r5, r6, lr}
 800723e:	4d0d      	ldr	r5, [pc, #52]	; (8007274 <__libc_init_array+0x38>)
 8007240:	4c0d      	ldr	r4, [pc, #52]	; (8007278 <__libc_init_array+0x3c>)
 8007242:	1b64      	subs	r4, r4, r5
 8007244:	10a4      	asrs	r4, r4, #2
 8007246:	2600      	movs	r6, #0
 8007248:	42a6      	cmp	r6, r4
 800724a:	d109      	bne.n	8007260 <__libc_init_array+0x24>
 800724c:	4d0b      	ldr	r5, [pc, #44]	; (800727c <__libc_init_array+0x40>)
 800724e:	4c0c      	ldr	r4, [pc, #48]	; (8007280 <__libc_init_array+0x44>)
 8007250:	f000 fd1a 	bl	8007c88 <_init>
 8007254:	1b64      	subs	r4, r4, r5
 8007256:	10a4      	asrs	r4, r4, #2
 8007258:	2600      	movs	r6, #0
 800725a:	42a6      	cmp	r6, r4
 800725c:	d105      	bne.n	800726a <__libc_init_array+0x2e>
 800725e:	bd70      	pop	{r4, r5, r6, pc}
 8007260:	f855 3b04 	ldr.w	r3, [r5], #4
 8007264:	4798      	blx	r3
 8007266:	3601      	adds	r6, #1
 8007268:	e7ee      	b.n	8007248 <__libc_init_array+0xc>
 800726a:	f855 3b04 	ldr.w	r3, [r5], #4
 800726e:	4798      	blx	r3
 8007270:	3601      	adds	r6, #1
 8007272:	e7f2      	b.n	800725a <__libc_init_array+0x1e>
 8007274:	08007e38 	.word	0x08007e38
 8007278:	08007e38 	.word	0x08007e38
 800727c:	08007e38 	.word	0x08007e38
 8007280:	08007e3c 	.word	0x08007e3c

08007284 <memset>:
 8007284:	4402      	add	r2, r0
 8007286:	4603      	mov	r3, r0
 8007288:	4293      	cmp	r3, r2
 800728a:	d100      	bne.n	800728e <memset+0xa>
 800728c:	4770      	bx	lr
 800728e:	f803 1b01 	strb.w	r1, [r3], #1
 8007292:	e7f9      	b.n	8007288 <memset+0x4>

08007294 <siprintf>:
 8007294:	b40e      	push	{r1, r2, r3}
 8007296:	b500      	push	{lr}
 8007298:	b09c      	sub	sp, #112	; 0x70
 800729a:	ab1d      	add	r3, sp, #116	; 0x74
 800729c:	9002      	str	r0, [sp, #8]
 800729e:	9006      	str	r0, [sp, #24]
 80072a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072a4:	4809      	ldr	r0, [pc, #36]	; (80072cc <siprintf+0x38>)
 80072a6:	9107      	str	r1, [sp, #28]
 80072a8:	9104      	str	r1, [sp, #16]
 80072aa:	4909      	ldr	r1, [pc, #36]	; (80072d0 <siprintf+0x3c>)
 80072ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80072b0:	9105      	str	r1, [sp, #20]
 80072b2:	6800      	ldr	r0, [r0, #0]
 80072b4:	9301      	str	r3, [sp, #4]
 80072b6:	a902      	add	r1, sp, #8
 80072b8:	f000 f8f4 	bl	80074a4 <_svfiprintf_r>
 80072bc:	9b02      	ldr	r3, [sp, #8]
 80072be:	2200      	movs	r2, #0
 80072c0:	701a      	strb	r2, [r3, #0]
 80072c2:	b01c      	add	sp, #112	; 0x70
 80072c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80072c8:	b003      	add	sp, #12
 80072ca:	4770      	bx	lr
 80072cc:	2000001c 	.word	0x2000001c
 80072d0:	ffff0208 	.word	0xffff0208

080072d4 <_strtol_l.constprop.0>:
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072da:	d001      	beq.n	80072e0 <_strtol_l.constprop.0+0xc>
 80072dc:	2b24      	cmp	r3, #36	; 0x24
 80072de:	d906      	bls.n	80072ee <_strtol_l.constprop.0+0x1a>
 80072e0:	f7ff ffa6 	bl	8007230 <__errno>
 80072e4:	2316      	movs	r3, #22
 80072e6:	6003      	str	r3, [r0, #0]
 80072e8:	2000      	movs	r0, #0
 80072ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80073d4 <_strtol_l.constprop.0+0x100>
 80072f2:	460d      	mov	r5, r1
 80072f4:	462e      	mov	r6, r5
 80072f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072fa:	f814 700c 	ldrb.w	r7, [r4, ip]
 80072fe:	f017 0708 	ands.w	r7, r7, #8
 8007302:	d1f7      	bne.n	80072f4 <_strtol_l.constprop.0+0x20>
 8007304:	2c2d      	cmp	r4, #45	; 0x2d
 8007306:	d132      	bne.n	800736e <_strtol_l.constprop.0+0x9a>
 8007308:	782c      	ldrb	r4, [r5, #0]
 800730a:	2701      	movs	r7, #1
 800730c:	1cb5      	adds	r5, r6, #2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d05b      	beq.n	80073ca <_strtol_l.constprop.0+0xf6>
 8007312:	2b10      	cmp	r3, #16
 8007314:	d109      	bne.n	800732a <_strtol_l.constprop.0+0x56>
 8007316:	2c30      	cmp	r4, #48	; 0x30
 8007318:	d107      	bne.n	800732a <_strtol_l.constprop.0+0x56>
 800731a:	782c      	ldrb	r4, [r5, #0]
 800731c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007320:	2c58      	cmp	r4, #88	; 0x58
 8007322:	d14d      	bne.n	80073c0 <_strtol_l.constprop.0+0xec>
 8007324:	786c      	ldrb	r4, [r5, #1]
 8007326:	2310      	movs	r3, #16
 8007328:	3502      	adds	r5, #2
 800732a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800732e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007332:	f04f 0c00 	mov.w	ip, #0
 8007336:	fbb8 f9f3 	udiv	r9, r8, r3
 800733a:	4666      	mov	r6, ip
 800733c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007340:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007344:	f1be 0f09 	cmp.w	lr, #9
 8007348:	d816      	bhi.n	8007378 <_strtol_l.constprop.0+0xa4>
 800734a:	4674      	mov	r4, lr
 800734c:	42a3      	cmp	r3, r4
 800734e:	dd24      	ble.n	800739a <_strtol_l.constprop.0+0xc6>
 8007350:	f1bc 0f00 	cmp.w	ip, #0
 8007354:	db1e      	blt.n	8007394 <_strtol_l.constprop.0+0xc0>
 8007356:	45b1      	cmp	r9, r6
 8007358:	d31c      	bcc.n	8007394 <_strtol_l.constprop.0+0xc0>
 800735a:	d101      	bne.n	8007360 <_strtol_l.constprop.0+0x8c>
 800735c:	45a2      	cmp	sl, r4
 800735e:	db19      	blt.n	8007394 <_strtol_l.constprop.0+0xc0>
 8007360:	fb06 4603 	mla	r6, r6, r3, r4
 8007364:	f04f 0c01 	mov.w	ip, #1
 8007368:	f815 4b01 	ldrb.w	r4, [r5], #1
 800736c:	e7e8      	b.n	8007340 <_strtol_l.constprop.0+0x6c>
 800736e:	2c2b      	cmp	r4, #43	; 0x2b
 8007370:	bf04      	itt	eq
 8007372:	782c      	ldrbeq	r4, [r5, #0]
 8007374:	1cb5      	addeq	r5, r6, #2
 8007376:	e7ca      	b.n	800730e <_strtol_l.constprop.0+0x3a>
 8007378:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800737c:	f1be 0f19 	cmp.w	lr, #25
 8007380:	d801      	bhi.n	8007386 <_strtol_l.constprop.0+0xb2>
 8007382:	3c37      	subs	r4, #55	; 0x37
 8007384:	e7e2      	b.n	800734c <_strtol_l.constprop.0+0x78>
 8007386:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800738a:	f1be 0f19 	cmp.w	lr, #25
 800738e:	d804      	bhi.n	800739a <_strtol_l.constprop.0+0xc6>
 8007390:	3c57      	subs	r4, #87	; 0x57
 8007392:	e7db      	b.n	800734c <_strtol_l.constprop.0+0x78>
 8007394:	f04f 3cff 	mov.w	ip, #4294967295
 8007398:	e7e6      	b.n	8007368 <_strtol_l.constprop.0+0x94>
 800739a:	f1bc 0f00 	cmp.w	ip, #0
 800739e:	da05      	bge.n	80073ac <_strtol_l.constprop.0+0xd8>
 80073a0:	2322      	movs	r3, #34	; 0x22
 80073a2:	6003      	str	r3, [r0, #0]
 80073a4:	4646      	mov	r6, r8
 80073a6:	b942      	cbnz	r2, 80073ba <_strtol_l.constprop.0+0xe6>
 80073a8:	4630      	mov	r0, r6
 80073aa:	e79e      	b.n	80072ea <_strtol_l.constprop.0+0x16>
 80073ac:	b107      	cbz	r7, 80073b0 <_strtol_l.constprop.0+0xdc>
 80073ae:	4276      	negs	r6, r6
 80073b0:	2a00      	cmp	r2, #0
 80073b2:	d0f9      	beq.n	80073a8 <_strtol_l.constprop.0+0xd4>
 80073b4:	f1bc 0f00 	cmp.w	ip, #0
 80073b8:	d000      	beq.n	80073bc <_strtol_l.constprop.0+0xe8>
 80073ba:	1e69      	subs	r1, r5, #1
 80073bc:	6011      	str	r1, [r2, #0]
 80073be:	e7f3      	b.n	80073a8 <_strtol_l.constprop.0+0xd4>
 80073c0:	2430      	movs	r4, #48	; 0x30
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1b1      	bne.n	800732a <_strtol_l.constprop.0+0x56>
 80073c6:	2308      	movs	r3, #8
 80073c8:	e7af      	b.n	800732a <_strtol_l.constprop.0+0x56>
 80073ca:	2c30      	cmp	r4, #48	; 0x30
 80073cc:	d0a5      	beq.n	800731a <_strtol_l.constprop.0+0x46>
 80073ce:	230a      	movs	r3, #10
 80073d0:	e7ab      	b.n	800732a <_strtol_l.constprop.0+0x56>
 80073d2:	bf00      	nop
 80073d4:	08007cfd 	.word	0x08007cfd

080073d8 <strtol>:
 80073d8:	4613      	mov	r3, r2
 80073da:	460a      	mov	r2, r1
 80073dc:	4601      	mov	r1, r0
 80073de:	4802      	ldr	r0, [pc, #8]	; (80073e8 <strtol+0x10>)
 80073e0:	6800      	ldr	r0, [r0, #0]
 80073e2:	f7ff bf77 	b.w	80072d4 <_strtol_l.constprop.0>
 80073e6:	bf00      	nop
 80073e8:	2000001c 	.word	0x2000001c

080073ec <__ssputs_r>:
 80073ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f0:	688e      	ldr	r6, [r1, #8]
 80073f2:	429e      	cmp	r6, r3
 80073f4:	4682      	mov	sl, r0
 80073f6:	460c      	mov	r4, r1
 80073f8:	4690      	mov	r8, r2
 80073fa:	461f      	mov	r7, r3
 80073fc:	d838      	bhi.n	8007470 <__ssputs_r+0x84>
 80073fe:	898a      	ldrh	r2, [r1, #12]
 8007400:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007404:	d032      	beq.n	800746c <__ssputs_r+0x80>
 8007406:	6825      	ldr	r5, [r4, #0]
 8007408:	6909      	ldr	r1, [r1, #16]
 800740a:	eba5 0901 	sub.w	r9, r5, r1
 800740e:	6965      	ldr	r5, [r4, #20]
 8007410:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007414:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007418:	3301      	adds	r3, #1
 800741a:	444b      	add	r3, r9
 800741c:	106d      	asrs	r5, r5, #1
 800741e:	429d      	cmp	r5, r3
 8007420:	bf38      	it	cc
 8007422:	461d      	movcc	r5, r3
 8007424:	0553      	lsls	r3, r2, #21
 8007426:	d531      	bpl.n	800748c <__ssputs_r+0xa0>
 8007428:	4629      	mov	r1, r5
 800742a:	f000 fb63 	bl	8007af4 <_malloc_r>
 800742e:	4606      	mov	r6, r0
 8007430:	b950      	cbnz	r0, 8007448 <__ssputs_r+0x5c>
 8007432:	230c      	movs	r3, #12
 8007434:	f8ca 3000 	str.w	r3, [sl]
 8007438:	89a3      	ldrh	r3, [r4, #12]
 800743a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800743e:	81a3      	strh	r3, [r4, #12]
 8007440:	f04f 30ff 	mov.w	r0, #4294967295
 8007444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007448:	6921      	ldr	r1, [r4, #16]
 800744a:	464a      	mov	r2, r9
 800744c:	f000 fabe 	bl	80079cc <memcpy>
 8007450:	89a3      	ldrh	r3, [r4, #12]
 8007452:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800745a:	81a3      	strh	r3, [r4, #12]
 800745c:	6126      	str	r6, [r4, #16]
 800745e:	6165      	str	r5, [r4, #20]
 8007460:	444e      	add	r6, r9
 8007462:	eba5 0509 	sub.w	r5, r5, r9
 8007466:	6026      	str	r6, [r4, #0]
 8007468:	60a5      	str	r5, [r4, #8]
 800746a:	463e      	mov	r6, r7
 800746c:	42be      	cmp	r6, r7
 800746e:	d900      	bls.n	8007472 <__ssputs_r+0x86>
 8007470:	463e      	mov	r6, r7
 8007472:	6820      	ldr	r0, [r4, #0]
 8007474:	4632      	mov	r2, r6
 8007476:	4641      	mov	r1, r8
 8007478:	f000 fab6 	bl	80079e8 <memmove>
 800747c:	68a3      	ldr	r3, [r4, #8]
 800747e:	1b9b      	subs	r3, r3, r6
 8007480:	60a3      	str	r3, [r4, #8]
 8007482:	6823      	ldr	r3, [r4, #0]
 8007484:	4433      	add	r3, r6
 8007486:	6023      	str	r3, [r4, #0]
 8007488:	2000      	movs	r0, #0
 800748a:	e7db      	b.n	8007444 <__ssputs_r+0x58>
 800748c:	462a      	mov	r2, r5
 800748e:	f000 fba5 	bl	8007bdc <_realloc_r>
 8007492:	4606      	mov	r6, r0
 8007494:	2800      	cmp	r0, #0
 8007496:	d1e1      	bne.n	800745c <__ssputs_r+0x70>
 8007498:	6921      	ldr	r1, [r4, #16]
 800749a:	4650      	mov	r0, sl
 800749c:	f000 fabe 	bl	8007a1c <_free_r>
 80074a0:	e7c7      	b.n	8007432 <__ssputs_r+0x46>
	...

080074a4 <_svfiprintf_r>:
 80074a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a8:	4698      	mov	r8, r3
 80074aa:	898b      	ldrh	r3, [r1, #12]
 80074ac:	061b      	lsls	r3, r3, #24
 80074ae:	b09d      	sub	sp, #116	; 0x74
 80074b0:	4607      	mov	r7, r0
 80074b2:	460d      	mov	r5, r1
 80074b4:	4614      	mov	r4, r2
 80074b6:	d50e      	bpl.n	80074d6 <_svfiprintf_r+0x32>
 80074b8:	690b      	ldr	r3, [r1, #16]
 80074ba:	b963      	cbnz	r3, 80074d6 <_svfiprintf_r+0x32>
 80074bc:	2140      	movs	r1, #64	; 0x40
 80074be:	f000 fb19 	bl	8007af4 <_malloc_r>
 80074c2:	6028      	str	r0, [r5, #0]
 80074c4:	6128      	str	r0, [r5, #16]
 80074c6:	b920      	cbnz	r0, 80074d2 <_svfiprintf_r+0x2e>
 80074c8:	230c      	movs	r3, #12
 80074ca:	603b      	str	r3, [r7, #0]
 80074cc:	f04f 30ff 	mov.w	r0, #4294967295
 80074d0:	e0d1      	b.n	8007676 <_svfiprintf_r+0x1d2>
 80074d2:	2340      	movs	r3, #64	; 0x40
 80074d4:	616b      	str	r3, [r5, #20]
 80074d6:	2300      	movs	r3, #0
 80074d8:	9309      	str	r3, [sp, #36]	; 0x24
 80074da:	2320      	movs	r3, #32
 80074dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80074e4:	2330      	movs	r3, #48	; 0x30
 80074e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007690 <_svfiprintf_r+0x1ec>
 80074ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074ee:	f04f 0901 	mov.w	r9, #1
 80074f2:	4623      	mov	r3, r4
 80074f4:	469a      	mov	sl, r3
 80074f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074fa:	b10a      	cbz	r2, 8007500 <_svfiprintf_r+0x5c>
 80074fc:	2a25      	cmp	r2, #37	; 0x25
 80074fe:	d1f9      	bne.n	80074f4 <_svfiprintf_r+0x50>
 8007500:	ebba 0b04 	subs.w	fp, sl, r4
 8007504:	d00b      	beq.n	800751e <_svfiprintf_r+0x7a>
 8007506:	465b      	mov	r3, fp
 8007508:	4622      	mov	r2, r4
 800750a:	4629      	mov	r1, r5
 800750c:	4638      	mov	r0, r7
 800750e:	f7ff ff6d 	bl	80073ec <__ssputs_r>
 8007512:	3001      	adds	r0, #1
 8007514:	f000 80aa 	beq.w	800766c <_svfiprintf_r+0x1c8>
 8007518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800751a:	445a      	add	r2, fp
 800751c:	9209      	str	r2, [sp, #36]	; 0x24
 800751e:	f89a 3000 	ldrb.w	r3, [sl]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 80a2 	beq.w	800766c <_svfiprintf_r+0x1c8>
 8007528:	2300      	movs	r3, #0
 800752a:	f04f 32ff 	mov.w	r2, #4294967295
 800752e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007532:	f10a 0a01 	add.w	sl, sl, #1
 8007536:	9304      	str	r3, [sp, #16]
 8007538:	9307      	str	r3, [sp, #28]
 800753a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800753e:	931a      	str	r3, [sp, #104]	; 0x68
 8007540:	4654      	mov	r4, sl
 8007542:	2205      	movs	r2, #5
 8007544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007548:	4851      	ldr	r0, [pc, #324]	; (8007690 <_svfiprintf_r+0x1ec>)
 800754a:	f7f8 fe61 	bl	8000210 <memchr>
 800754e:	9a04      	ldr	r2, [sp, #16]
 8007550:	b9d8      	cbnz	r0, 800758a <_svfiprintf_r+0xe6>
 8007552:	06d0      	lsls	r0, r2, #27
 8007554:	bf44      	itt	mi
 8007556:	2320      	movmi	r3, #32
 8007558:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800755c:	0711      	lsls	r1, r2, #28
 800755e:	bf44      	itt	mi
 8007560:	232b      	movmi	r3, #43	; 0x2b
 8007562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007566:	f89a 3000 	ldrb.w	r3, [sl]
 800756a:	2b2a      	cmp	r3, #42	; 0x2a
 800756c:	d015      	beq.n	800759a <_svfiprintf_r+0xf6>
 800756e:	9a07      	ldr	r2, [sp, #28]
 8007570:	4654      	mov	r4, sl
 8007572:	2000      	movs	r0, #0
 8007574:	f04f 0c0a 	mov.w	ip, #10
 8007578:	4621      	mov	r1, r4
 800757a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800757e:	3b30      	subs	r3, #48	; 0x30
 8007580:	2b09      	cmp	r3, #9
 8007582:	d94e      	bls.n	8007622 <_svfiprintf_r+0x17e>
 8007584:	b1b0      	cbz	r0, 80075b4 <_svfiprintf_r+0x110>
 8007586:	9207      	str	r2, [sp, #28]
 8007588:	e014      	b.n	80075b4 <_svfiprintf_r+0x110>
 800758a:	eba0 0308 	sub.w	r3, r0, r8
 800758e:	fa09 f303 	lsl.w	r3, r9, r3
 8007592:	4313      	orrs	r3, r2
 8007594:	9304      	str	r3, [sp, #16]
 8007596:	46a2      	mov	sl, r4
 8007598:	e7d2      	b.n	8007540 <_svfiprintf_r+0x9c>
 800759a:	9b03      	ldr	r3, [sp, #12]
 800759c:	1d19      	adds	r1, r3, #4
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	9103      	str	r1, [sp, #12]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	bfbb      	ittet	lt
 80075a6:	425b      	neglt	r3, r3
 80075a8:	f042 0202 	orrlt.w	r2, r2, #2
 80075ac:	9307      	strge	r3, [sp, #28]
 80075ae:	9307      	strlt	r3, [sp, #28]
 80075b0:	bfb8      	it	lt
 80075b2:	9204      	strlt	r2, [sp, #16]
 80075b4:	7823      	ldrb	r3, [r4, #0]
 80075b6:	2b2e      	cmp	r3, #46	; 0x2e
 80075b8:	d10c      	bne.n	80075d4 <_svfiprintf_r+0x130>
 80075ba:	7863      	ldrb	r3, [r4, #1]
 80075bc:	2b2a      	cmp	r3, #42	; 0x2a
 80075be:	d135      	bne.n	800762c <_svfiprintf_r+0x188>
 80075c0:	9b03      	ldr	r3, [sp, #12]
 80075c2:	1d1a      	adds	r2, r3, #4
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	9203      	str	r2, [sp, #12]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	bfb8      	it	lt
 80075cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80075d0:	3402      	adds	r4, #2
 80075d2:	9305      	str	r3, [sp, #20]
 80075d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80076a0 <_svfiprintf_r+0x1fc>
 80075d8:	7821      	ldrb	r1, [r4, #0]
 80075da:	2203      	movs	r2, #3
 80075dc:	4650      	mov	r0, sl
 80075de:	f7f8 fe17 	bl	8000210 <memchr>
 80075e2:	b140      	cbz	r0, 80075f6 <_svfiprintf_r+0x152>
 80075e4:	2340      	movs	r3, #64	; 0x40
 80075e6:	eba0 000a 	sub.w	r0, r0, sl
 80075ea:	fa03 f000 	lsl.w	r0, r3, r0
 80075ee:	9b04      	ldr	r3, [sp, #16]
 80075f0:	4303      	orrs	r3, r0
 80075f2:	3401      	adds	r4, #1
 80075f4:	9304      	str	r3, [sp, #16]
 80075f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075fa:	4826      	ldr	r0, [pc, #152]	; (8007694 <_svfiprintf_r+0x1f0>)
 80075fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007600:	2206      	movs	r2, #6
 8007602:	f7f8 fe05 	bl	8000210 <memchr>
 8007606:	2800      	cmp	r0, #0
 8007608:	d038      	beq.n	800767c <_svfiprintf_r+0x1d8>
 800760a:	4b23      	ldr	r3, [pc, #140]	; (8007698 <_svfiprintf_r+0x1f4>)
 800760c:	bb1b      	cbnz	r3, 8007656 <_svfiprintf_r+0x1b2>
 800760e:	9b03      	ldr	r3, [sp, #12]
 8007610:	3307      	adds	r3, #7
 8007612:	f023 0307 	bic.w	r3, r3, #7
 8007616:	3308      	adds	r3, #8
 8007618:	9303      	str	r3, [sp, #12]
 800761a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800761c:	4433      	add	r3, r6
 800761e:	9309      	str	r3, [sp, #36]	; 0x24
 8007620:	e767      	b.n	80074f2 <_svfiprintf_r+0x4e>
 8007622:	fb0c 3202 	mla	r2, ip, r2, r3
 8007626:	460c      	mov	r4, r1
 8007628:	2001      	movs	r0, #1
 800762a:	e7a5      	b.n	8007578 <_svfiprintf_r+0xd4>
 800762c:	2300      	movs	r3, #0
 800762e:	3401      	adds	r4, #1
 8007630:	9305      	str	r3, [sp, #20]
 8007632:	4619      	mov	r1, r3
 8007634:	f04f 0c0a 	mov.w	ip, #10
 8007638:	4620      	mov	r0, r4
 800763a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800763e:	3a30      	subs	r2, #48	; 0x30
 8007640:	2a09      	cmp	r2, #9
 8007642:	d903      	bls.n	800764c <_svfiprintf_r+0x1a8>
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0c5      	beq.n	80075d4 <_svfiprintf_r+0x130>
 8007648:	9105      	str	r1, [sp, #20]
 800764a:	e7c3      	b.n	80075d4 <_svfiprintf_r+0x130>
 800764c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007650:	4604      	mov	r4, r0
 8007652:	2301      	movs	r3, #1
 8007654:	e7f0      	b.n	8007638 <_svfiprintf_r+0x194>
 8007656:	ab03      	add	r3, sp, #12
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	462a      	mov	r2, r5
 800765c:	4b0f      	ldr	r3, [pc, #60]	; (800769c <_svfiprintf_r+0x1f8>)
 800765e:	a904      	add	r1, sp, #16
 8007660:	4638      	mov	r0, r7
 8007662:	f3af 8000 	nop.w
 8007666:	1c42      	adds	r2, r0, #1
 8007668:	4606      	mov	r6, r0
 800766a:	d1d6      	bne.n	800761a <_svfiprintf_r+0x176>
 800766c:	89ab      	ldrh	r3, [r5, #12]
 800766e:	065b      	lsls	r3, r3, #25
 8007670:	f53f af2c 	bmi.w	80074cc <_svfiprintf_r+0x28>
 8007674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007676:	b01d      	add	sp, #116	; 0x74
 8007678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800767c:	ab03      	add	r3, sp, #12
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	462a      	mov	r2, r5
 8007682:	4b06      	ldr	r3, [pc, #24]	; (800769c <_svfiprintf_r+0x1f8>)
 8007684:	a904      	add	r1, sp, #16
 8007686:	4638      	mov	r0, r7
 8007688:	f000 f87a 	bl	8007780 <_printf_i>
 800768c:	e7eb      	b.n	8007666 <_svfiprintf_r+0x1c2>
 800768e:	bf00      	nop
 8007690:	08007dfd 	.word	0x08007dfd
 8007694:	08007e07 	.word	0x08007e07
 8007698:	00000000 	.word	0x00000000
 800769c:	080073ed 	.word	0x080073ed
 80076a0:	08007e03 	.word	0x08007e03

080076a4 <_printf_common>:
 80076a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076a8:	4616      	mov	r6, r2
 80076aa:	4699      	mov	r9, r3
 80076ac:	688a      	ldr	r2, [r1, #8]
 80076ae:	690b      	ldr	r3, [r1, #16]
 80076b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076b4:	4293      	cmp	r3, r2
 80076b6:	bfb8      	it	lt
 80076b8:	4613      	movlt	r3, r2
 80076ba:	6033      	str	r3, [r6, #0]
 80076bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076c0:	4607      	mov	r7, r0
 80076c2:	460c      	mov	r4, r1
 80076c4:	b10a      	cbz	r2, 80076ca <_printf_common+0x26>
 80076c6:	3301      	adds	r3, #1
 80076c8:	6033      	str	r3, [r6, #0]
 80076ca:	6823      	ldr	r3, [r4, #0]
 80076cc:	0699      	lsls	r1, r3, #26
 80076ce:	bf42      	ittt	mi
 80076d0:	6833      	ldrmi	r3, [r6, #0]
 80076d2:	3302      	addmi	r3, #2
 80076d4:	6033      	strmi	r3, [r6, #0]
 80076d6:	6825      	ldr	r5, [r4, #0]
 80076d8:	f015 0506 	ands.w	r5, r5, #6
 80076dc:	d106      	bne.n	80076ec <_printf_common+0x48>
 80076de:	f104 0a19 	add.w	sl, r4, #25
 80076e2:	68e3      	ldr	r3, [r4, #12]
 80076e4:	6832      	ldr	r2, [r6, #0]
 80076e6:	1a9b      	subs	r3, r3, r2
 80076e8:	42ab      	cmp	r3, r5
 80076ea:	dc26      	bgt.n	800773a <_printf_common+0x96>
 80076ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076f0:	1e13      	subs	r3, r2, #0
 80076f2:	6822      	ldr	r2, [r4, #0]
 80076f4:	bf18      	it	ne
 80076f6:	2301      	movne	r3, #1
 80076f8:	0692      	lsls	r2, r2, #26
 80076fa:	d42b      	bmi.n	8007754 <_printf_common+0xb0>
 80076fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007700:	4649      	mov	r1, r9
 8007702:	4638      	mov	r0, r7
 8007704:	47c0      	blx	r8
 8007706:	3001      	adds	r0, #1
 8007708:	d01e      	beq.n	8007748 <_printf_common+0xa4>
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	68e5      	ldr	r5, [r4, #12]
 800770e:	6832      	ldr	r2, [r6, #0]
 8007710:	f003 0306 	and.w	r3, r3, #6
 8007714:	2b04      	cmp	r3, #4
 8007716:	bf08      	it	eq
 8007718:	1aad      	subeq	r5, r5, r2
 800771a:	68a3      	ldr	r3, [r4, #8]
 800771c:	6922      	ldr	r2, [r4, #16]
 800771e:	bf0c      	ite	eq
 8007720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007724:	2500      	movne	r5, #0
 8007726:	4293      	cmp	r3, r2
 8007728:	bfc4      	itt	gt
 800772a:	1a9b      	subgt	r3, r3, r2
 800772c:	18ed      	addgt	r5, r5, r3
 800772e:	2600      	movs	r6, #0
 8007730:	341a      	adds	r4, #26
 8007732:	42b5      	cmp	r5, r6
 8007734:	d11a      	bne.n	800776c <_printf_common+0xc8>
 8007736:	2000      	movs	r0, #0
 8007738:	e008      	b.n	800774c <_printf_common+0xa8>
 800773a:	2301      	movs	r3, #1
 800773c:	4652      	mov	r2, sl
 800773e:	4649      	mov	r1, r9
 8007740:	4638      	mov	r0, r7
 8007742:	47c0      	blx	r8
 8007744:	3001      	adds	r0, #1
 8007746:	d103      	bne.n	8007750 <_printf_common+0xac>
 8007748:	f04f 30ff 	mov.w	r0, #4294967295
 800774c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007750:	3501      	adds	r5, #1
 8007752:	e7c6      	b.n	80076e2 <_printf_common+0x3e>
 8007754:	18e1      	adds	r1, r4, r3
 8007756:	1c5a      	adds	r2, r3, #1
 8007758:	2030      	movs	r0, #48	; 0x30
 800775a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800775e:	4422      	add	r2, r4
 8007760:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007764:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007768:	3302      	adds	r3, #2
 800776a:	e7c7      	b.n	80076fc <_printf_common+0x58>
 800776c:	2301      	movs	r3, #1
 800776e:	4622      	mov	r2, r4
 8007770:	4649      	mov	r1, r9
 8007772:	4638      	mov	r0, r7
 8007774:	47c0      	blx	r8
 8007776:	3001      	adds	r0, #1
 8007778:	d0e6      	beq.n	8007748 <_printf_common+0xa4>
 800777a:	3601      	adds	r6, #1
 800777c:	e7d9      	b.n	8007732 <_printf_common+0x8e>
	...

08007780 <_printf_i>:
 8007780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007784:	7e0f      	ldrb	r7, [r1, #24]
 8007786:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007788:	2f78      	cmp	r7, #120	; 0x78
 800778a:	4691      	mov	r9, r2
 800778c:	4680      	mov	r8, r0
 800778e:	460c      	mov	r4, r1
 8007790:	469a      	mov	sl, r3
 8007792:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007796:	d807      	bhi.n	80077a8 <_printf_i+0x28>
 8007798:	2f62      	cmp	r7, #98	; 0x62
 800779a:	d80a      	bhi.n	80077b2 <_printf_i+0x32>
 800779c:	2f00      	cmp	r7, #0
 800779e:	f000 80d8 	beq.w	8007952 <_printf_i+0x1d2>
 80077a2:	2f58      	cmp	r7, #88	; 0x58
 80077a4:	f000 80a3 	beq.w	80078ee <_printf_i+0x16e>
 80077a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077b0:	e03a      	b.n	8007828 <_printf_i+0xa8>
 80077b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077b6:	2b15      	cmp	r3, #21
 80077b8:	d8f6      	bhi.n	80077a8 <_printf_i+0x28>
 80077ba:	a101      	add	r1, pc, #4	; (adr r1, 80077c0 <_printf_i+0x40>)
 80077bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077c0:	08007819 	.word	0x08007819
 80077c4:	0800782d 	.word	0x0800782d
 80077c8:	080077a9 	.word	0x080077a9
 80077cc:	080077a9 	.word	0x080077a9
 80077d0:	080077a9 	.word	0x080077a9
 80077d4:	080077a9 	.word	0x080077a9
 80077d8:	0800782d 	.word	0x0800782d
 80077dc:	080077a9 	.word	0x080077a9
 80077e0:	080077a9 	.word	0x080077a9
 80077e4:	080077a9 	.word	0x080077a9
 80077e8:	080077a9 	.word	0x080077a9
 80077ec:	08007939 	.word	0x08007939
 80077f0:	0800785d 	.word	0x0800785d
 80077f4:	0800791b 	.word	0x0800791b
 80077f8:	080077a9 	.word	0x080077a9
 80077fc:	080077a9 	.word	0x080077a9
 8007800:	0800795b 	.word	0x0800795b
 8007804:	080077a9 	.word	0x080077a9
 8007808:	0800785d 	.word	0x0800785d
 800780c:	080077a9 	.word	0x080077a9
 8007810:	080077a9 	.word	0x080077a9
 8007814:	08007923 	.word	0x08007923
 8007818:	682b      	ldr	r3, [r5, #0]
 800781a:	1d1a      	adds	r2, r3, #4
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	602a      	str	r2, [r5, #0]
 8007820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007828:	2301      	movs	r3, #1
 800782a:	e0a3      	b.n	8007974 <_printf_i+0x1f4>
 800782c:	6820      	ldr	r0, [r4, #0]
 800782e:	6829      	ldr	r1, [r5, #0]
 8007830:	0606      	lsls	r6, r0, #24
 8007832:	f101 0304 	add.w	r3, r1, #4
 8007836:	d50a      	bpl.n	800784e <_printf_i+0xce>
 8007838:	680e      	ldr	r6, [r1, #0]
 800783a:	602b      	str	r3, [r5, #0]
 800783c:	2e00      	cmp	r6, #0
 800783e:	da03      	bge.n	8007848 <_printf_i+0xc8>
 8007840:	232d      	movs	r3, #45	; 0x2d
 8007842:	4276      	negs	r6, r6
 8007844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007848:	485e      	ldr	r0, [pc, #376]	; (80079c4 <_printf_i+0x244>)
 800784a:	230a      	movs	r3, #10
 800784c:	e019      	b.n	8007882 <_printf_i+0x102>
 800784e:	680e      	ldr	r6, [r1, #0]
 8007850:	602b      	str	r3, [r5, #0]
 8007852:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007856:	bf18      	it	ne
 8007858:	b236      	sxthne	r6, r6
 800785a:	e7ef      	b.n	800783c <_printf_i+0xbc>
 800785c:	682b      	ldr	r3, [r5, #0]
 800785e:	6820      	ldr	r0, [r4, #0]
 8007860:	1d19      	adds	r1, r3, #4
 8007862:	6029      	str	r1, [r5, #0]
 8007864:	0601      	lsls	r1, r0, #24
 8007866:	d501      	bpl.n	800786c <_printf_i+0xec>
 8007868:	681e      	ldr	r6, [r3, #0]
 800786a:	e002      	b.n	8007872 <_printf_i+0xf2>
 800786c:	0646      	lsls	r6, r0, #25
 800786e:	d5fb      	bpl.n	8007868 <_printf_i+0xe8>
 8007870:	881e      	ldrh	r6, [r3, #0]
 8007872:	4854      	ldr	r0, [pc, #336]	; (80079c4 <_printf_i+0x244>)
 8007874:	2f6f      	cmp	r7, #111	; 0x6f
 8007876:	bf0c      	ite	eq
 8007878:	2308      	moveq	r3, #8
 800787a:	230a      	movne	r3, #10
 800787c:	2100      	movs	r1, #0
 800787e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007882:	6865      	ldr	r5, [r4, #4]
 8007884:	60a5      	str	r5, [r4, #8]
 8007886:	2d00      	cmp	r5, #0
 8007888:	bfa2      	ittt	ge
 800788a:	6821      	ldrge	r1, [r4, #0]
 800788c:	f021 0104 	bicge.w	r1, r1, #4
 8007890:	6021      	strge	r1, [r4, #0]
 8007892:	b90e      	cbnz	r6, 8007898 <_printf_i+0x118>
 8007894:	2d00      	cmp	r5, #0
 8007896:	d04d      	beq.n	8007934 <_printf_i+0x1b4>
 8007898:	4615      	mov	r5, r2
 800789a:	fbb6 f1f3 	udiv	r1, r6, r3
 800789e:	fb03 6711 	mls	r7, r3, r1, r6
 80078a2:	5dc7      	ldrb	r7, [r0, r7]
 80078a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80078a8:	4637      	mov	r7, r6
 80078aa:	42bb      	cmp	r3, r7
 80078ac:	460e      	mov	r6, r1
 80078ae:	d9f4      	bls.n	800789a <_printf_i+0x11a>
 80078b0:	2b08      	cmp	r3, #8
 80078b2:	d10b      	bne.n	80078cc <_printf_i+0x14c>
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	07de      	lsls	r6, r3, #31
 80078b8:	d508      	bpl.n	80078cc <_printf_i+0x14c>
 80078ba:	6923      	ldr	r3, [r4, #16]
 80078bc:	6861      	ldr	r1, [r4, #4]
 80078be:	4299      	cmp	r1, r3
 80078c0:	bfde      	ittt	le
 80078c2:	2330      	movle	r3, #48	; 0x30
 80078c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078cc:	1b52      	subs	r2, r2, r5
 80078ce:	6122      	str	r2, [r4, #16]
 80078d0:	f8cd a000 	str.w	sl, [sp]
 80078d4:	464b      	mov	r3, r9
 80078d6:	aa03      	add	r2, sp, #12
 80078d8:	4621      	mov	r1, r4
 80078da:	4640      	mov	r0, r8
 80078dc:	f7ff fee2 	bl	80076a4 <_printf_common>
 80078e0:	3001      	adds	r0, #1
 80078e2:	d14c      	bne.n	800797e <_printf_i+0x1fe>
 80078e4:	f04f 30ff 	mov.w	r0, #4294967295
 80078e8:	b004      	add	sp, #16
 80078ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ee:	4835      	ldr	r0, [pc, #212]	; (80079c4 <_printf_i+0x244>)
 80078f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80078f4:	6829      	ldr	r1, [r5, #0]
 80078f6:	6823      	ldr	r3, [r4, #0]
 80078f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80078fc:	6029      	str	r1, [r5, #0]
 80078fe:	061d      	lsls	r5, r3, #24
 8007900:	d514      	bpl.n	800792c <_printf_i+0x1ac>
 8007902:	07df      	lsls	r7, r3, #31
 8007904:	bf44      	itt	mi
 8007906:	f043 0320 	orrmi.w	r3, r3, #32
 800790a:	6023      	strmi	r3, [r4, #0]
 800790c:	b91e      	cbnz	r6, 8007916 <_printf_i+0x196>
 800790e:	6823      	ldr	r3, [r4, #0]
 8007910:	f023 0320 	bic.w	r3, r3, #32
 8007914:	6023      	str	r3, [r4, #0]
 8007916:	2310      	movs	r3, #16
 8007918:	e7b0      	b.n	800787c <_printf_i+0xfc>
 800791a:	6823      	ldr	r3, [r4, #0]
 800791c:	f043 0320 	orr.w	r3, r3, #32
 8007920:	6023      	str	r3, [r4, #0]
 8007922:	2378      	movs	r3, #120	; 0x78
 8007924:	4828      	ldr	r0, [pc, #160]	; (80079c8 <_printf_i+0x248>)
 8007926:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800792a:	e7e3      	b.n	80078f4 <_printf_i+0x174>
 800792c:	0659      	lsls	r1, r3, #25
 800792e:	bf48      	it	mi
 8007930:	b2b6      	uxthmi	r6, r6
 8007932:	e7e6      	b.n	8007902 <_printf_i+0x182>
 8007934:	4615      	mov	r5, r2
 8007936:	e7bb      	b.n	80078b0 <_printf_i+0x130>
 8007938:	682b      	ldr	r3, [r5, #0]
 800793a:	6826      	ldr	r6, [r4, #0]
 800793c:	6961      	ldr	r1, [r4, #20]
 800793e:	1d18      	adds	r0, r3, #4
 8007940:	6028      	str	r0, [r5, #0]
 8007942:	0635      	lsls	r5, r6, #24
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	d501      	bpl.n	800794c <_printf_i+0x1cc>
 8007948:	6019      	str	r1, [r3, #0]
 800794a:	e002      	b.n	8007952 <_printf_i+0x1d2>
 800794c:	0670      	lsls	r0, r6, #25
 800794e:	d5fb      	bpl.n	8007948 <_printf_i+0x1c8>
 8007950:	8019      	strh	r1, [r3, #0]
 8007952:	2300      	movs	r3, #0
 8007954:	6123      	str	r3, [r4, #16]
 8007956:	4615      	mov	r5, r2
 8007958:	e7ba      	b.n	80078d0 <_printf_i+0x150>
 800795a:	682b      	ldr	r3, [r5, #0]
 800795c:	1d1a      	adds	r2, r3, #4
 800795e:	602a      	str	r2, [r5, #0]
 8007960:	681d      	ldr	r5, [r3, #0]
 8007962:	6862      	ldr	r2, [r4, #4]
 8007964:	2100      	movs	r1, #0
 8007966:	4628      	mov	r0, r5
 8007968:	f7f8 fc52 	bl	8000210 <memchr>
 800796c:	b108      	cbz	r0, 8007972 <_printf_i+0x1f2>
 800796e:	1b40      	subs	r0, r0, r5
 8007970:	6060      	str	r0, [r4, #4]
 8007972:	6863      	ldr	r3, [r4, #4]
 8007974:	6123      	str	r3, [r4, #16]
 8007976:	2300      	movs	r3, #0
 8007978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800797c:	e7a8      	b.n	80078d0 <_printf_i+0x150>
 800797e:	6923      	ldr	r3, [r4, #16]
 8007980:	462a      	mov	r2, r5
 8007982:	4649      	mov	r1, r9
 8007984:	4640      	mov	r0, r8
 8007986:	47d0      	blx	sl
 8007988:	3001      	adds	r0, #1
 800798a:	d0ab      	beq.n	80078e4 <_printf_i+0x164>
 800798c:	6823      	ldr	r3, [r4, #0]
 800798e:	079b      	lsls	r3, r3, #30
 8007990:	d413      	bmi.n	80079ba <_printf_i+0x23a>
 8007992:	68e0      	ldr	r0, [r4, #12]
 8007994:	9b03      	ldr	r3, [sp, #12]
 8007996:	4298      	cmp	r0, r3
 8007998:	bfb8      	it	lt
 800799a:	4618      	movlt	r0, r3
 800799c:	e7a4      	b.n	80078e8 <_printf_i+0x168>
 800799e:	2301      	movs	r3, #1
 80079a0:	4632      	mov	r2, r6
 80079a2:	4649      	mov	r1, r9
 80079a4:	4640      	mov	r0, r8
 80079a6:	47d0      	blx	sl
 80079a8:	3001      	adds	r0, #1
 80079aa:	d09b      	beq.n	80078e4 <_printf_i+0x164>
 80079ac:	3501      	adds	r5, #1
 80079ae:	68e3      	ldr	r3, [r4, #12]
 80079b0:	9903      	ldr	r1, [sp, #12]
 80079b2:	1a5b      	subs	r3, r3, r1
 80079b4:	42ab      	cmp	r3, r5
 80079b6:	dcf2      	bgt.n	800799e <_printf_i+0x21e>
 80079b8:	e7eb      	b.n	8007992 <_printf_i+0x212>
 80079ba:	2500      	movs	r5, #0
 80079bc:	f104 0619 	add.w	r6, r4, #25
 80079c0:	e7f5      	b.n	80079ae <_printf_i+0x22e>
 80079c2:	bf00      	nop
 80079c4:	08007e0e 	.word	0x08007e0e
 80079c8:	08007e1f 	.word	0x08007e1f

080079cc <memcpy>:
 80079cc:	440a      	add	r2, r1
 80079ce:	4291      	cmp	r1, r2
 80079d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80079d4:	d100      	bne.n	80079d8 <memcpy+0xc>
 80079d6:	4770      	bx	lr
 80079d8:	b510      	push	{r4, lr}
 80079da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079e2:	4291      	cmp	r1, r2
 80079e4:	d1f9      	bne.n	80079da <memcpy+0xe>
 80079e6:	bd10      	pop	{r4, pc}

080079e8 <memmove>:
 80079e8:	4288      	cmp	r0, r1
 80079ea:	b510      	push	{r4, lr}
 80079ec:	eb01 0402 	add.w	r4, r1, r2
 80079f0:	d902      	bls.n	80079f8 <memmove+0x10>
 80079f2:	4284      	cmp	r4, r0
 80079f4:	4623      	mov	r3, r4
 80079f6:	d807      	bhi.n	8007a08 <memmove+0x20>
 80079f8:	1e43      	subs	r3, r0, #1
 80079fa:	42a1      	cmp	r1, r4
 80079fc:	d008      	beq.n	8007a10 <memmove+0x28>
 80079fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a06:	e7f8      	b.n	80079fa <memmove+0x12>
 8007a08:	4402      	add	r2, r0
 8007a0a:	4601      	mov	r1, r0
 8007a0c:	428a      	cmp	r2, r1
 8007a0e:	d100      	bne.n	8007a12 <memmove+0x2a>
 8007a10:	bd10      	pop	{r4, pc}
 8007a12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a1a:	e7f7      	b.n	8007a0c <memmove+0x24>

08007a1c <_free_r>:
 8007a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a1e:	2900      	cmp	r1, #0
 8007a20:	d044      	beq.n	8007aac <_free_r+0x90>
 8007a22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a26:	9001      	str	r0, [sp, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f1a1 0404 	sub.w	r4, r1, #4
 8007a2e:	bfb8      	it	lt
 8007a30:	18e4      	addlt	r4, r4, r3
 8007a32:	f000 f913 	bl	8007c5c <__malloc_lock>
 8007a36:	4a1e      	ldr	r2, [pc, #120]	; (8007ab0 <_free_r+0x94>)
 8007a38:	9801      	ldr	r0, [sp, #4]
 8007a3a:	6813      	ldr	r3, [r2, #0]
 8007a3c:	b933      	cbnz	r3, 8007a4c <_free_r+0x30>
 8007a3e:	6063      	str	r3, [r4, #4]
 8007a40:	6014      	str	r4, [r2, #0]
 8007a42:	b003      	add	sp, #12
 8007a44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a48:	f000 b90e 	b.w	8007c68 <__malloc_unlock>
 8007a4c:	42a3      	cmp	r3, r4
 8007a4e:	d908      	bls.n	8007a62 <_free_r+0x46>
 8007a50:	6825      	ldr	r5, [r4, #0]
 8007a52:	1961      	adds	r1, r4, r5
 8007a54:	428b      	cmp	r3, r1
 8007a56:	bf01      	itttt	eq
 8007a58:	6819      	ldreq	r1, [r3, #0]
 8007a5a:	685b      	ldreq	r3, [r3, #4]
 8007a5c:	1949      	addeq	r1, r1, r5
 8007a5e:	6021      	streq	r1, [r4, #0]
 8007a60:	e7ed      	b.n	8007a3e <_free_r+0x22>
 8007a62:	461a      	mov	r2, r3
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	b10b      	cbz	r3, 8007a6c <_free_r+0x50>
 8007a68:	42a3      	cmp	r3, r4
 8007a6a:	d9fa      	bls.n	8007a62 <_free_r+0x46>
 8007a6c:	6811      	ldr	r1, [r2, #0]
 8007a6e:	1855      	adds	r5, r2, r1
 8007a70:	42a5      	cmp	r5, r4
 8007a72:	d10b      	bne.n	8007a8c <_free_r+0x70>
 8007a74:	6824      	ldr	r4, [r4, #0]
 8007a76:	4421      	add	r1, r4
 8007a78:	1854      	adds	r4, r2, r1
 8007a7a:	42a3      	cmp	r3, r4
 8007a7c:	6011      	str	r1, [r2, #0]
 8007a7e:	d1e0      	bne.n	8007a42 <_free_r+0x26>
 8007a80:	681c      	ldr	r4, [r3, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	6053      	str	r3, [r2, #4]
 8007a86:	4421      	add	r1, r4
 8007a88:	6011      	str	r1, [r2, #0]
 8007a8a:	e7da      	b.n	8007a42 <_free_r+0x26>
 8007a8c:	d902      	bls.n	8007a94 <_free_r+0x78>
 8007a8e:	230c      	movs	r3, #12
 8007a90:	6003      	str	r3, [r0, #0]
 8007a92:	e7d6      	b.n	8007a42 <_free_r+0x26>
 8007a94:	6825      	ldr	r5, [r4, #0]
 8007a96:	1961      	adds	r1, r4, r5
 8007a98:	428b      	cmp	r3, r1
 8007a9a:	bf04      	itt	eq
 8007a9c:	6819      	ldreq	r1, [r3, #0]
 8007a9e:	685b      	ldreq	r3, [r3, #4]
 8007aa0:	6063      	str	r3, [r4, #4]
 8007aa2:	bf04      	itt	eq
 8007aa4:	1949      	addeq	r1, r1, r5
 8007aa6:	6021      	streq	r1, [r4, #0]
 8007aa8:	6054      	str	r4, [r2, #4]
 8007aaa:	e7ca      	b.n	8007a42 <_free_r+0x26>
 8007aac:	b003      	add	sp, #12
 8007aae:	bd30      	pop	{r4, r5, pc}
 8007ab0:	200009b8 	.word	0x200009b8

08007ab4 <sbrk_aligned>:
 8007ab4:	b570      	push	{r4, r5, r6, lr}
 8007ab6:	4e0e      	ldr	r6, [pc, #56]	; (8007af0 <sbrk_aligned+0x3c>)
 8007ab8:	460c      	mov	r4, r1
 8007aba:	6831      	ldr	r1, [r6, #0]
 8007abc:	4605      	mov	r5, r0
 8007abe:	b911      	cbnz	r1, 8007ac6 <sbrk_aligned+0x12>
 8007ac0:	f000 f8bc 	bl	8007c3c <_sbrk_r>
 8007ac4:	6030      	str	r0, [r6, #0]
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	4628      	mov	r0, r5
 8007aca:	f000 f8b7 	bl	8007c3c <_sbrk_r>
 8007ace:	1c43      	adds	r3, r0, #1
 8007ad0:	d00a      	beq.n	8007ae8 <sbrk_aligned+0x34>
 8007ad2:	1cc4      	adds	r4, r0, #3
 8007ad4:	f024 0403 	bic.w	r4, r4, #3
 8007ad8:	42a0      	cmp	r0, r4
 8007ada:	d007      	beq.n	8007aec <sbrk_aligned+0x38>
 8007adc:	1a21      	subs	r1, r4, r0
 8007ade:	4628      	mov	r0, r5
 8007ae0:	f000 f8ac 	bl	8007c3c <_sbrk_r>
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	d101      	bne.n	8007aec <sbrk_aligned+0x38>
 8007ae8:	f04f 34ff 	mov.w	r4, #4294967295
 8007aec:	4620      	mov	r0, r4
 8007aee:	bd70      	pop	{r4, r5, r6, pc}
 8007af0:	200009bc 	.word	0x200009bc

08007af4 <_malloc_r>:
 8007af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af8:	1ccd      	adds	r5, r1, #3
 8007afa:	f025 0503 	bic.w	r5, r5, #3
 8007afe:	3508      	adds	r5, #8
 8007b00:	2d0c      	cmp	r5, #12
 8007b02:	bf38      	it	cc
 8007b04:	250c      	movcc	r5, #12
 8007b06:	2d00      	cmp	r5, #0
 8007b08:	4607      	mov	r7, r0
 8007b0a:	db01      	blt.n	8007b10 <_malloc_r+0x1c>
 8007b0c:	42a9      	cmp	r1, r5
 8007b0e:	d905      	bls.n	8007b1c <_malloc_r+0x28>
 8007b10:	230c      	movs	r3, #12
 8007b12:	603b      	str	r3, [r7, #0]
 8007b14:	2600      	movs	r6, #0
 8007b16:	4630      	mov	r0, r6
 8007b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b1c:	4e2e      	ldr	r6, [pc, #184]	; (8007bd8 <_malloc_r+0xe4>)
 8007b1e:	f000 f89d 	bl	8007c5c <__malloc_lock>
 8007b22:	6833      	ldr	r3, [r6, #0]
 8007b24:	461c      	mov	r4, r3
 8007b26:	bb34      	cbnz	r4, 8007b76 <_malloc_r+0x82>
 8007b28:	4629      	mov	r1, r5
 8007b2a:	4638      	mov	r0, r7
 8007b2c:	f7ff ffc2 	bl	8007ab4 <sbrk_aligned>
 8007b30:	1c43      	adds	r3, r0, #1
 8007b32:	4604      	mov	r4, r0
 8007b34:	d14d      	bne.n	8007bd2 <_malloc_r+0xde>
 8007b36:	6834      	ldr	r4, [r6, #0]
 8007b38:	4626      	mov	r6, r4
 8007b3a:	2e00      	cmp	r6, #0
 8007b3c:	d140      	bne.n	8007bc0 <_malloc_r+0xcc>
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	4631      	mov	r1, r6
 8007b42:	4638      	mov	r0, r7
 8007b44:	eb04 0803 	add.w	r8, r4, r3
 8007b48:	f000 f878 	bl	8007c3c <_sbrk_r>
 8007b4c:	4580      	cmp	r8, r0
 8007b4e:	d13a      	bne.n	8007bc6 <_malloc_r+0xd2>
 8007b50:	6821      	ldr	r1, [r4, #0]
 8007b52:	3503      	adds	r5, #3
 8007b54:	1a6d      	subs	r5, r5, r1
 8007b56:	f025 0503 	bic.w	r5, r5, #3
 8007b5a:	3508      	adds	r5, #8
 8007b5c:	2d0c      	cmp	r5, #12
 8007b5e:	bf38      	it	cc
 8007b60:	250c      	movcc	r5, #12
 8007b62:	4629      	mov	r1, r5
 8007b64:	4638      	mov	r0, r7
 8007b66:	f7ff ffa5 	bl	8007ab4 <sbrk_aligned>
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	d02b      	beq.n	8007bc6 <_malloc_r+0xd2>
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	442b      	add	r3, r5
 8007b72:	6023      	str	r3, [r4, #0]
 8007b74:	e00e      	b.n	8007b94 <_malloc_r+0xa0>
 8007b76:	6822      	ldr	r2, [r4, #0]
 8007b78:	1b52      	subs	r2, r2, r5
 8007b7a:	d41e      	bmi.n	8007bba <_malloc_r+0xc6>
 8007b7c:	2a0b      	cmp	r2, #11
 8007b7e:	d916      	bls.n	8007bae <_malloc_r+0xba>
 8007b80:	1961      	adds	r1, r4, r5
 8007b82:	42a3      	cmp	r3, r4
 8007b84:	6025      	str	r5, [r4, #0]
 8007b86:	bf18      	it	ne
 8007b88:	6059      	strne	r1, [r3, #4]
 8007b8a:	6863      	ldr	r3, [r4, #4]
 8007b8c:	bf08      	it	eq
 8007b8e:	6031      	streq	r1, [r6, #0]
 8007b90:	5162      	str	r2, [r4, r5]
 8007b92:	604b      	str	r3, [r1, #4]
 8007b94:	4638      	mov	r0, r7
 8007b96:	f104 060b 	add.w	r6, r4, #11
 8007b9a:	f000 f865 	bl	8007c68 <__malloc_unlock>
 8007b9e:	f026 0607 	bic.w	r6, r6, #7
 8007ba2:	1d23      	adds	r3, r4, #4
 8007ba4:	1af2      	subs	r2, r6, r3
 8007ba6:	d0b6      	beq.n	8007b16 <_malloc_r+0x22>
 8007ba8:	1b9b      	subs	r3, r3, r6
 8007baa:	50a3      	str	r3, [r4, r2]
 8007bac:	e7b3      	b.n	8007b16 <_malloc_r+0x22>
 8007bae:	6862      	ldr	r2, [r4, #4]
 8007bb0:	42a3      	cmp	r3, r4
 8007bb2:	bf0c      	ite	eq
 8007bb4:	6032      	streq	r2, [r6, #0]
 8007bb6:	605a      	strne	r2, [r3, #4]
 8007bb8:	e7ec      	b.n	8007b94 <_malloc_r+0xa0>
 8007bba:	4623      	mov	r3, r4
 8007bbc:	6864      	ldr	r4, [r4, #4]
 8007bbe:	e7b2      	b.n	8007b26 <_malloc_r+0x32>
 8007bc0:	4634      	mov	r4, r6
 8007bc2:	6876      	ldr	r6, [r6, #4]
 8007bc4:	e7b9      	b.n	8007b3a <_malloc_r+0x46>
 8007bc6:	230c      	movs	r3, #12
 8007bc8:	603b      	str	r3, [r7, #0]
 8007bca:	4638      	mov	r0, r7
 8007bcc:	f000 f84c 	bl	8007c68 <__malloc_unlock>
 8007bd0:	e7a1      	b.n	8007b16 <_malloc_r+0x22>
 8007bd2:	6025      	str	r5, [r4, #0]
 8007bd4:	e7de      	b.n	8007b94 <_malloc_r+0xa0>
 8007bd6:	bf00      	nop
 8007bd8:	200009b8 	.word	0x200009b8

08007bdc <_realloc_r>:
 8007bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be0:	4680      	mov	r8, r0
 8007be2:	4614      	mov	r4, r2
 8007be4:	460e      	mov	r6, r1
 8007be6:	b921      	cbnz	r1, 8007bf2 <_realloc_r+0x16>
 8007be8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bec:	4611      	mov	r1, r2
 8007bee:	f7ff bf81 	b.w	8007af4 <_malloc_r>
 8007bf2:	b92a      	cbnz	r2, 8007c00 <_realloc_r+0x24>
 8007bf4:	f7ff ff12 	bl	8007a1c <_free_r>
 8007bf8:	4625      	mov	r5, r4
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c00:	f000 f838 	bl	8007c74 <_malloc_usable_size_r>
 8007c04:	4284      	cmp	r4, r0
 8007c06:	4607      	mov	r7, r0
 8007c08:	d802      	bhi.n	8007c10 <_realloc_r+0x34>
 8007c0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c0e:	d812      	bhi.n	8007c36 <_realloc_r+0x5a>
 8007c10:	4621      	mov	r1, r4
 8007c12:	4640      	mov	r0, r8
 8007c14:	f7ff ff6e 	bl	8007af4 <_malloc_r>
 8007c18:	4605      	mov	r5, r0
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	d0ed      	beq.n	8007bfa <_realloc_r+0x1e>
 8007c1e:	42bc      	cmp	r4, r7
 8007c20:	4622      	mov	r2, r4
 8007c22:	4631      	mov	r1, r6
 8007c24:	bf28      	it	cs
 8007c26:	463a      	movcs	r2, r7
 8007c28:	f7ff fed0 	bl	80079cc <memcpy>
 8007c2c:	4631      	mov	r1, r6
 8007c2e:	4640      	mov	r0, r8
 8007c30:	f7ff fef4 	bl	8007a1c <_free_r>
 8007c34:	e7e1      	b.n	8007bfa <_realloc_r+0x1e>
 8007c36:	4635      	mov	r5, r6
 8007c38:	e7df      	b.n	8007bfa <_realloc_r+0x1e>
	...

08007c3c <_sbrk_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	4d06      	ldr	r5, [pc, #24]	; (8007c58 <_sbrk_r+0x1c>)
 8007c40:	2300      	movs	r3, #0
 8007c42:	4604      	mov	r4, r0
 8007c44:	4608      	mov	r0, r1
 8007c46:	602b      	str	r3, [r5, #0]
 8007c48:	f7f9 f980 	bl	8000f4c <_sbrk>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d102      	bne.n	8007c56 <_sbrk_r+0x1a>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	b103      	cbz	r3, 8007c56 <_sbrk_r+0x1a>
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
 8007c58:	200009c0 	.word	0x200009c0

08007c5c <__malloc_lock>:
 8007c5c:	4801      	ldr	r0, [pc, #4]	; (8007c64 <__malloc_lock+0x8>)
 8007c5e:	f000 b811 	b.w	8007c84 <__retarget_lock_acquire_recursive>
 8007c62:	bf00      	nop
 8007c64:	200009c4 	.word	0x200009c4

08007c68 <__malloc_unlock>:
 8007c68:	4801      	ldr	r0, [pc, #4]	; (8007c70 <__malloc_unlock+0x8>)
 8007c6a:	f000 b80c 	b.w	8007c86 <__retarget_lock_release_recursive>
 8007c6e:	bf00      	nop
 8007c70:	200009c4 	.word	0x200009c4

08007c74 <_malloc_usable_size_r>:
 8007c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c78:	1f18      	subs	r0, r3, #4
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	bfbc      	itt	lt
 8007c7e:	580b      	ldrlt	r3, [r1, r0]
 8007c80:	18c0      	addlt	r0, r0, r3
 8007c82:	4770      	bx	lr

08007c84 <__retarget_lock_acquire_recursive>:
 8007c84:	4770      	bx	lr

08007c86 <__retarget_lock_release_recursive>:
 8007c86:	4770      	bx	lr

08007c88 <_init>:
 8007c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8a:	bf00      	nop
 8007c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c8e:	bc08      	pop	{r3}
 8007c90:	469e      	mov	lr, r3
 8007c92:	4770      	bx	lr

08007c94 <_fini>:
 8007c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c96:	bf00      	nop
 8007c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c9a:	bc08      	pop	{r3}
 8007c9c:	469e      	mov	lr, r3
 8007c9e:	4770      	bx	lr
